"use strict";
/**
 * The temporal worker connects to the service and runs workflows and activities.
 *
 * ### Usage
 *
 * <!--SNIPSTART typescript-hello-worker-->
 * <!--SNIPEND-->
 * @module
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.defaultWorkflowInterceptorModules = exports.UnexpectedError = exports.TransportError = exports.ShutdownError = exports.errors = exports.workflowLogAttributes = exports.WorkflowLogInterceptor = exports.WorkflowInboundLogInterceptor = exports.defaultSinks = exports.appendDefaultInterceptors = exports.activityLogAttributes = exports.ActivityInboundLogInterceptor = exports.bundleWorkflowCode = exports.ReplayError = exports.Worker = exports.defaultPayloadConverter = exports.makeTelemetryFilterString = exports.Runtime = exports.LogTimestamp = exports.DefaultLogger = exports.UnhandledRejectionError = exports.PromiseCompletionTimeoutError = exports.GracefulShutdownPeriodExpiredError = exports.CombinedWorkerRunError = exports.IllegalStateError = exports.startDebugReplayer = exports.NativeConnection = void 0;
var connection_1 = require("./connection");
Object.defineProperty(exports, "NativeConnection", { enumerable: true, get: function () { return connection_1.NativeConnection; } });
var debug_replayer_1 = require("./debug-replayer");
Object.defineProperty(exports, "startDebugReplayer", { enumerable: true, get: function () { return debug_replayer_1.startDebugReplayer; } });
var common_1 = require("@temporalio/common");
Object.defineProperty(exports, "IllegalStateError", { enumerable: true, get: function () { return common_1.IllegalStateError; } });
var errors_1 = require("./errors");
Object.defineProperty(exports, "CombinedWorkerRunError", { enumerable: true, get: function () { return errors_1.CombinedWorkerRunError; } });
Object.defineProperty(exports, "GracefulShutdownPeriodExpiredError", { enumerable: true, get: function () { return errors_1.GracefulShutdownPeriodExpiredError; } });
Object.defineProperty(exports, "PromiseCompletionTimeoutError", { enumerable: true, get: function () { return errors_1.PromiseCompletionTimeoutError; } });
Object.defineProperty(exports, "UnhandledRejectionError", { enumerable: true, get: function () { return errors_1.UnhandledRejectionError; } });
__exportStar(require("./interceptors"), exports);
var logger_1 = require("./logger");
Object.defineProperty(exports, "DefaultLogger", { enumerable: true, get: function () { return logger_1.DefaultLogger; } });
Object.defineProperty(exports, "LogTimestamp", { enumerable: true, get: function () { return logger_1.LogTimestamp; } });
var runtime_1 = require("./runtime");
Object.defineProperty(exports, "Runtime", { enumerable: true, get: function () { return runtime_1.Runtime; } });
var runtime_options_1 = require("./runtime-options");
Object.defineProperty(exports, "makeTelemetryFilterString", { enumerable: true, get: function () { return runtime_options_1.makeTelemetryFilterString; } });
__exportStar(require("./sinks"), exports);
var worker_1 = require("./worker");
Object.defineProperty(exports, "defaultPayloadConverter", { enumerable: true, get: function () { return worker_1.defaultPayloadConverter; } });
Object.defineProperty(exports, "Worker", { enumerable: true, get: function () { return worker_1.Worker; } });
var replay_1 = require("./replay");
Object.defineProperty(exports, "ReplayError", { enumerable: true, get: function () { return replay_1.ReplayError; } });
var bundler_1 = require("./workflow/bundler");
Object.defineProperty(exports, "bundleWorkflowCode", { enumerable: true, get: function () { return bundler_1.bundleWorkflowCode; } });
/* eslint-disable deprecation/deprecation */
// Anything below this line is deprecated
var activity_log_interceptor_1 = require("./activity-log-interceptor");
/**
 * @deprecated `ActivityInboundLogInterceptor` is deprecated. Activity lifecycle events are now automatically logged
 *             by the SDK. To customize activity log attributes, register a custom {@link ActivityOutboundCallsInterceptor}
 *             that intercepts the `getLogAttributes()` method. To customize where log messages are sent,
 *             set the {@link Runtime.logger} property.
 */
Object.defineProperty(exports, "ActivityInboundLogInterceptor", { enumerable: true, get: function () { return activity_log_interceptor_1.ActivityInboundLogInterceptor; } });
var activity_1 = require("./activity");
/**
 * @deprecated This function is meant for internal usage. Don't use it.
 */
Object.defineProperty(exports, "activityLogAttributes", { enumerable: true, get: function () { return activity_1.activityLogAttributes; } });
var worker_options_1 = require("./worker-options");
/**
 * @deprecated Including `appendDefaultInterceptors()` in the worker options is no longer required. To configure a
 *             custom logger, set the {@link Runtime.logger} property instead.
 */
Object.defineProperty(exports, "appendDefaultInterceptors", { enumerable: true, get: function () { return worker_options_1.appendDefaultInterceptors; } });
/**
 * @deprecated Including `defaultSinks()` in the worker options is no longer required. To configure
 *             a custom logger, set the {@link Runtime.logger} property instead.
 */
Object.defineProperty(exports, "defaultSinks", { enumerable: true, get: function () { return worker_options_1.defaultSinks; } });
var workflow_log_interceptor_1 = require("./workflow-log-interceptor");
/**
 * @deprecated `WorkflowInboundLogInterceptor` is deprecated. Workflow lifecycle events are now automatically logged
 *             by the SDK. To customize workflow log attributes, simply register a custom `WorkflowInterceptors` that
 *             intercepts the `outbound.getLogAttributes()` method.
 */
Object.defineProperty(exports, "WorkflowInboundLogInterceptor", { enumerable: true, get: function () { return workflow_log_interceptor_1.WorkflowInboundLogInterceptor; } });
/**
 * @deprecated `WorkflowLogInterceptor` is deprecated. Workflow lifecycle events are now automatically logged
 *             by the SDK. To customize workflow log attributes, simply register a custom `WorkflowInterceptors` that
 *             intercepts the `outbound.getLogAttributes()` method.
 */
Object.defineProperty(exports, "WorkflowLogInterceptor", { enumerable: true, get: function () { return workflow_log_interceptor_1.WorkflowLogInterceptor; } });
var logs_1 = require("@temporalio/workflow/lib/logs");
/**
 * @deprecated This function is meant for internal usage. Don't use it.
 */
Object.defineProperty(exports, "workflowLogAttributes", { enumerable: true, get: function () { return logs_1.workflowLogAttributes; } });
var errors_2 = require("./errors");
/**
 * @deprecated Import error classes directly
 */
Object.defineProperty(exports, "errors", { enumerable: true, get: function () { return errors_2.errors; } });
/**
 * @deprecated - meant for internal use only
 * @hidden
 */
Object.defineProperty(exports, "ShutdownError", { enumerable: true, get: function () { return errors_2.ShutdownError; } });
/**
 * @deprecated - meant for internal use only
 * @hidden
 */
Object.defineProperty(exports, "TransportError", { enumerable: true, get: function () { return errors_2.TransportError; } });
/**
 * @deprecated - meant for internal use only
 * @hidden
 */
Object.defineProperty(exports, "UnexpectedError", { enumerable: true, get: function () { return errors_2.UnexpectedError; } });
/**
 * @deprecated Including `defaultWorkflowInterceptorModules` in BundlerOptions.workflowInterceptorModules is no longer required.
 */
exports.defaultWorkflowInterceptorModules = [];
//# sourceMappingURL=index.js.map