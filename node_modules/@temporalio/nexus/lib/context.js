"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.metricMeter = exports.log = exports.asyncLocalStorage = void 0;
exports.getHandlerContext = getHandlerContext;
exports.getClient = getClient;
const node_async_hooks_1 = require("node:async_hooks");
// Context Storage /////////////////////////////////////////////////////////////////////////////////
// Make it safe to use @temporalio/nexus with multiple versions installed.
const asyncLocalStorageSymbol = Symbol.for('__temporal_nexus_context_storage__');
if (!globalThis[asyncLocalStorageSymbol]) {
    globalThis[asyncLocalStorageSymbol] = new node_async_hooks_1.AsyncLocalStorage();
}
exports.asyncLocalStorage = globalThis[asyncLocalStorageSymbol];
function getHandlerContext() {
    const ctx = exports.asyncLocalStorage.getStore();
    if (ctx == null) {
        throw new ReferenceError('Not in a Nexus handler context');
    }
    return ctx;
}
// Basic APIs //////////////////////////////////////////////////////////////////////////////////////
/**
 * A logger for use in Nexus Handler scope.
 *
 * This defaults to the `Runtime`'s Logger (see {@link Runtime.logger}). Attributes from the
 * current Nexus handler context are automatically included as metadata on every log entries. An
 * extra `sdkComponent` metadata attribute is also added, with value `nexus`; this can be used
 * for fine-grained filtering of log entries further downstream.
 *
 * To customize log attributes, register a {@link nexus.NexusOutboundCallsInterceptor} that
 * intercepts the `getLogAttributes()` method.
 *
 * @experimental Nexus support in Temporal SDK is experimental.
 */
exports.log = {
    log(level, message, meta) {
        return getHandlerContext().log.log(level, message, meta);
    },
    trace(message, meta) {
        return getHandlerContext().log.trace(message, meta);
    },
    debug(message, meta) {
        return getHandlerContext().log.debug(message, meta);
    },
    info(message, meta) {
        return getHandlerContext().log.info(message, meta);
    },
    warn(message, meta) {
        return getHandlerContext().log.warn(message, meta);
    },
    error(message, meta) {
        return getHandlerContext().log.error(message, meta);
    },
};
/**
 * A metric meter for use in Nexus handler scope, with Nexus handler-specific tags.
 *
 * To add custom tags, register a {@link nexus.NexusOutboundCallsInterceptor} that
 * intercepts the `getMetricTags()` method.
 *
 * @experimental Nexus support in Temporal SDK is experimental.
 */
exports.metricMeter = {
    createCounter(name, unit, description) {
        return getHandlerContext().metrics.createCounter(name, unit, description);
    },
    createHistogram(name, valueType = 'int', unit, description) {
        return getHandlerContext().metrics.createHistogram(name, valueType, unit, description);
    },
    createGauge(name, valueType = 'int', unit, description) {
        return getHandlerContext().metrics.createGauge(name, valueType, unit, description);
    },
    withTags(tags) {
        return getHandlerContext().metrics.withTags(tags);
    },
};
/**
 * Returns a client to be used in a Nexus Operation's context, this Client is powered by the same
 * NativeConnection that the worker was created with.
 *
 * @experimental Nexus support in Temporal SDK is experimental.
 */
function getClient() {
    return getHandlerContext().client;
}
//# sourceMappingURL=context.js.map