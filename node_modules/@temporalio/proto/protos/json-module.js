/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/
"use strict";

var $protobuf = require("protobufjs/light");

var $root = ($protobuf.roots.__temporal || ($protobuf.roots.__temporal = new $protobuf.Root()))
.addJSON({
  coresdk: {
    options: {
      ruby_package: "Temporalio::Internal::Bridge::Api::CoreInterface"
    },
    nested: {
      ActivityHeartbeat: {
        fields: {
          taskToken: {
            type: "bytes",
            id: 1
          },
          details: {
            rule: "repeated",
            type: "temporal.api.common.v1.Payload",
            id: 2
          }
        }
      },
      ActivityTaskCompletion: {
        fields: {
          taskToken: {
            type: "bytes",
            id: 1
          },
          result: {
            type: "activity_result.ActivityExecutionResult",
            id: 2
          }
        }
      },
      WorkflowSlotInfo: {
        fields: {
          workflowType: {
            type: "string",
            id: 1
          },
          isSticky: {
            type: "bool",
            id: 2
          }
        }
      },
      ActivitySlotInfo: {
        fields: {
          activityType: {
            type: "string",
            id: 1
          }
        }
      },
      LocalActivitySlotInfo: {
        fields: {
          activityType: {
            type: "string",
            id: 1
          }
        }
      },
      NexusSlotInfo: {
        fields: {
          service: {
            type: "string",
            id: 1
          },
          operation: {
            type: "string",
            id: 2
          }
        }
      },
      activity_result: {
        options: {
          ruby_package: "Temporalio::Internal::Bridge::Api::ActivityResult"
        },
        nested: {
          ActivityExecutionResult: {
            oneofs: {
              status: {
                oneof: [
                  "completed",
                  "failed",
                  "cancelled",
                  "willCompleteAsync"
                ]
              }
            },
            fields: {
              completed: {
                type: "Success",
                id: 1
              },
              failed: {
                type: "Failure",
                id: 2
              },
              cancelled: {
                type: "Cancellation",
                id: 3
              },
              willCompleteAsync: {
                type: "WillCompleteAsync",
                id: 4
              }
            }
          },
          ActivityResolution: {
            oneofs: {
              status: {
                oneof: [
                  "completed",
                  "failed",
                  "cancelled",
                  "backoff"
                ]
              }
            },
            fields: {
              completed: {
                type: "Success",
                id: 1
              },
              failed: {
                type: "Failure",
                id: 2
              },
              cancelled: {
                type: "Cancellation",
                id: 3
              },
              backoff: {
                type: "DoBackoff",
                id: 4
              }
            }
          },
          Success: {
            fields: {
              result: {
                type: "temporal.api.common.v1.Payload",
                id: 1
              }
            }
          },
          Failure: {
            fields: {
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 1
              }
            }
          },
          Cancellation: {
            fields: {
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 1
              }
            }
          },
          WillCompleteAsync: {
            fields: {}
          },
          DoBackoff: {
            fields: {
              attempt: {
                type: "uint32",
                id: 1
              },
              backoffDuration: {
                type: "google.protobuf.Duration",
                id: 2
              },
              originalScheduleTime: {
                type: "google.protobuf.Timestamp",
                id: 3
              }
            }
          }
        }
      },
      activity_task: {
        options: {
          ruby_package: "Temporalio::Internal::Bridge::Api::ActivityTask"
        },
        nested: {
          ActivityTask: {
            oneofs: {
              variant: {
                oneof: [
                  "start",
                  "cancel"
                ]
              }
            },
            fields: {
              taskToken: {
                type: "bytes",
                id: 1
              },
              start: {
                type: "Start",
                id: 3
              },
              cancel: {
                type: "Cancel",
                id: 4
              }
            }
          },
          Start: {
            fields: {
              workflowNamespace: {
                type: "string",
                id: 1
              },
              workflowType: {
                type: "string",
                id: 2
              },
              workflowExecution: {
                type: "temporal.api.common.v1.WorkflowExecution",
                id: 3
              },
              activityId: {
                type: "string",
                id: 4
              },
              activityType: {
                type: "string",
                id: 5
              },
              headerFields: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 6
              },
              input: {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 7
              },
              heartbeatDetails: {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 8
              },
              scheduledTime: {
                type: "google.protobuf.Timestamp",
                id: 9
              },
              currentAttemptScheduledTime: {
                type: "google.protobuf.Timestamp",
                id: 10
              },
              startedTime: {
                type: "google.protobuf.Timestamp",
                id: 11
              },
              attempt: {
                type: "uint32",
                id: 12
              },
              scheduleToCloseTimeout: {
                type: "google.protobuf.Duration",
                id: 13
              },
              startToCloseTimeout: {
                type: "google.protobuf.Duration",
                id: 14
              },
              heartbeatTimeout: {
                type: "google.protobuf.Duration",
                id: 15
              },
              retryPolicy: {
                type: "temporal.api.common.v1.RetryPolicy",
                id: 16
              },
              priority: {
                type: "temporal.api.common.v1.Priority",
                id: 18
              },
              isLocal: {
                type: "bool",
                id: 17
              }
            }
          },
          Cancel: {
            fields: {
              reason: {
                type: "ActivityCancelReason",
                id: 1
              },
              details: {
                type: "ActivityCancellationDetails",
                id: 2
              }
            }
          },
          ActivityCancellationDetails: {
            fields: {
              isNotFound: {
                type: "bool",
                id: 1
              },
              isCancelled: {
                type: "bool",
                id: 2
              },
              isPaused: {
                type: "bool",
                id: 3
              },
              isTimedOut: {
                type: "bool",
                id: 4
              },
              isWorkerShutdown: {
                type: "bool",
                id: 5
              },
              isReset: {
                type: "bool",
                id: 6
              }
            }
          },
          ActivityCancelReason: {
            values: {
              NOT_FOUND: 0,
              CANCELLED: 1,
              TIMED_OUT: 2,
              WORKER_SHUTDOWN: 3,
              PAUSED: 4,
              RESET: 5
            }
          }
        }
      },
      common: {
        options: {
          ruby_package: "Temporalio::Internal::Bridge::Api::Common"
        },
        nested: {
          NamespacedWorkflowExecution: {
            fields: {
              namespace: {
                type: "string",
                id: 1
              },
              workflowId: {
                type: "string",
                id: 2
              },
              runId: {
                type: "string",
                id: 3
              }
            }
          },
          VersioningIntent: {
            values: {
              UNSPECIFIED: 0,
              COMPATIBLE: 1,
              DEFAULT: 2
            }
          },
          WorkerDeploymentVersion: {
            fields: {
              deploymentName: {
                type: "string",
                id: 1
              },
              buildId: {
                type: "string",
                id: 2
              }
            }
          }
        }
      },
      external_data: {
        options: {
          ruby_package: "Temporalio::Internal::Bridge::Api::ExternalData"
        },
        nested: {
          LocalActivityMarkerData: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              attempt: {
                type: "uint32",
                id: 2
              },
              activityId: {
                type: "string",
                id: 3
              },
              activityType: {
                type: "string",
                id: 4
              },
              completeTime: {
                type: "google.protobuf.Timestamp",
                id: 5
              },
              backoff: {
                type: "google.protobuf.Duration",
                id: 6
              },
              originalScheduleTime: {
                type: "google.protobuf.Timestamp",
                id: 7
              }
            }
          },
          PatchedMarkerData: {
            fields: {
              id: {
                type: "string",
                id: 1
              },
              deprecated: {
                type: "bool",
                id: 2
              }
            }
          }
        }
      },
      workflow_activation: {
        options: {
          ruby_package: "Temporalio::Internal::Bridge::Api::WorkflowActivation"
        },
        nested: {
          WorkflowActivation: {
            fields: {
              runId: {
                type: "string",
                id: 1
              },
              timestamp: {
                type: "google.protobuf.Timestamp",
                id: 2
              },
              isReplaying: {
                type: "bool",
                id: 3
              },
              historyLength: {
                type: "uint32",
                id: 4
              },
              jobs: {
                rule: "repeated",
                type: "WorkflowActivationJob",
                id: 5
              },
              availableInternalFlags: {
                rule: "repeated",
                type: "uint32",
                id: 6
              },
              historySizeBytes: {
                type: "uint64",
                id: 7
              },
              continueAsNewSuggested: {
                type: "bool",
                id: 8
              },
              deploymentVersionForCurrentTask: {
                type: "common.WorkerDeploymentVersion",
                id: 9
              }
            }
          },
          WorkflowActivationJob: {
            oneofs: {
              variant: {
                oneof: [
                  "initializeWorkflow",
                  "fireTimer",
                  "updateRandomSeed",
                  "queryWorkflow",
                  "cancelWorkflow",
                  "signalWorkflow",
                  "resolveActivity",
                  "notifyHasPatch",
                  "resolveChildWorkflowExecutionStart",
                  "resolveChildWorkflowExecution",
                  "resolveSignalExternalWorkflow",
                  "resolveRequestCancelExternalWorkflow",
                  "doUpdate",
                  "resolveNexusOperationStart",
                  "resolveNexusOperation",
                  "removeFromCache"
                ]
              }
            },
            fields: {
              initializeWorkflow: {
                type: "InitializeWorkflow",
                id: 1
              },
              fireTimer: {
                type: "FireTimer",
                id: 2
              },
              updateRandomSeed: {
                type: "UpdateRandomSeed",
                id: 4
              },
              queryWorkflow: {
                type: "QueryWorkflow",
                id: 5
              },
              cancelWorkflow: {
                type: "CancelWorkflow",
                id: 6
              },
              signalWorkflow: {
                type: "SignalWorkflow",
                id: 7
              },
              resolveActivity: {
                type: "ResolveActivity",
                id: 8
              },
              notifyHasPatch: {
                type: "NotifyHasPatch",
                id: 9
              },
              resolveChildWorkflowExecutionStart: {
                type: "ResolveChildWorkflowExecutionStart",
                id: 10
              },
              resolveChildWorkflowExecution: {
                type: "ResolveChildWorkflowExecution",
                id: 11
              },
              resolveSignalExternalWorkflow: {
                type: "ResolveSignalExternalWorkflow",
                id: 12
              },
              resolveRequestCancelExternalWorkflow: {
                type: "ResolveRequestCancelExternalWorkflow",
                id: 13
              },
              doUpdate: {
                type: "DoUpdate",
                id: 14
              },
              resolveNexusOperationStart: {
                type: "ResolveNexusOperationStart",
                id: 15
              },
              resolveNexusOperation: {
                type: "ResolveNexusOperation",
                id: 16
              },
              removeFromCache: {
                type: "RemoveFromCache",
                id: 50
              }
            }
          },
          InitializeWorkflow: {
            fields: {
              workflowType: {
                type: "string",
                id: 1
              },
              workflowId: {
                type: "string",
                id: 2
              },
              "arguments": {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 3
              },
              randomnessSeed: {
                type: "uint64",
                id: 4
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 5
              },
              identity: {
                type: "string",
                id: 6
              },
              parentWorkflowInfo: {
                type: "common.NamespacedWorkflowExecution",
                id: 7
              },
              workflowExecutionTimeout: {
                type: "google.protobuf.Duration",
                id: 8
              },
              workflowRunTimeout: {
                type: "google.protobuf.Duration",
                id: 9
              },
              workflowTaskTimeout: {
                type: "google.protobuf.Duration",
                id: 10
              },
              continuedFromExecutionRunId: {
                type: "string",
                id: 11
              },
              continuedInitiator: {
                type: "temporal.api.enums.v1.ContinueAsNewInitiator",
                id: 12
              },
              continuedFailure: {
                type: "temporal.api.failure.v1.Failure",
                id: 13
              },
              lastCompletionResult: {
                type: "temporal.api.common.v1.Payloads",
                id: 14
              },
              firstExecutionRunId: {
                type: "string",
                id: 15
              },
              retryPolicy: {
                type: "temporal.api.common.v1.RetryPolicy",
                id: 16
              },
              attempt: {
                type: "int32",
                id: 17
              },
              cronSchedule: {
                type: "string",
                id: 18
              },
              workflowExecutionExpirationTime: {
                type: "google.protobuf.Timestamp",
                id: 19
              },
              cronScheduleToScheduleInterval: {
                type: "google.protobuf.Duration",
                id: 20
              },
              memo: {
                type: "temporal.api.common.v1.Memo",
                id: 21
              },
              searchAttributes: {
                type: "temporal.api.common.v1.SearchAttributes",
                id: 22
              },
              startTime: {
                type: "google.protobuf.Timestamp",
                id: 23
              },
              rootWorkflow: {
                type: "temporal.api.common.v1.WorkflowExecution",
                id: 24
              },
              priority: {
                type: "temporal.api.common.v1.Priority",
                id: 25
              }
            }
          },
          FireTimer: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              }
            }
          },
          ResolveActivity: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              result: {
                type: "activity_result.ActivityResolution",
                id: 2
              },
              isLocal: {
                type: "bool",
                id: 3
              }
            }
          },
          ResolveChildWorkflowExecutionStart: {
            oneofs: {
              status: {
                oneof: [
                  "succeeded",
                  "failed",
                  "cancelled"
                ]
              }
            },
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              succeeded: {
                type: "ResolveChildWorkflowExecutionStartSuccess",
                id: 2
              },
              failed: {
                type: "ResolveChildWorkflowExecutionStartFailure",
                id: 3
              },
              cancelled: {
                type: "ResolveChildWorkflowExecutionStartCancelled",
                id: 4
              }
            }
          },
          ResolveChildWorkflowExecutionStartSuccess: {
            fields: {
              runId: {
                type: "string",
                id: 1
              }
            }
          },
          ResolveChildWorkflowExecutionStartFailure: {
            fields: {
              workflowId: {
                type: "string",
                id: 1
              },
              workflowType: {
                type: "string",
                id: 2
              },
              cause: {
                type: "child_workflow.StartChildWorkflowExecutionFailedCause",
                id: 3
              }
            }
          },
          ResolveChildWorkflowExecutionStartCancelled: {
            fields: {
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 1
              }
            }
          },
          ResolveChildWorkflowExecution: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              result: {
                type: "child_workflow.ChildWorkflowResult",
                id: 2
              }
            }
          },
          UpdateRandomSeed: {
            fields: {
              randomnessSeed: {
                type: "uint64",
                id: 1
              }
            }
          },
          QueryWorkflow: {
            fields: {
              queryId: {
                type: "string",
                id: 1
              },
              queryType: {
                type: "string",
                id: 2
              },
              "arguments": {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 3
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 5
              }
            }
          },
          CancelWorkflow: {
            fields: {
              reason: {
                type: "string",
                id: 1
              }
            }
          },
          SignalWorkflow: {
            fields: {
              signalName: {
                type: "string",
                id: 1
              },
              input: {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 2
              },
              identity: {
                type: "string",
                id: 3
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 5
              }
            }
          },
          NotifyHasPatch: {
            fields: {
              patchId: {
                type: "string",
                id: 1
              }
            }
          },
          ResolveSignalExternalWorkflow: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 2
              }
            }
          },
          ResolveRequestCancelExternalWorkflow: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 2
              }
            }
          },
          DoUpdate: {
            fields: {
              id: {
                type: "string",
                id: 1
              },
              protocolInstanceId: {
                type: "string",
                id: 2
              },
              name: {
                type: "string",
                id: 3
              },
              input: {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 4
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 5
              },
              meta: {
                type: "temporal.api.update.v1.Meta",
                id: 6
              },
              runValidator: {
                type: "bool",
                id: 7
              }
            }
          },
          ResolveNexusOperationStart: {
            oneofs: {
              status: {
                oneof: [
                  "operationToken",
                  "startedSync",
                  "failed"
                ]
              }
            },
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              operationToken: {
                type: "string",
                id: 2
              },
              startedSync: {
                type: "bool",
                id: 3
              },
              failed: {
                type: "temporal.api.failure.v1.Failure",
                id: 4
              }
            }
          },
          ResolveNexusOperation: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              result: {
                type: "nexus.NexusOperationResult",
                id: 2
              }
            }
          },
          RemoveFromCache: {
            fields: {
              message: {
                type: "string",
                id: 1
              },
              reason: {
                type: "EvictionReason",
                id: 2
              }
            },
            nested: {
              EvictionReason: {
                values: {
                  UNSPECIFIED: 0,
                  CACHE_FULL: 1,
                  CACHE_MISS: 2,
                  NONDETERMINISM: 3,
                  LANG_FAIL: 4,
                  LANG_REQUESTED: 5,
                  TASK_NOT_FOUND: 6,
                  UNHANDLED_COMMAND: 7,
                  FATAL: 8,
                  PAGINATION_OR_HISTORY_FETCH: 9,
                  WORKFLOW_EXECUTION_ENDING: 10
                }
              }
            }
          }
        }
      },
      child_workflow: {
        options: {
          ruby_package: "Temporalio::Internal::Bridge::Api::ChildWorkflow"
        },
        nested: {
          ChildWorkflowResult: {
            oneofs: {
              status: {
                oneof: [
                  "completed",
                  "failed",
                  "cancelled"
                ]
              }
            },
            fields: {
              completed: {
                type: "Success",
                id: 1
              },
              failed: {
                type: "Failure",
                id: 2
              },
              cancelled: {
                type: "Cancellation",
                id: 3
              }
            }
          },
          Success: {
            fields: {
              result: {
                type: "temporal.api.common.v1.Payload",
                id: 1
              }
            }
          },
          Failure: {
            fields: {
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 1
              }
            }
          },
          Cancellation: {
            fields: {
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 1
              }
            }
          },
          ParentClosePolicy: {
            values: {
              PARENT_CLOSE_POLICY_UNSPECIFIED: 0,
              PARENT_CLOSE_POLICY_TERMINATE: 1,
              PARENT_CLOSE_POLICY_ABANDON: 2,
              PARENT_CLOSE_POLICY_REQUEST_CANCEL: 3
            }
          },
          StartChildWorkflowExecutionFailedCause: {
            values: {
              START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED: 0,
              START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS: 1
            }
          },
          ChildWorkflowCancellationType: {
            values: {
              ABANDON: 0,
              TRY_CANCEL: 1,
              WAIT_CANCELLATION_COMPLETED: 2,
              WAIT_CANCELLATION_REQUESTED: 3
            }
          }
        }
      },
      nexus: {
        options: {
          ruby_package: "Temporalio::Internal::Bridge::Api::Nexus"
        },
        nested: {
          NexusOperationResult: {
            oneofs: {
              status: {
                oneof: [
                  "completed",
                  "failed",
                  "cancelled",
                  "timedOut"
                ]
              }
            },
            fields: {
              completed: {
                type: "temporal.api.common.v1.Payload",
                id: 1
              },
              failed: {
                type: "temporal.api.failure.v1.Failure",
                id: 2
              },
              cancelled: {
                type: "temporal.api.failure.v1.Failure",
                id: 3
              },
              timedOut: {
                type: "temporal.api.failure.v1.Failure",
                id: 4
              }
            }
          },
          NexusTaskCompletion: {
            oneofs: {
              status: {
                oneof: [
                  "completed",
                  "error",
                  "ackCancel"
                ]
              }
            },
            fields: {
              taskToken: {
                type: "bytes",
                id: 1
              },
              completed: {
                type: "temporal.api.nexus.v1.Response",
                id: 2
              },
              error: {
                type: "temporal.api.nexus.v1.HandlerError",
                id: 3
              },
              ackCancel: {
                type: "bool",
                id: 4
              }
            }
          },
          NexusTask: {
            oneofs: {
              variant: {
                oneof: [
                  "task",
                  "cancelTask"
                ]
              }
            },
            fields: {
              task: {
                type: "temporal.api.workflowservice.v1.PollNexusTaskQueueResponse",
                id: 1
              },
              cancelTask: {
                type: "CancelNexusTask",
                id: 2
              }
            }
          },
          CancelNexusTask: {
            fields: {
              taskToken: {
                type: "bytes",
                id: 1
              },
              reason: {
                type: "NexusTaskCancelReason",
                id: 2
              }
            }
          },
          NexusTaskCancelReason: {
            values: {
              TIMED_OUT: 0,
              WORKER_SHUTDOWN: 1
            }
          },
          NexusOperationCancellationType: {
            values: {
              WAIT_CANCELLATION_COMPLETED: 0,
              ABANDON: 1,
              TRY_CANCEL: 2,
              WAIT_CANCELLATION_REQUESTED: 3
            }
          }
        }
      },
      workflow_commands: {
        options: {
          ruby_package: "Temporalio::Internal::Bridge::Api::WorkflowCommands"
        },
        nested: {
          WorkflowCommand: {
            oneofs: {
              variant: {
                oneof: [
                  "startTimer",
                  "scheduleActivity",
                  "respondToQuery",
                  "requestCancelActivity",
                  "cancelTimer",
                  "completeWorkflowExecution",
                  "failWorkflowExecution",
                  "continueAsNewWorkflowExecution",
                  "cancelWorkflowExecution",
                  "setPatchMarker",
                  "startChildWorkflowExecution",
                  "cancelChildWorkflowExecution",
                  "requestCancelExternalWorkflowExecution",
                  "signalExternalWorkflowExecution",
                  "cancelSignalWorkflow",
                  "scheduleLocalActivity",
                  "requestCancelLocalActivity",
                  "upsertWorkflowSearchAttributes",
                  "modifyWorkflowProperties",
                  "updateResponse",
                  "scheduleNexusOperation",
                  "requestCancelNexusOperation"
                ]
              }
            },
            fields: {
              userMetadata: {
                type: "temporal.api.sdk.v1.UserMetadata",
                id: 100
              },
              startTimer: {
                type: "StartTimer",
                id: 1
              },
              scheduleActivity: {
                type: "ScheduleActivity",
                id: 2
              },
              respondToQuery: {
                type: "QueryResult",
                id: 3
              },
              requestCancelActivity: {
                type: "RequestCancelActivity",
                id: 4
              },
              cancelTimer: {
                type: "CancelTimer",
                id: 5
              },
              completeWorkflowExecution: {
                type: "CompleteWorkflowExecution",
                id: 6
              },
              failWorkflowExecution: {
                type: "FailWorkflowExecution",
                id: 7
              },
              continueAsNewWorkflowExecution: {
                type: "ContinueAsNewWorkflowExecution",
                id: 8
              },
              cancelWorkflowExecution: {
                type: "CancelWorkflowExecution",
                id: 9
              },
              setPatchMarker: {
                type: "SetPatchMarker",
                id: 10
              },
              startChildWorkflowExecution: {
                type: "StartChildWorkflowExecution",
                id: 11
              },
              cancelChildWorkflowExecution: {
                type: "CancelChildWorkflowExecution",
                id: 12
              },
              requestCancelExternalWorkflowExecution: {
                type: "RequestCancelExternalWorkflowExecution",
                id: 13
              },
              signalExternalWorkflowExecution: {
                type: "SignalExternalWorkflowExecution",
                id: 14
              },
              cancelSignalWorkflow: {
                type: "CancelSignalWorkflow",
                id: 15
              },
              scheduleLocalActivity: {
                type: "ScheduleLocalActivity",
                id: 16
              },
              requestCancelLocalActivity: {
                type: "RequestCancelLocalActivity",
                id: 17
              },
              upsertWorkflowSearchAttributes: {
                type: "UpsertWorkflowSearchAttributes",
                id: 18
              },
              modifyWorkflowProperties: {
                type: "ModifyWorkflowProperties",
                id: 19
              },
              updateResponse: {
                type: "UpdateResponse",
                id: 20
              },
              scheduleNexusOperation: {
                type: "ScheduleNexusOperation",
                id: 21
              },
              requestCancelNexusOperation: {
                type: "RequestCancelNexusOperation",
                id: 22
              }
            }
          },
          StartTimer: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              startToFireTimeout: {
                type: "google.protobuf.Duration",
                id: 2
              }
            }
          },
          CancelTimer: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              }
            }
          },
          ScheduleActivity: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              activityId: {
                type: "string",
                id: 2
              },
              activityType: {
                type: "string",
                id: 3
              },
              taskQueue: {
                type: "string",
                id: 5
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 6
              },
              "arguments": {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 7
              },
              scheduleToCloseTimeout: {
                type: "google.protobuf.Duration",
                id: 8
              },
              scheduleToStartTimeout: {
                type: "google.protobuf.Duration",
                id: 9
              },
              startToCloseTimeout: {
                type: "google.protobuf.Duration",
                id: 10
              },
              heartbeatTimeout: {
                type: "google.protobuf.Duration",
                id: 11
              },
              retryPolicy: {
                type: "temporal.api.common.v1.RetryPolicy",
                id: 12
              },
              cancellationType: {
                type: "ActivityCancellationType",
                id: 13
              },
              doNotEagerlyExecute: {
                type: "bool",
                id: 14
              },
              versioningIntent: {
                type: "coresdk.common.VersioningIntent",
                id: 15
              },
              priority: {
                type: "temporal.api.common.v1.Priority",
                id: 16
              }
            }
          },
          ScheduleLocalActivity: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              activityId: {
                type: "string",
                id: 2
              },
              activityType: {
                type: "string",
                id: 3
              },
              attempt: {
                type: "uint32",
                id: 4
              },
              originalScheduleTime: {
                type: "google.protobuf.Timestamp",
                id: 5
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 6
              },
              "arguments": {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 7
              },
              scheduleToCloseTimeout: {
                type: "google.protobuf.Duration",
                id: 8
              },
              scheduleToStartTimeout: {
                type: "google.protobuf.Duration",
                id: 9
              },
              startToCloseTimeout: {
                type: "google.protobuf.Duration",
                id: 10
              },
              retryPolicy: {
                type: "temporal.api.common.v1.RetryPolicy",
                id: 11
              },
              localRetryThreshold: {
                type: "google.protobuf.Duration",
                id: 12
              },
              cancellationType: {
                type: "ActivityCancellationType",
                id: 13
              }
            }
          },
          ActivityCancellationType: {
            values: {
              TRY_CANCEL: 0,
              WAIT_CANCELLATION_COMPLETED: 1,
              ABANDON: 2
            }
          },
          RequestCancelActivity: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              }
            }
          },
          RequestCancelLocalActivity: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              }
            }
          },
          QueryResult: {
            oneofs: {
              variant: {
                oneof: [
                  "succeeded",
                  "failed"
                ]
              }
            },
            fields: {
              queryId: {
                type: "string",
                id: 1
              },
              succeeded: {
                type: "QuerySuccess",
                id: 2
              },
              failed: {
                type: "temporal.api.failure.v1.Failure",
                id: 3
              }
            }
          },
          QuerySuccess: {
            fields: {
              response: {
                type: "temporal.api.common.v1.Payload",
                id: 1
              }
            }
          },
          CompleteWorkflowExecution: {
            fields: {
              result: {
                type: "temporal.api.common.v1.Payload",
                id: 1
              }
            }
          },
          FailWorkflowExecution: {
            fields: {
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 1
              }
            }
          },
          ContinueAsNewWorkflowExecution: {
            fields: {
              workflowType: {
                type: "string",
                id: 1
              },
              taskQueue: {
                type: "string",
                id: 2
              },
              "arguments": {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 3
              },
              workflowRunTimeout: {
                type: "google.protobuf.Duration",
                id: 4
              },
              workflowTaskTimeout: {
                type: "google.protobuf.Duration",
                id: 5
              },
              memo: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 6
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 7
              },
              searchAttributes: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 8
              },
              retryPolicy: {
                type: "temporal.api.common.v1.RetryPolicy",
                id: 9
              },
              versioningIntent: {
                type: "coresdk.common.VersioningIntent",
                id: 10
              }
            }
          },
          CancelWorkflowExecution: {
            fields: {}
          },
          SetPatchMarker: {
            fields: {
              patchId: {
                type: "string",
                id: 1
              },
              deprecated: {
                type: "bool",
                id: 2
              }
            }
          },
          StartChildWorkflowExecution: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              namespace: {
                type: "string",
                id: 2
              },
              workflowId: {
                type: "string",
                id: 3
              },
              workflowType: {
                type: "string",
                id: 4
              },
              taskQueue: {
                type: "string",
                id: 5
              },
              input: {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 6
              },
              workflowExecutionTimeout: {
                type: "google.protobuf.Duration",
                id: 7
              },
              workflowRunTimeout: {
                type: "google.protobuf.Duration",
                id: 8
              },
              workflowTaskTimeout: {
                type: "google.protobuf.Duration",
                id: 9
              },
              parentClosePolicy: {
                type: "child_workflow.ParentClosePolicy",
                id: 10
              },
              workflowIdReusePolicy: {
                type: "temporal.api.enums.v1.WorkflowIdReusePolicy",
                id: 12
              },
              retryPolicy: {
                type: "temporal.api.common.v1.RetryPolicy",
                id: 13
              },
              cronSchedule: {
                type: "string",
                id: 14
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 15
              },
              memo: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 16
              },
              searchAttributes: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 17
              },
              cancellationType: {
                type: "child_workflow.ChildWorkflowCancellationType",
                id: 18
              },
              versioningIntent: {
                type: "coresdk.common.VersioningIntent",
                id: 19
              },
              priority: {
                type: "temporal.api.common.v1.Priority",
                id: 20
              }
            }
          },
          CancelChildWorkflowExecution: {
            fields: {
              childWorkflowSeq: {
                type: "uint32",
                id: 1
              },
              reason: {
                type: "string",
                id: 2
              }
            }
          },
          RequestCancelExternalWorkflowExecution: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              workflowExecution: {
                type: "common.NamespacedWorkflowExecution",
                id: 2
              },
              reason: {
                type: "string",
                id: 3
              }
            }
          },
          SignalExternalWorkflowExecution: {
            oneofs: {
              target: {
                oneof: [
                  "workflowExecution",
                  "childWorkflowId"
                ]
              }
            },
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              workflowExecution: {
                type: "common.NamespacedWorkflowExecution",
                id: 2
              },
              childWorkflowId: {
                type: "string",
                id: 3
              },
              signalName: {
                type: "string",
                id: 4
              },
              args: {
                rule: "repeated",
                type: "temporal.api.common.v1.Payload",
                id: 5
              },
              headers: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 6
              }
            }
          },
          CancelSignalWorkflow: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              }
            }
          },
          UpsertWorkflowSearchAttributes: {
            fields: {
              searchAttributes: {
                keyType: "string",
                type: "temporal.api.common.v1.Payload",
                id: 1
              }
            }
          },
          ModifyWorkflowProperties: {
            fields: {
              upsertedMemo: {
                type: "temporal.api.common.v1.Memo",
                id: 1
              }
            }
          },
          UpdateResponse: {
            oneofs: {
              response: {
                oneof: [
                  "accepted",
                  "rejected",
                  "completed"
                ]
              }
            },
            fields: {
              protocolInstanceId: {
                type: "string",
                id: 1
              },
              accepted: {
                type: "google.protobuf.Empty",
                id: 2
              },
              rejected: {
                type: "temporal.api.failure.v1.Failure",
                id: 3
              },
              completed: {
                type: "temporal.api.common.v1.Payload",
                id: 4
              }
            }
          },
          ScheduleNexusOperation: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              },
              endpoint: {
                type: "string",
                id: 2
              },
              service: {
                type: "string",
                id: 3
              },
              operation: {
                type: "string",
                id: 4
              },
              input: {
                type: "temporal.api.common.v1.Payload",
                id: 5
              },
              scheduleToCloseTimeout: {
                type: "google.protobuf.Duration",
                id: 6
              },
              nexusHeader: {
                keyType: "string",
                type: "string",
                id: 7
              },
              cancellationType: {
                type: "nexus.NexusOperationCancellationType",
                id: 8
              }
            }
          },
          RequestCancelNexusOperation: {
            fields: {
              seq: {
                type: "uint32",
                id: 1
              }
            }
          }
        }
      },
      workflow_completion: {
        options: {
          ruby_package: "Temporalio::Internal::Bridge::Api::WorkflowCompletion"
        },
        nested: {
          WorkflowActivationCompletion: {
            oneofs: {
              status: {
                oneof: [
                  "successful",
                  "failed"
                ]
              }
            },
            fields: {
              runId: {
                type: "string",
                id: 1
              },
              successful: {
                type: "Success",
                id: 2
              },
              failed: {
                type: "Failure",
                id: 3
              }
            }
          },
          Success: {
            fields: {
              commands: {
                rule: "repeated",
                type: "workflow_commands.WorkflowCommand",
                id: 1
              },
              usedInternalFlags: {
                rule: "repeated",
                type: "uint32",
                id: 6
              },
              versioningBehavior: {
                type: "temporal.api.enums.v1.VersioningBehavior",
                id: 7
              }
            }
          },
          Failure: {
            fields: {
              failure: {
                type: "temporal.api.failure.v1.Failure",
                id: 1
              },
              forceCause: {
                type: "temporal.api.enums.v1.WorkflowTaskFailedCause",
                id: 2
              }
            }
          }
        }
      }
    }
  },
  temporal: {
    nested: {
      api: {
        nested: {
          common: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/common/v1;common",
                  java_package: "io.temporal.api.common.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Common::V1",
                  csharp_namespace: "Temporalio.Api.Common.V1"
                },
                nested: {
                  DataBlob: {
                    fields: {
                      encodingType: {
                        type: "temporal.api.enums.v1.EncodingType",
                        id: 1
                      },
                      data: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  Payloads: {
                    fields: {
                      payloads: {
                        rule: "repeated",
                        type: "Payload",
                        id: 1
                      }
                    }
                  },
                  Payload: {
                    fields: {
                      metadata: {
                        keyType: "string",
                        type: "bytes",
                        id: 1
                      },
                      data: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  SearchAttributes: {
                    fields: {
                      indexedFields: {
                        keyType: "string",
                        type: "Payload",
                        id: 1
                      }
                    }
                  },
                  Memo: {
                    fields: {
                      fields: {
                        keyType: "string",
                        type: "Payload",
                        id: 1
                      }
                    }
                  },
                  Header: {
                    fields: {
                      fields: {
                        keyType: "string",
                        type: "Payload",
                        id: 1
                      }
                    }
                  },
                  WorkflowExecution: {
                    fields: {
                      workflowId: {
                        type: "string",
                        id: 1
                      },
                      runId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  WorkflowType: {
                    fields: {
                      name: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  ActivityType: {
                    fields: {
                      name: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  RetryPolicy: {
                    fields: {
                      initialInterval: {
                        type: "google.protobuf.Duration",
                        id: 1
                      },
                      backoffCoefficient: {
                        type: "double",
                        id: 2
                      },
                      maximumInterval: {
                        type: "google.protobuf.Duration",
                        id: 3
                      },
                      maximumAttempts: {
                        type: "int32",
                        id: 4
                      },
                      nonRetryableErrorTypes: {
                        rule: "repeated",
                        type: "string",
                        id: 5
                      }
                    }
                  },
                  MeteringMetadata: {
                    fields: {
                      nonfirstLocalActivityExecutionAttempts: {
                        type: "uint32",
                        id: 13
                      }
                    }
                  },
                  WorkerVersionStamp: {
                    fields: {
                      buildId: {
                        type: "string",
                        id: 1
                      },
                      useVersioning: {
                        type: "bool",
                        id: 3
                      }
                    }
                  },
                  WorkerVersionCapabilities: {
                    fields: {
                      buildId: {
                        type: "string",
                        id: 1
                      },
                      useVersioning: {
                        type: "bool",
                        id: 2
                      },
                      deploymentSeriesName: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  ResetOptions: {
                    oneofs: {
                      target: {
                        oneof: [
                          "firstWorkflowTask",
                          "lastWorkflowTask",
                          "workflowTaskId",
                          "buildId"
                        ]
                      }
                    },
                    fields: {
                      firstWorkflowTask: {
                        type: "google.protobuf.Empty",
                        id: 1
                      },
                      lastWorkflowTask: {
                        type: "google.protobuf.Empty",
                        id: 2
                      },
                      workflowTaskId: {
                        type: "int64",
                        id: 3
                      },
                      buildId: {
                        type: "string",
                        id: 4
                      },
                      resetReapplyType: {
                        type: "temporal.api.enums.v1.ResetReapplyType",
                        id: 10,
                        options: {
                          deprecated: true
                        }
                      },
                      currentRunOnly: {
                        type: "bool",
                        id: 11
                      },
                      resetReapplyExcludeTypes: {
                        rule: "repeated",
                        type: "temporal.api.enums.v1.ResetReapplyExcludeType",
                        id: 12
                      }
                    }
                  },
                  Callback: {
                    oneofs: {
                      variant: {
                        oneof: [
                          "nexus",
                          "internal"
                        ]
                      }
                    },
                    fields: {
                      nexus: {
                        type: "Nexus",
                        id: 2
                      },
                      internal: {
                        type: "Internal",
                        id: 3
                      },
                      links: {
                        rule: "repeated",
                        type: "Link",
                        id: 100
                      }
                    },
                    reserved: [
                      [
                        1,
                        1
                      ]
                    ],
                    nested: {
                      Nexus: {
                        fields: {
                          url: {
                            type: "string",
                            id: 1
                          },
                          header: {
                            keyType: "string",
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      Internal: {
                        fields: {
                          data: {
                            type: "bytes",
                            id: 1
                          }
                        }
                      }
                    }
                  },
                  Link: {
                    oneofs: {
                      variant: {
                        oneof: [
                          "workflowEvent",
                          "batchJob"
                        ]
                      }
                    },
                    fields: {
                      workflowEvent: {
                        type: "WorkflowEvent",
                        id: 1
                      },
                      batchJob: {
                        type: "BatchJob",
                        id: 2
                      }
                    },
                    nested: {
                      WorkflowEvent: {
                        oneofs: {
                          reference: {
                            oneof: [
                              "eventRef",
                              "requestIdRef"
                            ]
                          }
                        },
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          workflowId: {
                            type: "string",
                            id: 2
                          },
                          runId: {
                            type: "string",
                            id: 3
                          },
                          eventRef: {
                            type: "EventReference",
                            id: 100
                          },
                          requestIdRef: {
                            type: "RequestIdReference",
                            id: 101
                          }
                        },
                        nested: {
                          EventReference: {
                            fields: {
                              eventId: {
                                type: "int64",
                                id: 1
                              },
                              eventType: {
                                type: "temporal.api.enums.v1.EventType",
                                id: 2
                              }
                            }
                          },
                          RequestIdReference: {
                            fields: {
                              requestId: {
                                type: "string",
                                id: 1
                              },
                              eventType: {
                                type: "temporal.api.enums.v1.EventType",
                                id: 2
                              }
                            }
                          }
                        }
                      },
                      BatchJob: {
                        fields: {
                          jobId: {
                            type: "string",
                            id: 1
                          }
                        }
                      }
                    }
                  },
                  Priority: {
                    fields: {
                      priorityKey: {
                        type: "int32",
                        id: 1
                      },
                      fairnessKey: {
                        type: "string",
                        id: 2
                      },
                      fairnessWeight: {
                        type: "float",
                        id: 3
                      }
                    }
                  },
                  WorkerSelector: {
                    oneofs: {
                      selector: {
                        oneof: [
                          "workerInstanceKey"
                        ]
                      }
                    },
                    fields: {
                      workerInstanceKey: {
                        type: "string",
                        id: 1
                      }
                    }
                  }
                }
              }
            }
          },
          enums: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/enums/v1;enums",
                  java_package: "io.temporal.api.enums.v1",
                  java_multiple_files: true,
                  java_outer_classname: "ScheduleProto",
                  ruby_package: "Temporalio::Api::Enums::V1",
                  csharp_namespace: "Temporalio.Api.Enums.V1"
                },
                nested: {
                  EncodingType: {
                    values: {
                      ENCODING_TYPE_UNSPECIFIED: 0,
                      ENCODING_TYPE_PROTO3: 1,
                      ENCODING_TYPE_JSON: 2
                    }
                  },
                  IndexedValueType: {
                    values: {
                      INDEXED_VALUE_TYPE_UNSPECIFIED: 0,
                      INDEXED_VALUE_TYPE_TEXT: 1,
                      INDEXED_VALUE_TYPE_KEYWORD: 2,
                      INDEXED_VALUE_TYPE_INT: 3,
                      INDEXED_VALUE_TYPE_DOUBLE: 4,
                      INDEXED_VALUE_TYPE_BOOL: 5,
                      INDEXED_VALUE_TYPE_DATETIME: 6,
                      INDEXED_VALUE_TYPE_KEYWORD_LIST: 7
                    }
                  },
                  Severity: {
                    values: {
                      SEVERITY_UNSPECIFIED: 0,
                      SEVERITY_HIGH: 1,
                      SEVERITY_MEDIUM: 2,
                      SEVERITY_LOW: 3
                    }
                  },
                  CallbackState: {
                    values: {
                      CALLBACK_STATE_UNSPECIFIED: 0,
                      CALLBACK_STATE_STANDBY: 1,
                      CALLBACK_STATE_SCHEDULED: 2,
                      CALLBACK_STATE_BACKING_OFF: 3,
                      CALLBACK_STATE_FAILED: 4,
                      CALLBACK_STATE_SUCCEEDED: 5,
                      CALLBACK_STATE_BLOCKED: 6
                    }
                  },
                  PendingNexusOperationState: {
                    values: {
                      PENDING_NEXUS_OPERATION_STATE_UNSPECIFIED: 0,
                      PENDING_NEXUS_OPERATION_STATE_SCHEDULED: 1,
                      PENDING_NEXUS_OPERATION_STATE_BACKING_OFF: 2,
                      PENDING_NEXUS_OPERATION_STATE_STARTED: 3,
                      PENDING_NEXUS_OPERATION_STATE_BLOCKED: 4
                    }
                  },
                  NexusOperationCancellationState: {
                    values: {
                      NEXUS_OPERATION_CANCELLATION_STATE_UNSPECIFIED: 0,
                      NEXUS_OPERATION_CANCELLATION_STATE_SCHEDULED: 1,
                      NEXUS_OPERATION_CANCELLATION_STATE_BACKING_OFF: 2,
                      NEXUS_OPERATION_CANCELLATION_STATE_SUCCEEDED: 3,
                      NEXUS_OPERATION_CANCELLATION_STATE_FAILED: 4,
                      NEXUS_OPERATION_CANCELLATION_STATE_TIMED_OUT: 5,
                      NEXUS_OPERATION_CANCELLATION_STATE_BLOCKED: 6
                    }
                  },
                  WorkflowRuleActionScope: {
                    values: {
                      WORKFLOW_RULE_ACTION_SCOPE_UNSPECIFIED: 0,
                      WORKFLOW_RULE_ACTION_SCOPE_WORKFLOW: 1,
                      WORKFLOW_RULE_ACTION_SCOPE_ACTIVITY: 2
                    }
                  },
                  ApplicationErrorCategory: {
                    values: {
                      APPLICATION_ERROR_CATEGORY_UNSPECIFIED: 0,
                      APPLICATION_ERROR_CATEGORY_BENIGN: 1
                    }
                  },
                  WorkerStatus: {
                    values: {
                      WORKER_STATUS_UNSPECIFIED: 0,
                      WORKER_STATUS_RUNNING: 1,
                      WORKER_STATUS_SHUTTING_DOWN: 2,
                      WORKER_STATUS_SHUTDOWN: 3
                    }
                  },
                  EventType: {
                    values: {
                      EVENT_TYPE_UNSPECIFIED: 0,
                      EVENT_TYPE_WORKFLOW_EXECUTION_STARTED: 1,
                      EVENT_TYPE_WORKFLOW_EXECUTION_COMPLETED: 2,
                      EVENT_TYPE_WORKFLOW_EXECUTION_FAILED: 3,
                      EVENT_TYPE_WORKFLOW_EXECUTION_TIMED_OUT: 4,
                      EVENT_TYPE_WORKFLOW_TASK_SCHEDULED: 5,
                      EVENT_TYPE_WORKFLOW_TASK_STARTED: 6,
                      EVENT_TYPE_WORKFLOW_TASK_COMPLETED: 7,
                      EVENT_TYPE_WORKFLOW_TASK_TIMED_OUT: 8,
                      EVENT_TYPE_WORKFLOW_TASK_FAILED: 9,
                      EVENT_TYPE_ACTIVITY_TASK_SCHEDULED: 10,
                      EVENT_TYPE_ACTIVITY_TASK_STARTED: 11,
                      EVENT_TYPE_ACTIVITY_TASK_COMPLETED: 12,
                      EVENT_TYPE_ACTIVITY_TASK_FAILED: 13,
                      EVENT_TYPE_ACTIVITY_TASK_TIMED_OUT: 14,
                      EVENT_TYPE_ACTIVITY_TASK_CANCEL_REQUESTED: 15,
                      EVENT_TYPE_ACTIVITY_TASK_CANCELED: 16,
                      EVENT_TYPE_TIMER_STARTED: 17,
                      EVENT_TYPE_TIMER_FIRED: 18,
                      EVENT_TYPE_TIMER_CANCELED: 19,
                      EVENT_TYPE_WORKFLOW_EXECUTION_CANCEL_REQUESTED: 20,
                      EVENT_TYPE_WORKFLOW_EXECUTION_CANCELED: 21,
                      EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED: 22,
                      EVENT_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED: 23,
                      EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_CANCEL_REQUESTED: 24,
                      EVENT_TYPE_MARKER_RECORDED: 25,
                      EVENT_TYPE_WORKFLOW_EXECUTION_SIGNALED: 26,
                      EVENT_TYPE_WORKFLOW_EXECUTION_TERMINATED: 27,
                      EVENT_TYPE_WORKFLOW_EXECUTION_CONTINUED_AS_NEW: 28,
                      EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_INITIATED: 29,
                      EVENT_TYPE_START_CHILD_WORKFLOW_EXECUTION_FAILED: 30,
                      EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_STARTED: 31,
                      EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_COMPLETED: 32,
                      EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_FAILED: 33,
                      EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_CANCELED: 34,
                      EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TIMED_OUT: 35,
                      EVENT_TYPE_CHILD_WORKFLOW_EXECUTION_TERMINATED: 36,
                      EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_INITIATED: 37,
                      EVENT_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED: 38,
                      EVENT_TYPE_EXTERNAL_WORKFLOW_EXECUTION_SIGNALED: 39,
                      EVENT_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES: 40,
                      EVENT_TYPE_WORKFLOW_EXECUTION_UPDATE_ADMITTED: 47,
                      EVENT_TYPE_WORKFLOW_EXECUTION_UPDATE_ACCEPTED: 41,
                      EVENT_TYPE_WORKFLOW_EXECUTION_UPDATE_REJECTED: 42,
                      EVENT_TYPE_WORKFLOW_EXECUTION_UPDATE_COMPLETED: 43,
                      EVENT_TYPE_WORKFLOW_PROPERTIES_MODIFIED_EXTERNALLY: 44,
                      EVENT_TYPE_ACTIVITY_PROPERTIES_MODIFIED_EXTERNALLY: 45,
                      EVENT_TYPE_WORKFLOW_PROPERTIES_MODIFIED: 46,
                      EVENT_TYPE_NEXUS_OPERATION_SCHEDULED: 48,
                      EVENT_TYPE_NEXUS_OPERATION_STARTED: 49,
                      EVENT_TYPE_NEXUS_OPERATION_COMPLETED: 50,
                      EVENT_TYPE_NEXUS_OPERATION_FAILED: 51,
                      EVENT_TYPE_NEXUS_OPERATION_CANCELED: 52,
                      EVENT_TYPE_NEXUS_OPERATION_TIMED_OUT: 53,
                      EVENT_TYPE_NEXUS_OPERATION_CANCEL_REQUESTED: 54,
                      EVENT_TYPE_WORKFLOW_EXECUTION_OPTIONS_UPDATED: 55,
                      EVENT_TYPE_NEXUS_OPERATION_CANCEL_REQUEST_COMPLETED: 56,
                      EVENT_TYPE_NEXUS_OPERATION_CANCEL_REQUEST_FAILED: 57
                    }
                  },
                  ResetReapplyExcludeType: {
                    valuesOptions: {
                      RESET_REAPPLY_EXCLUDE_TYPE_CANCEL_REQUEST: {
                        deprecated: true
                      }
                    },
                    values: {
                      RESET_REAPPLY_EXCLUDE_TYPE_UNSPECIFIED: 0,
                      RESET_REAPPLY_EXCLUDE_TYPE_SIGNAL: 1,
                      RESET_REAPPLY_EXCLUDE_TYPE_UPDATE: 2,
                      RESET_REAPPLY_EXCLUDE_TYPE_NEXUS: 3,
                      RESET_REAPPLY_EXCLUDE_TYPE_CANCEL_REQUEST: 4
                    }
                  },
                  ResetReapplyType: {
                    values: {
                      RESET_REAPPLY_TYPE_UNSPECIFIED: 0,
                      RESET_REAPPLY_TYPE_SIGNAL: 1,
                      RESET_REAPPLY_TYPE_NONE: 2,
                      RESET_REAPPLY_TYPE_ALL_ELIGIBLE: 3
                    }
                  },
                  ResetType: {
                    values: {
                      RESET_TYPE_UNSPECIFIED: 0,
                      RESET_TYPE_FIRST_WORKFLOW_TASK: 1,
                      RESET_TYPE_LAST_WORKFLOW_TASK: 2
                    }
                  },
                  WorkflowIdReusePolicy: {
                    values: {
                      WORKFLOW_ID_REUSE_POLICY_UNSPECIFIED: 0,
                      WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE: 1,
                      WORKFLOW_ID_REUSE_POLICY_ALLOW_DUPLICATE_FAILED_ONLY: 2,
                      WORKFLOW_ID_REUSE_POLICY_REJECT_DUPLICATE: 3,
                      WORKFLOW_ID_REUSE_POLICY_TERMINATE_IF_RUNNING: 4
                    }
                  },
                  WorkflowIdConflictPolicy: {
                    values: {
                      WORKFLOW_ID_CONFLICT_POLICY_UNSPECIFIED: 0,
                      WORKFLOW_ID_CONFLICT_POLICY_FAIL: 1,
                      WORKFLOW_ID_CONFLICT_POLICY_USE_EXISTING: 2,
                      WORKFLOW_ID_CONFLICT_POLICY_TERMINATE_EXISTING: 3
                    }
                  },
                  ParentClosePolicy: {
                    values: {
                      PARENT_CLOSE_POLICY_UNSPECIFIED: 0,
                      PARENT_CLOSE_POLICY_TERMINATE: 1,
                      PARENT_CLOSE_POLICY_ABANDON: 2,
                      PARENT_CLOSE_POLICY_REQUEST_CANCEL: 3
                    }
                  },
                  ContinueAsNewInitiator: {
                    values: {
                      CONTINUE_AS_NEW_INITIATOR_UNSPECIFIED: 0,
                      CONTINUE_AS_NEW_INITIATOR_WORKFLOW: 1,
                      CONTINUE_AS_NEW_INITIATOR_RETRY: 2,
                      CONTINUE_AS_NEW_INITIATOR_CRON_SCHEDULE: 3
                    }
                  },
                  WorkflowExecutionStatus: {
                    values: {
                      WORKFLOW_EXECUTION_STATUS_UNSPECIFIED: 0,
                      WORKFLOW_EXECUTION_STATUS_RUNNING: 1,
                      WORKFLOW_EXECUTION_STATUS_COMPLETED: 2,
                      WORKFLOW_EXECUTION_STATUS_FAILED: 3,
                      WORKFLOW_EXECUTION_STATUS_CANCELED: 4,
                      WORKFLOW_EXECUTION_STATUS_TERMINATED: 5,
                      WORKFLOW_EXECUTION_STATUS_CONTINUED_AS_NEW: 6,
                      WORKFLOW_EXECUTION_STATUS_TIMED_OUT: 7
                    }
                  },
                  PendingActivityState: {
                    values: {
                      PENDING_ACTIVITY_STATE_UNSPECIFIED: 0,
                      PENDING_ACTIVITY_STATE_SCHEDULED: 1,
                      PENDING_ACTIVITY_STATE_STARTED: 2,
                      PENDING_ACTIVITY_STATE_CANCEL_REQUESTED: 3,
                      PENDING_ACTIVITY_STATE_PAUSED: 4,
                      PENDING_ACTIVITY_STATE_PAUSE_REQUESTED: 5
                    }
                  },
                  PendingWorkflowTaskState: {
                    values: {
                      PENDING_WORKFLOW_TASK_STATE_UNSPECIFIED: 0,
                      PENDING_WORKFLOW_TASK_STATE_SCHEDULED: 1,
                      PENDING_WORKFLOW_TASK_STATE_STARTED: 2
                    }
                  },
                  HistoryEventFilterType: {
                    values: {
                      HISTORY_EVENT_FILTER_TYPE_UNSPECIFIED: 0,
                      HISTORY_EVENT_FILTER_TYPE_ALL_EVENT: 1,
                      HISTORY_EVENT_FILTER_TYPE_CLOSE_EVENT: 2
                    }
                  },
                  RetryState: {
                    values: {
                      RETRY_STATE_UNSPECIFIED: 0,
                      RETRY_STATE_IN_PROGRESS: 1,
                      RETRY_STATE_NON_RETRYABLE_FAILURE: 2,
                      RETRY_STATE_TIMEOUT: 3,
                      RETRY_STATE_MAXIMUM_ATTEMPTS_REACHED: 4,
                      RETRY_STATE_RETRY_POLICY_NOT_SET: 5,
                      RETRY_STATE_INTERNAL_SERVER_ERROR: 6,
                      RETRY_STATE_CANCEL_REQUESTED: 7
                    }
                  },
                  TimeoutType: {
                    values: {
                      TIMEOUT_TYPE_UNSPECIFIED: 0,
                      TIMEOUT_TYPE_START_TO_CLOSE: 1,
                      TIMEOUT_TYPE_SCHEDULE_TO_START: 2,
                      TIMEOUT_TYPE_SCHEDULE_TO_CLOSE: 3,
                      TIMEOUT_TYPE_HEARTBEAT: 4
                    }
                  },
                  VersioningBehavior: {
                    values: {
                      VERSIONING_BEHAVIOR_UNSPECIFIED: 0,
                      VERSIONING_BEHAVIOR_PINNED: 1,
                      VERSIONING_BEHAVIOR_AUTO_UPGRADE: 2
                    }
                  },
                  NexusHandlerErrorRetryBehavior: {
                    values: {
                      NEXUS_HANDLER_ERROR_RETRY_BEHAVIOR_UNSPECIFIED: 0,
                      NEXUS_HANDLER_ERROR_RETRY_BEHAVIOR_RETRYABLE: 1,
                      NEXUS_HANDLER_ERROR_RETRY_BEHAVIOR_NON_RETRYABLE: 2
                    }
                  },
                  UpdateWorkflowExecutionLifecycleStage: {
                    values: {
                      UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_UNSPECIFIED: 0,
                      UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ADMITTED: 1,
                      UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_ACCEPTED: 2,
                      UPDATE_WORKFLOW_EXECUTION_LIFECYCLE_STAGE_COMPLETED: 3
                    }
                  },
                  UpdateAdmittedEventOrigin: {
                    values: {
                      UPDATE_ADMITTED_EVENT_ORIGIN_UNSPECIFIED: 0,
                      UPDATE_ADMITTED_EVENT_ORIGIN_REAPPLY: 1
                    }
                  },
                  BatchOperationType: {
                    values: {
                      BATCH_OPERATION_TYPE_UNSPECIFIED: 0,
                      BATCH_OPERATION_TYPE_TERMINATE: 1,
                      BATCH_OPERATION_TYPE_CANCEL: 2,
                      BATCH_OPERATION_TYPE_SIGNAL: 3,
                      BATCH_OPERATION_TYPE_DELETE: 4,
                      BATCH_OPERATION_TYPE_RESET: 5,
                      BATCH_OPERATION_TYPE_UPDATE_EXECUTION_OPTIONS: 6,
                      BATCH_OPERATION_TYPE_UNPAUSE_ACTIVITY: 7,
                      BATCH_OPERATION_TYPE_UPDATE_ACTIVITY_OPTIONS: 8,
                      BATCH_OPERATION_TYPE_RESET_ACTIVITY: 9
                    }
                  },
                  BatchOperationState: {
                    values: {
                      BATCH_OPERATION_STATE_UNSPECIFIED: 0,
                      BATCH_OPERATION_STATE_RUNNING: 1,
                      BATCH_OPERATION_STATE_COMPLETED: 2,
                      BATCH_OPERATION_STATE_FAILED: 3
                    }
                  },
                  NamespaceState: {
                    values: {
                      NAMESPACE_STATE_UNSPECIFIED: 0,
                      NAMESPACE_STATE_REGISTERED: 1,
                      NAMESPACE_STATE_DEPRECATED: 2,
                      NAMESPACE_STATE_DELETED: 3
                    }
                  },
                  ArchivalState: {
                    values: {
                      ARCHIVAL_STATE_UNSPECIFIED: 0,
                      ARCHIVAL_STATE_DISABLED: 1,
                      ARCHIVAL_STATE_ENABLED: 2
                    }
                  },
                  ReplicationState: {
                    values: {
                      REPLICATION_STATE_UNSPECIFIED: 0,
                      REPLICATION_STATE_NORMAL: 1,
                      REPLICATION_STATE_HANDOVER: 2
                    }
                  },
                  WorkflowTaskFailedCause: {
                    values: {
                      WORKFLOW_TASK_FAILED_CAUSE_UNSPECIFIED: 0,
                      WORKFLOW_TASK_FAILED_CAUSE_UNHANDLED_COMMAND: 1,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_SCHEDULE_ACTIVITY_ATTRIBUTES: 2,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_ACTIVITY_ATTRIBUTES: 3,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_START_TIMER_ATTRIBUTES: 4,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_CANCEL_TIMER_ATTRIBUTES: 5,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_RECORD_MARKER_ATTRIBUTES: 6,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_COMPLETE_WORKFLOW_EXECUTION_ATTRIBUTES: 7,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_FAIL_WORKFLOW_EXECUTION_ATTRIBUTES: 8,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_CANCEL_WORKFLOW_EXECUTION_ATTRIBUTES: 9,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_ATTRIBUTES: 10,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_CONTINUE_AS_NEW_ATTRIBUTES: 11,
                      WORKFLOW_TASK_FAILED_CAUSE_START_TIMER_DUPLICATE_ID: 12,
                      WORKFLOW_TASK_FAILED_CAUSE_RESET_STICKY_TASK_QUEUE: 13,
                      WORKFLOW_TASK_FAILED_CAUSE_WORKFLOW_WORKER_UNHANDLED_FAILURE: 14,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_SIGNAL_WORKFLOW_EXECUTION_ATTRIBUTES: 15,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_START_CHILD_EXECUTION_ATTRIBUTES: 16,
                      WORKFLOW_TASK_FAILED_CAUSE_FORCE_CLOSE_COMMAND: 17,
                      WORKFLOW_TASK_FAILED_CAUSE_FAILOVER_CLOSE_COMMAND: 18,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_SIGNAL_INPUT_SIZE: 19,
                      WORKFLOW_TASK_FAILED_CAUSE_RESET_WORKFLOW: 20,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_BINARY: 21,
                      WORKFLOW_TASK_FAILED_CAUSE_SCHEDULE_ACTIVITY_DUPLICATE_ID: 22,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_SEARCH_ATTRIBUTES: 23,
                      WORKFLOW_TASK_FAILED_CAUSE_NON_DETERMINISTIC_ERROR: 24,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_MODIFY_WORKFLOW_PROPERTIES_ATTRIBUTES: 25,
                      WORKFLOW_TASK_FAILED_CAUSE_PENDING_CHILD_WORKFLOWS_LIMIT_EXCEEDED: 26,
                      WORKFLOW_TASK_FAILED_CAUSE_PENDING_ACTIVITIES_LIMIT_EXCEEDED: 27,
                      WORKFLOW_TASK_FAILED_CAUSE_PENDING_SIGNALS_LIMIT_EXCEEDED: 28,
                      WORKFLOW_TASK_FAILED_CAUSE_PENDING_REQUEST_CANCEL_LIMIT_EXCEEDED: 29,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_UPDATE_WORKFLOW_EXECUTION_MESSAGE: 30,
                      WORKFLOW_TASK_FAILED_CAUSE_UNHANDLED_UPDATE: 31,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_SCHEDULE_NEXUS_OPERATION_ATTRIBUTES: 32,
                      WORKFLOW_TASK_FAILED_CAUSE_PENDING_NEXUS_OPERATIONS_LIMIT_EXCEEDED: 33,
                      WORKFLOW_TASK_FAILED_CAUSE_BAD_REQUEST_CANCEL_NEXUS_OPERATION_ATTRIBUTES: 34,
                      WORKFLOW_TASK_FAILED_CAUSE_FEATURE_DISABLED: 35,
                      WORKFLOW_TASK_FAILED_CAUSE_GRPC_MESSAGE_TOO_LARGE: 36
                    }
                  },
                  StartChildWorkflowExecutionFailedCause: {
                    values: {
                      START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED: 0,
                      START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_WORKFLOW_ALREADY_EXISTS: 1,
                      START_CHILD_WORKFLOW_EXECUTION_FAILED_CAUSE_NAMESPACE_NOT_FOUND: 2
                    }
                  },
                  CancelExternalWorkflowExecutionFailedCause: {
                    values: {
                      CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED: 0,
                      CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_EXTERNAL_WORKFLOW_EXECUTION_NOT_FOUND: 1,
                      CANCEL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_NAMESPACE_NOT_FOUND: 2
                    }
                  },
                  SignalExternalWorkflowExecutionFailedCause: {
                    values: {
                      SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_UNSPECIFIED: 0,
                      SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_EXTERNAL_WORKFLOW_EXECUTION_NOT_FOUND: 1,
                      SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_NAMESPACE_NOT_FOUND: 2,
                      SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_FAILED_CAUSE_SIGNAL_COUNT_LIMIT_EXCEEDED: 3
                    }
                  },
                  ResourceExhaustedCause: {
                    values: {
                      RESOURCE_EXHAUSTED_CAUSE_UNSPECIFIED: 0,
                      RESOURCE_EXHAUSTED_CAUSE_RPS_LIMIT: 1,
                      RESOURCE_EXHAUSTED_CAUSE_CONCURRENT_LIMIT: 2,
                      RESOURCE_EXHAUSTED_CAUSE_SYSTEM_OVERLOADED: 3,
                      RESOURCE_EXHAUSTED_CAUSE_PERSISTENCE_LIMIT: 4,
                      RESOURCE_EXHAUSTED_CAUSE_BUSY_WORKFLOW: 5,
                      RESOURCE_EXHAUSTED_CAUSE_APS_LIMIT: 6,
                      RESOURCE_EXHAUSTED_CAUSE_PERSISTENCE_STORAGE_LIMIT: 7,
                      RESOURCE_EXHAUSTED_CAUSE_CIRCUIT_BREAKER_OPEN: 8,
                      RESOURCE_EXHAUSTED_CAUSE_OPS_LIMIT: 9
                    }
                  },
                  ResourceExhaustedScope: {
                    values: {
                      RESOURCE_EXHAUSTED_SCOPE_UNSPECIFIED: 0,
                      RESOURCE_EXHAUSTED_SCOPE_NAMESPACE: 1,
                      RESOURCE_EXHAUSTED_SCOPE_SYSTEM: 2
                    }
                  },
                  QueryResultType: {
                    values: {
                      QUERY_RESULT_TYPE_UNSPECIFIED: 0,
                      QUERY_RESULT_TYPE_ANSWERED: 1,
                      QUERY_RESULT_TYPE_FAILED: 2
                    }
                  },
                  QueryRejectCondition: {
                    values: {
                      QUERY_REJECT_CONDITION_UNSPECIFIED: 0,
                      QUERY_REJECT_CONDITION_NONE: 1,
                      QUERY_REJECT_CONDITION_NOT_OPEN: 2,
                      QUERY_REJECT_CONDITION_NOT_COMPLETED_CLEANLY: 3
                    }
                  },
                  TaskQueueKind: {
                    values: {
                      TASK_QUEUE_KIND_UNSPECIFIED: 0,
                      TASK_QUEUE_KIND_NORMAL: 1,
                      TASK_QUEUE_KIND_STICKY: 2
                    }
                  },
                  TaskQueueType: {
                    values: {
                      TASK_QUEUE_TYPE_UNSPECIFIED: 0,
                      TASK_QUEUE_TYPE_WORKFLOW: 1,
                      TASK_QUEUE_TYPE_ACTIVITY: 2,
                      TASK_QUEUE_TYPE_NEXUS: 3
                    }
                  },
                  TaskReachability: {
                    values: {
                      TASK_REACHABILITY_UNSPECIFIED: 0,
                      TASK_REACHABILITY_NEW_WORKFLOWS: 1,
                      TASK_REACHABILITY_EXISTING_WORKFLOWS: 2,
                      TASK_REACHABILITY_OPEN_WORKFLOWS: 3,
                      TASK_REACHABILITY_CLOSED_WORKFLOWS: 4
                    }
                  },
                  BuildIdTaskReachability: {
                    values: {
                      BUILD_ID_TASK_REACHABILITY_UNSPECIFIED: 0,
                      BUILD_ID_TASK_REACHABILITY_REACHABLE: 1,
                      BUILD_ID_TASK_REACHABILITY_CLOSED_WORKFLOWS_ONLY: 2,
                      BUILD_ID_TASK_REACHABILITY_UNREACHABLE: 3
                    }
                  },
                  DescribeTaskQueueMode: {
                    values: {
                      DESCRIBE_TASK_QUEUE_MODE_UNSPECIFIED: 0,
                      DESCRIBE_TASK_QUEUE_MODE_ENHANCED: 1
                    }
                  },
                  RateLimitSource: {
                    values: {
                      RATE_LIMIT_SOURCE_UNSPECIFIED: 0,
                      RATE_LIMIT_SOURCE_API: 1,
                      RATE_LIMIT_SOURCE_WORKER: 2,
                      RATE_LIMIT_SOURCE_SYSTEM: 3
                    }
                  },
                  DeploymentReachability: {
                    values: {
                      DEPLOYMENT_REACHABILITY_UNSPECIFIED: 0,
                      DEPLOYMENT_REACHABILITY_REACHABLE: 1,
                      DEPLOYMENT_REACHABILITY_CLOSED_WORKFLOWS_ONLY: 2,
                      DEPLOYMENT_REACHABILITY_UNREACHABLE: 3
                    }
                  },
                  VersionDrainageStatus: {
                    values: {
                      VERSION_DRAINAGE_STATUS_UNSPECIFIED: 0,
                      VERSION_DRAINAGE_STATUS_DRAINING: 1,
                      VERSION_DRAINAGE_STATUS_DRAINED: 2
                    }
                  },
                  WorkerVersioningMode: {
                    values: {
                      WORKER_VERSIONING_MODE_UNSPECIFIED: 0,
                      WORKER_VERSIONING_MODE_UNVERSIONED: 1,
                      WORKER_VERSIONING_MODE_VERSIONED: 2
                    }
                  },
                  WorkerDeploymentVersionStatus: {
                    values: {
                      WORKER_DEPLOYMENT_VERSION_STATUS_UNSPECIFIED: 0,
                      WORKER_DEPLOYMENT_VERSION_STATUS_INACTIVE: 1,
                      WORKER_DEPLOYMENT_VERSION_STATUS_CURRENT: 2,
                      WORKER_DEPLOYMENT_VERSION_STATUS_RAMPING: 3,
                      WORKER_DEPLOYMENT_VERSION_STATUS_DRAINING: 4,
                      WORKER_DEPLOYMENT_VERSION_STATUS_DRAINED: 5
                    }
                  },
                  CommandType: {
                    values: {
                      COMMAND_TYPE_UNSPECIFIED: 0,
                      COMMAND_TYPE_SCHEDULE_ACTIVITY_TASK: 1,
                      COMMAND_TYPE_REQUEST_CANCEL_ACTIVITY_TASK: 2,
                      COMMAND_TYPE_START_TIMER: 3,
                      COMMAND_TYPE_COMPLETE_WORKFLOW_EXECUTION: 4,
                      COMMAND_TYPE_FAIL_WORKFLOW_EXECUTION: 5,
                      COMMAND_TYPE_CANCEL_TIMER: 6,
                      COMMAND_TYPE_CANCEL_WORKFLOW_EXECUTION: 7,
                      COMMAND_TYPE_REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION: 8,
                      COMMAND_TYPE_RECORD_MARKER: 9,
                      COMMAND_TYPE_CONTINUE_AS_NEW_WORKFLOW_EXECUTION: 10,
                      COMMAND_TYPE_START_CHILD_WORKFLOW_EXECUTION: 11,
                      COMMAND_TYPE_SIGNAL_EXTERNAL_WORKFLOW_EXECUTION: 12,
                      COMMAND_TYPE_UPSERT_WORKFLOW_SEARCH_ATTRIBUTES: 13,
                      COMMAND_TYPE_PROTOCOL_MESSAGE: 14,
                      COMMAND_TYPE_MODIFY_WORKFLOW_PROPERTIES: 16,
                      COMMAND_TYPE_SCHEDULE_NEXUS_OPERATION: 17,
                      COMMAND_TYPE_REQUEST_CANCEL_NEXUS_OPERATION: 18
                    }
                  },
                  ScheduleOverlapPolicy: {
                    values: {
                      SCHEDULE_OVERLAP_POLICY_UNSPECIFIED: 0,
                      SCHEDULE_OVERLAP_POLICY_SKIP: 1,
                      SCHEDULE_OVERLAP_POLICY_BUFFER_ONE: 2,
                      SCHEDULE_OVERLAP_POLICY_BUFFER_ALL: 3,
                      SCHEDULE_OVERLAP_POLICY_CANCEL_OTHER: 4,
                      SCHEDULE_OVERLAP_POLICY_TERMINATE_OTHER: 5,
                      SCHEDULE_OVERLAP_POLICY_ALLOW_ALL: 6
                    }
                  }
                }
              }
            }
          },
          failure: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/failure/v1;failure",
                  java_package: "io.temporal.api.failure.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Failure::V1",
                  csharp_namespace: "Temporalio.Api.Failure.V1"
                },
                nested: {
                  ApplicationFailureInfo: {
                    fields: {
                      type: {
                        type: "string",
                        id: 1
                      },
                      nonRetryable: {
                        type: "bool",
                        id: 2
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 3
                      },
                      nextRetryDelay: {
                        type: "google.protobuf.Duration",
                        id: 4
                      },
                      category: {
                        type: "temporal.api.enums.v1.ApplicationErrorCategory",
                        id: 5
                      }
                    }
                  },
                  TimeoutFailureInfo: {
                    fields: {
                      timeoutType: {
                        type: "temporal.api.enums.v1.TimeoutType",
                        id: 1
                      },
                      lastHeartbeatDetails: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      }
                    }
                  },
                  CanceledFailureInfo: {
                    fields: {
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      }
                    }
                  },
                  TerminatedFailureInfo: {
                    fields: {}
                  },
                  ServerFailureInfo: {
                    fields: {
                      nonRetryable: {
                        type: "bool",
                        id: 1
                      }
                    }
                  },
                  ResetWorkflowFailureInfo: {
                    fields: {
                      lastHeartbeatDetails: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      }
                    }
                  },
                  ActivityFailureInfo: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      startedEventId: {
                        type: "int64",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      activityType: {
                        type: "temporal.api.common.v1.ActivityType",
                        id: 4
                      },
                      activityId: {
                        type: "string",
                        id: 5
                      },
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 6
                      }
                    }
                  },
                  ChildWorkflowExecutionFailureInfo: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 4
                      },
                      startedEventId: {
                        type: "int64",
                        id: 5
                      },
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 6
                      }
                    }
                  },
                  NexusOperationFailureInfo: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      endpoint: {
                        type: "string",
                        id: 2
                      },
                      service: {
                        type: "string",
                        id: 3
                      },
                      operation: {
                        type: "string",
                        id: 4
                      },
                      operationId: {
                        type: "string",
                        id: 5,
                        options: {
                          deprecated: true
                        }
                      },
                      operationToken: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  NexusHandlerFailureInfo: {
                    fields: {
                      type: {
                        type: "string",
                        id: 1
                      },
                      retryBehavior: {
                        type: "temporal.api.enums.v1.NexusHandlerErrorRetryBehavior",
                        id: 2
                      }
                    }
                  },
                  Failure: {
                    oneofs: {
                      failureInfo: {
                        oneof: [
                          "applicationFailureInfo",
                          "timeoutFailureInfo",
                          "canceledFailureInfo",
                          "terminatedFailureInfo",
                          "serverFailureInfo",
                          "resetWorkflowFailureInfo",
                          "activityFailureInfo",
                          "childWorkflowExecutionFailureInfo",
                          "nexusOperationExecutionFailureInfo",
                          "nexusHandlerFailureInfo"
                        ]
                      }
                    },
                    fields: {
                      message: {
                        type: "string",
                        id: 1
                      },
                      source: {
                        type: "string",
                        id: 2
                      },
                      stackTrace: {
                        type: "string",
                        id: 3
                      },
                      encodedAttributes: {
                        type: "temporal.api.common.v1.Payload",
                        id: 20
                      },
                      cause: {
                        type: "Failure",
                        id: 4
                      },
                      applicationFailureInfo: {
                        type: "ApplicationFailureInfo",
                        id: 5
                      },
                      timeoutFailureInfo: {
                        type: "TimeoutFailureInfo",
                        id: 6
                      },
                      canceledFailureInfo: {
                        type: "CanceledFailureInfo",
                        id: 7
                      },
                      terminatedFailureInfo: {
                        type: "TerminatedFailureInfo",
                        id: 8
                      },
                      serverFailureInfo: {
                        type: "ServerFailureInfo",
                        id: 9
                      },
                      resetWorkflowFailureInfo: {
                        type: "ResetWorkflowFailureInfo",
                        id: 10
                      },
                      activityFailureInfo: {
                        type: "ActivityFailureInfo",
                        id: 11
                      },
                      childWorkflowExecutionFailureInfo: {
                        type: "ChildWorkflowExecutionFailureInfo",
                        id: 12
                      },
                      nexusOperationExecutionFailureInfo: {
                        type: "NexusOperationFailureInfo",
                        id: 13
                      },
                      nexusHandlerFailureInfo: {
                        type: "NexusHandlerFailureInfo",
                        id: 14
                      }
                    }
                  },
                  MultiOperationExecutionAborted: {
                    fields: {}
                  }
                }
              }
            }
          },
          update: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/update/v1;update",
                  java_package: "io.temporal.api.update.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Update::V1",
                  csharp_namespace: "Temporalio.Api.Update.V1"
                },
                nested: {
                  WaitPolicy: {
                    fields: {
                      lifecycleStage: {
                        type: "temporal.api.enums.v1.UpdateWorkflowExecutionLifecycleStage",
                        id: 1
                      }
                    }
                  },
                  UpdateRef: {
                    fields: {
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 1
                      },
                      updateId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  Outcome: {
                    oneofs: {
                      value: {
                        oneof: [
                          "success",
                          "failure"
                        ]
                      }
                    },
                    fields: {
                      success: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 2
                      }
                    }
                  },
                  Meta: {
                    fields: {
                      updateId: {
                        type: "string",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  Input: {
                    fields: {
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 1
                      },
                      name: {
                        type: "string",
                        id: 2
                      },
                      args: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 3
                      }
                    }
                  },
                  Request: {
                    fields: {
                      meta: {
                        type: "Meta",
                        id: 1
                      },
                      input: {
                        type: "Input",
                        id: 2
                      }
                    }
                  },
                  Rejection: {
                    fields: {
                      rejectedRequestMessageId: {
                        type: "string",
                        id: 1
                      },
                      rejectedRequestSequencingEventId: {
                        type: "int64",
                        id: 2
                      },
                      rejectedRequest: {
                        type: "Request",
                        id: 3
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 4
                      }
                    }
                  },
                  Acceptance: {
                    fields: {
                      acceptedRequestMessageId: {
                        type: "string",
                        id: 1
                      },
                      acceptedRequestSequencingEventId: {
                        type: "int64",
                        id: 2
                      },
                      acceptedRequest: {
                        type: "Request",
                        id: 3
                      }
                    }
                  },
                  Response: {
                    fields: {
                      meta: {
                        type: "Meta",
                        id: 1
                      },
                      outcome: {
                        type: "Outcome",
                        id: 2
                      }
                    }
                  }
                }
              }
            }
          },
          nexus: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/nexus/v1;nexus",
                  java_package: "io.temporal.api.nexus.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Nexus::V1",
                  csharp_namespace: "Temporalio.Api.Nexus.V1"
                },
                nested: {
                  Failure: {
                    fields: {
                      message: {
                        type: "string",
                        id: 1
                      },
                      metadata: {
                        keyType: "string",
                        type: "string",
                        id: 2
                      },
                      details: {
                        type: "bytes",
                        id: 3
                      }
                    }
                  },
                  HandlerError: {
                    fields: {
                      errorType: {
                        type: "string",
                        id: 1
                      },
                      failure: {
                        type: "Failure",
                        id: 2
                      },
                      retryBehavior: {
                        type: "temporal.api.enums.v1.NexusHandlerErrorRetryBehavior",
                        id: 3
                      }
                    }
                  },
                  UnsuccessfulOperationError: {
                    fields: {
                      operationState: {
                        type: "string",
                        id: 1
                      },
                      failure: {
                        type: "Failure",
                        id: 2
                      }
                    }
                  },
                  Link: {
                    fields: {
                      url: {
                        type: "string",
                        id: 1
                      },
                      type: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  StartOperationRequest: {
                    fields: {
                      service: {
                        type: "string",
                        id: 1
                      },
                      operation: {
                        type: "string",
                        id: 2
                      },
                      requestId: {
                        type: "string",
                        id: 3
                      },
                      callback: {
                        type: "string",
                        id: 4
                      },
                      payload: {
                        type: "temporal.api.common.v1.Payload",
                        id: 5
                      },
                      callbackHeader: {
                        keyType: "string",
                        type: "string",
                        id: 6
                      },
                      links: {
                        rule: "repeated",
                        type: "Link",
                        id: 7
                      }
                    }
                  },
                  CancelOperationRequest: {
                    fields: {
                      service: {
                        type: "string",
                        id: 1
                      },
                      operation: {
                        type: "string",
                        id: 2
                      },
                      operationId: {
                        type: "string",
                        id: 3,
                        options: {
                          deprecated: true
                        }
                      },
                      operationToken: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  Request: {
                    oneofs: {
                      variant: {
                        oneof: [
                          "startOperation",
                          "cancelOperation"
                        ]
                      }
                    },
                    fields: {
                      header: {
                        keyType: "string",
                        type: "string",
                        id: 1
                      },
                      scheduledTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2
                      },
                      startOperation: {
                        type: "StartOperationRequest",
                        id: 3
                      },
                      cancelOperation: {
                        type: "CancelOperationRequest",
                        id: 4
                      }
                    }
                  },
                  StartOperationResponse: {
                    oneofs: {
                      variant: {
                        oneof: [
                          "syncSuccess",
                          "asyncSuccess",
                          "operationError"
                        ]
                      }
                    },
                    fields: {
                      syncSuccess: {
                        type: "Sync",
                        id: 1
                      },
                      asyncSuccess: {
                        type: "Async",
                        id: 2
                      },
                      operationError: {
                        type: "UnsuccessfulOperationError",
                        id: 3
                      }
                    },
                    nested: {
                      Sync: {
                        fields: {
                          payload: {
                            type: "temporal.api.common.v1.Payload",
                            id: 1
                          },
                          links: {
                            rule: "repeated",
                            type: "Link",
                            id: 2
                          }
                        }
                      },
                      Async: {
                        fields: {
                          operationId: {
                            type: "string",
                            id: 1,
                            options: {
                              deprecated: true
                            }
                          },
                          links: {
                            rule: "repeated",
                            type: "Link",
                            id: 2
                          },
                          operationToken: {
                            type: "string",
                            id: 3
                          }
                        }
                      }
                    }
                  },
                  CancelOperationResponse: {
                    fields: {}
                  },
                  Response: {
                    oneofs: {
                      variant: {
                        oneof: [
                          "startOperation",
                          "cancelOperation"
                        ]
                      }
                    },
                    fields: {
                      startOperation: {
                        type: "StartOperationResponse",
                        id: 1
                      },
                      cancelOperation: {
                        type: "CancelOperationResponse",
                        id: 2
                      }
                    }
                  },
                  Endpoint: {
                    fields: {
                      version: {
                        type: "int64",
                        id: 1
                      },
                      id: {
                        type: "string",
                        id: 2
                      },
                      spec: {
                        type: "EndpointSpec",
                        id: 3
                      },
                      createdTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4
                      },
                      lastModifiedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 5
                      },
                      urlPrefix: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  EndpointSpec: {
                    fields: {
                      name: {
                        type: "string",
                        id: 1
                      },
                      description: {
                        type: "temporal.api.common.v1.Payload",
                        id: 2
                      },
                      target: {
                        type: "EndpointTarget",
                        id: 3
                      }
                    }
                  },
                  EndpointTarget: {
                    oneofs: {
                      variant: {
                        oneof: [
                          "worker",
                          "external"
                        ]
                      }
                    },
                    fields: {
                      worker: {
                        type: "Worker",
                        id: 1
                      },
                      external: {
                        type: "External",
                        id: 2
                      }
                    },
                    nested: {
                      Worker: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          taskQueue: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      External: {
                        fields: {
                          url: {
                            type: "string",
                            id: 1
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          workflowservice: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/workflowservice/v1;workflowservice",
                  java_package: "io.temporal.api.workflowservice.v1",
                  java_multiple_files: true,
                  java_outer_classname: "ServiceProto",
                  ruby_package: "Temporalio::Api::WorkflowService::V1",
                  csharp_namespace: "Temporalio.Api.WorkflowService.V1"
                },
                nested: {
                  RegisterNamespaceRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      description: {
                        type: "string",
                        id: 2
                      },
                      ownerEmail: {
                        type: "string",
                        id: 3
                      },
                      workflowExecutionRetentionPeriod: {
                        type: "google.protobuf.Duration",
                        id: 4
                      },
                      clusters: {
                        rule: "repeated",
                        type: "temporal.api.replication.v1.ClusterReplicationConfig",
                        id: 5
                      },
                      activeClusterName: {
                        type: "string",
                        id: 6
                      },
                      data: {
                        keyType: "string",
                        type: "string",
                        id: 7
                      },
                      securityToken: {
                        type: "string",
                        id: 8
                      },
                      isGlobalNamespace: {
                        type: "bool",
                        id: 9
                      },
                      historyArchivalState: {
                        type: "temporal.api.enums.v1.ArchivalState",
                        id: 10
                      },
                      historyArchivalUri: {
                        type: "string",
                        id: 11
                      },
                      visibilityArchivalState: {
                        type: "temporal.api.enums.v1.ArchivalState",
                        id: 12
                      },
                      visibilityArchivalUri: {
                        type: "string",
                        id: 13
                      }
                    }
                  },
                  RegisterNamespaceResponse: {
                    fields: {}
                  },
                  ListNamespacesRequest: {
                    fields: {
                      pageSize: {
                        type: "int32",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      },
                      namespaceFilter: {
                        type: "temporal.api.namespace.v1.NamespaceFilter",
                        id: 3
                      }
                    }
                  },
                  ListNamespacesResponse: {
                    fields: {
                      namespaces: {
                        rule: "repeated",
                        type: "DescribeNamespaceResponse",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  DescribeNamespaceRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      id: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  DescribeNamespaceResponse: {
                    fields: {
                      namespaceInfo: {
                        type: "temporal.api.namespace.v1.NamespaceInfo",
                        id: 1
                      },
                      config: {
                        type: "temporal.api.namespace.v1.NamespaceConfig",
                        id: 2
                      },
                      replicationConfig: {
                        type: "temporal.api.replication.v1.NamespaceReplicationConfig",
                        id: 3
                      },
                      failoverVersion: {
                        type: "int64",
                        id: 4
                      },
                      isGlobalNamespace: {
                        type: "bool",
                        id: 5
                      },
                      failoverHistory: {
                        rule: "repeated",
                        type: "temporal.api.replication.v1.FailoverStatus",
                        id: 6
                      }
                    }
                  },
                  UpdateNamespaceRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      updateInfo: {
                        type: "temporal.api.namespace.v1.UpdateNamespaceInfo",
                        id: 2
                      },
                      config: {
                        type: "temporal.api.namespace.v1.NamespaceConfig",
                        id: 3
                      },
                      replicationConfig: {
                        type: "temporal.api.replication.v1.NamespaceReplicationConfig",
                        id: 4
                      },
                      securityToken: {
                        type: "string",
                        id: 5
                      },
                      deleteBadBinary: {
                        type: "string",
                        id: 6
                      },
                      promoteNamespace: {
                        type: "bool",
                        id: 7
                      }
                    }
                  },
                  UpdateNamespaceResponse: {
                    fields: {
                      namespaceInfo: {
                        type: "temporal.api.namespace.v1.NamespaceInfo",
                        id: 1
                      },
                      config: {
                        type: "temporal.api.namespace.v1.NamespaceConfig",
                        id: 2
                      },
                      replicationConfig: {
                        type: "temporal.api.replication.v1.NamespaceReplicationConfig",
                        id: 3
                      },
                      failoverVersion: {
                        type: "int64",
                        id: 4
                      },
                      isGlobalNamespace: {
                        type: "bool",
                        id: 5
                      }
                    }
                  },
                  DeprecateNamespaceRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      securityToken: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  DeprecateNamespaceResponse: {
                    fields: {}
                  },
                  StartWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 4
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      workflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 6
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 8
                      },
                      identity: {
                        type: "string",
                        id: 9
                      },
                      requestId: {
                        type: "string",
                        id: 10
                      },
                      workflowIdReusePolicy: {
                        type: "temporal.api.enums.v1.WorkflowIdReusePolicy",
                        id: 11
                      },
                      workflowIdConflictPolicy: {
                        type: "temporal.api.enums.v1.WorkflowIdConflictPolicy",
                        id: 22
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 12
                      },
                      cronSchedule: {
                        type: "string",
                        id: 13
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 14
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 15
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 16
                      },
                      requestEagerExecution: {
                        type: "bool",
                        id: 17
                      },
                      continuedFailure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 18
                      },
                      lastCompletionResult: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 19
                      },
                      workflowStartDelay: {
                        type: "google.protobuf.Duration",
                        id: 20
                      },
                      completionCallbacks: {
                        rule: "repeated",
                        type: "temporal.api.common.v1.Callback",
                        id: 21
                      },
                      userMetadata: {
                        type: "temporal.api.sdk.v1.UserMetadata",
                        id: 23
                      },
                      links: {
                        rule: "repeated",
                        type: "temporal.api.common.v1.Link",
                        id: 24
                      },
                      versioningOverride: {
                        type: "temporal.api.workflow.v1.VersioningOverride",
                        id: 25
                      },
                      onConflictOptions: {
                        type: "temporal.api.workflow.v1.OnConflictOptions",
                        id: 26
                      },
                      priority: {
                        type: "temporal.api.common.v1.Priority",
                        id: 27
                      }
                    }
                  },
                  StartWorkflowExecutionResponse: {
                    fields: {
                      runId: {
                        type: "string",
                        id: 1
                      },
                      started: {
                        type: "bool",
                        id: 3
                      },
                      status: {
                        type: "temporal.api.enums.v1.WorkflowExecutionStatus",
                        id: 5
                      },
                      eagerWorkflowTask: {
                        type: "PollWorkflowTaskQueueResponse",
                        id: 2
                      },
                      link: {
                        type: "temporal.api.common.v1.Link",
                        id: 4
                      }
                    }
                  },
                  GetWorkflowExecutionHistoryRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      maximumPageSize: {
                        type: "int32",
                        id: 3
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 4
                      },
                      waitNewEvent: {
                        type: "bool",
                        id: 5
                      },
                      historyEventFilterType: {
                        type: "temporal.api.enums.v1.HistoryEventFilterType",
                        id: 6
                      },
                      skipArchival: {
                        type: "bool",
                        id: 7
                      }
                    }
                  },
                  GetWorkflowExecutionHistoryResponse: {
                    fields: {
                      history: {
                        type: "temporal.api.history.v1.History",
                        id: 1
                      },
                      rawHistory: {
                        rule: "repeated",
                        type: "temporal.api.common.v1.DataBlob",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      },
                      archived: {
                        type: "bool",
                        id: 4
                      }
                    }
                  },
                  GetWorkflowExecutionHistoryReverseRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      maximumPageSize: {
                        type: "int32",
                        id: 3
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 4
                      }
                    }
                  },
                  GetWorkflowExecutionHistoryReverseResponse: {
                    fields: {
                      history: {
                        type: "temporal.api.history.v1.History",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      }
                    }
                  },
                  PollWorkflowTaskQueueRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      binaryChecksum: {
                        type: "string",
                        id: 4,
                        options: {
                          deprecated: true
                        }
                      },
                      workerVersionCapabilities: {
                        type: "temporal.api.common.v1.WorkerVersionCapabilities",
                        id: 5,
                        options: {
                          deprecated: true
                        }
                      },
                      deploymentOptions: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentOptions",
                        id: 6
                      },
                      workerHeartbeat: {
                        type: "temporal.api.worker.v1.WorkerHeartbeat",
                        id: 7
                      }
                    }
                  },
                  PollWorkflowTaskQueueResponse: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      previousStartedEventId: {
                        type: "int64",
                        id: 4
                      },
                      startedEventId: {
                        type: "int64",
                        id: 5
                      },
                      attempt: {
                        type: "int32",
                        id: 6
                      },
                      backlogCountHint: {
                        type: "int64",
                        id: 7
                      },
                      history: {
                        type: "temporal.api.history.v1.History",
                        id: 8
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 9
                      },
                      query: {
                        type: "temporal.api.query.v1.WorkflowQuery",
                        id: 10
                      },
                      workflowExecutionTaskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 11
                      },
                      scheduledTime: {
                        type: "google.protobuf.Timestamp",
                        id: 12
                      },
                      startedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 13
                      },
                      queries: {
                        keyType: "string",
                        type: "temporal.api.query.v1.WorkflowQuery",
                        id: 14
                      },
                      messages: {
                        rule: "repeated",
                        type: "temporal.api.protocol.v1.Message",
                        id: 15
                      },
                      pollerScalingDecision: {
                        type: "temporal.api.taskqueue.v1.PollerScalingDecision",
                        id: 16
                      }
                    }
                  },
                  RespondWorkflowTaskCompletedRequest: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      commands: {
                        rule: "repeated",
                        type: "temporal.api.command.v1.Command",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      stickyAttributes: {
                        type: "temporal.api.taskqueue.v1.StickyExecutionAttributes",
                        id: 4
                      },
                      returnNewWorkflowTask: {
                        type: "bool",
                        id: 5
                      },
                      forceCreateNewWorkflowTask: {
                        type: "bool",
                        id: 6
                      },
                      binaryChecksum: {
                        type: "string",
                        id: 7,
                        options: {
                          deprecated: true
                        }
                      },
                      queryResults: {
                        keyType: "string",
                        type: "temporal.api.query.v1.WorkflowQueryResult",
                        id: 8
                      },
                      namespace: {
                        type: "string",
                        id: 9
                      },
                      workerVersionStamp: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 10,
                        options: {
                          deprecated: true
                        }
                      },
                      messages: {
                        rule: "repeated",
                        type: "temporal.api.protocol.v1.Message",
                        id: 11
                      },
                      sdkMetadata: {
                        type: "temporal.api.sdk.v1.WorkflowTaskCompletedMetadata",
                        id: 12
                      },
                      meteringMetadata: {
                        type: "temporal.api.common.v1.MeteringMetadata",
                        id: 13
                      },
                      capabilities: {
                        type: "Capabilities",
                        id: 14
                      },
                      deployment: {
                        type: "temporal.api.deployment.v1.Deployment",
                        id: 15,
                        options: {
                          deprecated: true
                        }
                      },
                      versioningBehavior: {
                        type: "temporal.api.enums.v1.VersioningBehavior",
                        id: 16
                      },
                      deploymentOptions: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentOptions",
                        id: 17
                      }
                    },
                    nested: {
                      Capabilities: {
                        fields: {
                          discardSpeculativeWorkflowTaskWithEvents: {
                            type: "bool",
                            id: 1
                          }
                        }
                      }
                    }
                  },
                  RespondWorkflowTaskCompletedResponse: {
                    fields: {
                      workflowTask: {
                        type: "PollWorkflowTaskQueueResponse",
                        id: 1
                      },
                      activityTasks: {
                        rule: "repeated",
                        type: "PollActivityTaskQueueResponse",
                        id: 2
                      },
                      resetHistoryEventId: {
                        type: "int64",
                        id: 3
                      }
                    }
                  },
                  RespondWorkflowTaskFailedRequest: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      cause: {
                        type: "temporal.api.enums.v1.WorkflowTaskFailedCause",
                        id: 2
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      },
                      binaryChecksum: {
                        type: "string",
                        id: 5,
                        options: {
                          deprecated: true
                        }
                      },
                      namespace: {
                        type: "string",
                        id: 6
                      },
                      messages: {
                        rule: "repeated",
                        type: "temporal.api.protocol.v1.Message",
                        id: 7
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 8,
                        options: {
                          deprecated: true
                        }
                      },
                      deployment: {
                        type: "temporal.api.deployment.v1.Deployment",
                        id: 9,
                        options: {
                          deprecated: true
                        }
                      },
                      deploymentOptions: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentOptions",
                        id: 10
                      }
                    }
                  },
                  RespondWorkflowTaskFailedResponse: {
                    fields: {}
                  },
                  PollActivityTaskQueueRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      taskQueueMetadata: {
                        type: "temporal.api.taskqueue.v1.TaskQueueMetadata",
                        id: 4
                      },
                      workerVersionCapabilities: {
                        type: "temporal.api.common.v1.WorkerVersionCapabilities",
                        id: 5,
                        options: {
                          deprecated: true
                        }
                      },
                      deploymentOptions: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentOptions",
                        id: 6
                      },
                      workerHeartbeat: {
                        type: "temporal.api.worker.v1.WorkerHeartbeat",
                        id: 7
                      }
                    }
                  },
                  PollActivityTaskQueueResponse: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      workflowNamespace: {
                        type: "string",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 4
                      },
                      activityType: {
                        type: "temporal.api.common.v1.ActivityType",
                        id: 5
                      },
                      activityId: {
                        type: "string",
                        id: 6
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 7
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 8
                      },
                      heartbeatDetails: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 9
                      },
                      scheduledTime: {
                        type: "google.protobuf.Timestamp",
                        id: 10
                      },
                      currentAttemptScheduledTime: {
                        type: "google.protobuf.Timestamp",
                        id: 11
                      },
                      startedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 12
                      },
                      attempt: {
                        type: "int32",
                        id: 13
                      },
                      scheduleToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 14
                      },
                      startToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 15
                      },
                      heartbeatTimeout: {
                        type: "google.protobuf.Duration",
                        id: 16
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 17
                      },
                      pollerScalingDecision: {
                        type: "temporal.api.taskqueue.v1.PollerScalingDecision",
                        id: 18
                      },
                      priority: {
                        type: "temporal.api.common.v1.Priority",
                        id: 19
                      }
                    }
                  },
                  RecordActivityTaskHeartbeatRequest: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      namespace: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  RecordActivityTaskHeartbeatResponse: {
                    fields: {
                      cancelRequested: {
                        type: "bool",
                        id: 1
                      },
                      activityPaused: {
                        type: "bool",
                        id: 2
                      },
                      activityReset: {
                        type: "bool",
                        id: 3
                      }
                    }
                  },
                  RecordActivityTaskHeartbeatByIdRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      runId: {
                        type: "string",
                        id: 3
                      },
                      activityId: {
                        type: "string",
                        id: 4
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      identity: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  RecordActivityTaskHeartbeatByIdResponse: {
                    fields: {
                      cancelRequested: {
                        type: "bool",
                        id: 1
                      },
                      activityPaused: {
                        type: "bool",
                        id: 2
                      },
                      activityReset: {
                        type: "bool",
                        id: 3
                      }
                    }
                  },
                  RespondActivityTaskCompletedRequest: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      result: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      namespace: {
                        type: "string",
                        id: 4
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 5,
                        options: {
                          deprecated: true
                        }
                      },
                      deployment: {
                        type: "temporal.api.deployment.v1.Deployment",
                        id: 6,
                        options: {
                          deprecated: true
                        }
                      },
                      deploymentOptions: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentOptions",
                        id: 7
                      }
                    }
                  },
                  RespondActivityTaskCompletedResponse: {
                    fields: {}
                  },
                  RespondActivityTaskCompletedByIdRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      runId: {
                        type: "string",
                        id: 3
                      },
                      activityId: {
                        type: "string",
                        id: 4
                      },
                      result: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      identity: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  RespondActivityTaskCompletedByIdResponse: {
                    fields: {}
                  },
                  RespondActivityTaskFailedRequest: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      namespace: {
                        type: "string",
                        id: 4
                      },
                      lastHeartbeatDetails: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 6,
                        options: {
                          deprecated: true
                        }
                      },
                      deployment: {
                        type: "temporal.api.deployment.v1.Deployment",
                        id: 7,
                        options: {
                          deprecated: true
                        }
                      },
                      deploymentOptions: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentOptions",
                        id: 8
                      }
                    }
                  },
                  RespondActivityTaskFailedResponse: {
                    fields: {
                      failures: {
                        rule: "repeated",
                        type: "temporal.api.failure.v1.Failure",
                        id: 1
                      }
                    }
                  },
                  RespondActivityTaskFailedByIdRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      runId: {
                        type: "string",
                        id: 3
                      },
                      activityId: {
                        type: "string",
                        id: 4
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 5
                      },
                      identity: {
                        type: "string",
                        id: 6
                      },
                      lastHeartbeatDetails: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 7
                      }
                    }
                  },
                  RespondActivityTaskFailedByIdResponse: {
                    fields: {
                      failures: {
                        rule: "repeated",
                        type: "temporal.api.failure.v1.Failure",
                        id: 1
                      }
                    }
                  },
                  RespondActivityTaskCanceledRequest: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      namespace: {
                        type: "string",
                        id: 4
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 5,
                        options: {
                          deprecated: true
                        }
                      },
                      deployment: {
                        type: "temporal.api.deployment.v1.Deployment",
                        id: 6,
                        options: {
                          deprecated: true
                        }
                      },
                      deploymentOptions: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentOptions",
                        id: 7
                      }
                    }
                  },
                  RespondActivityTaskCanceledResponse: {
                    fields: {}
                  },
                  RespondActivityTaskCanceledByIdRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      runId: {
                        type: "string",
                        id: 3
                      },
                      activityId: {
                        type: "string",
                        id: 4
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      identity: {
                        type: "string",
                        id: 6
                      },
                      deploymentOptions: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentOptions",
                        id: 7
                      }
                    }
                  },
                  RespondActivityTaskCanceledByIdResponse: {
                    fields: {}
                  },
                  RequestCancelWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      requestId: {
                        type: "string",
                        id: 4
                      },
                      firstExecutionRunId: {
                        type: "string",
                        id: 5
                      },
                      reason: {
                        type: "string",
                        id: 6
                      },
                      links: {
                        rule: "repeated",
                        type: "temporal.api.common.v1.Link",
                        id: 7
                      }
                    }
                  },
                  RequestCancelWorkflowExecutionResponse: {
                    fields: {}
                  },
                  SignalWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      signalName: {
                        type: "string",
                        id: 3
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 4
                      },
                      identity: {
                        type: "string",
                        id: 5
                      },
                      requestId: {
                        type: "string",
                        id: 6
                      },
                      control: {
                        type: "string",
                        id: 7,
                        options: {
                          deprecated: true
                        }
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 8
                      },
                      links: {
                        rule: "repeated",
                        type: "temporal.api.common.v1.Link",
                        id: 10
                      }
                    },
                    reserved: [
                      [
                        9,
                        9
                      ]
                    ]
                  },
                  SignalWorkflowExecutionResponse: {
                    fields: {}
                  },
                  SignalWithStartWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 4
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      workflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 6
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 8
                      },
                      identity: {
                        type: "string",
                        id: 9
                      },
                      requestId: {
                        type: "string",
                        id: 10
                      },
                      workflowIdReusePolicy: {
                        type: "temporal.api.enums.v1.WorkflowIdReusePolicy",
                        id: 11
                      },
                      workflowIdConflictPolicy: {
                        type: "temporal.api.enums.v1.WorkflowIdConflictPolicy",
                        id: 22
                      },
                      signalName: {
                        type: "string",
                        id: 12
                      },
                      signalInput: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 13
                      },
                      control: {
                        type: "string",
                        id: 14,
                        options: {
                          deprecated: true
                        }
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 15
                      },
                      cronSchedule: {
                        type: "string",
                        id: 16
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 17
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 18
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 19
                      },
                      workflowStartDelay: {
                        type: "google.protobuf.Duration",
                        id: 20
                      },
                      userMetadata: {
                        type: "temporal.api.sdk.v1.UserMetadata",
                        id: 23
                      },
                      links: {
                        rule: "repeated",
                        type: "temporal.api.common.v1.Link",
                        id: 24
                      },
                      versioningOverride: {
                        type: "temporal.api.workflow.v1.VersioningOverride",
                        id: 25
                      },
                      priority: {
                        type: "temporal.api.common.v1.Priority",
                        id: 26
                      }
                    },
                    reserved: [
                      [
                        21,
                        21
                      ]
                    ]
                  },
                  SignalWithStartWorkflowExecutionResponse: {
                    fields: {
                      runId: {
                        type: "string",
                        id: 1
                      },
                      started: {
                        type: "bool",
                        id: 2
                      }
                    }
                  },
                  ResetWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      reason: {
                        type: "string",
                        id: 3
                      },
                      workflowTaskFinishEventId: {
                        type: "int64",
                        id: 4
                      },
                      requestId: {
                        type: "string",
                        id: 5
                      },
                      resetReapplyType: {
                        type: "temporal.api.enums.v1.ResetReapplyType",
                        id: 6,
                        options: {
                          deprecated: true
                        }
                      },
                      resetReapplyExcludeTypes: {
                        rule: "repeated",
                        type: "temporal.api.enums.v1.ResetReapplyExcludeType",
                        id: 7
                      },
                      postResetOperations: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.PostResetOperation",
                        id: 8
                      },
                      identity: {
                        type: "string",
                        id: 9
                      }
                    }
                  },
                  ResetWorkflowExecutionResponse: {
                    fields: {
                      runId: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  TerminateWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      reason: {
                        type: "string",
                        id: 3
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 4
                      },
                      identity: {
                        type: "string",
                        id: 5
                      },
                      firstExecutionRunId: {
                        type: "string",
                        id: 6
                      },
                      links: {
                        rule: "repeated",
                        type: "temporal.api.common.v1.Link",
                        id: 7
                      }
                    }
                  },
                  TerminateWorkflowExecutionResponse: {
                    fields: {}
                  },
                  DeleteWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      }
                    }
                  },
                  DeleteWorkflowExecutionResponse: {
                    fields: {}
                  },
                  ListOpenWorkflowExecutionsRequest: {
                    oneofs: {
                      filters: {
                        oneof: [
                          "executionFilter",
                          "typeFilter"
                        ]
                      }
                    },
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      maximumPageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      },
                      startTimeFilter: {
                        type: "temporal.api.filter.v1.StartTimeFilter",
                        id: 4
                      },
                      executionFilter: {
                        type: "temporal.api.filter.v1.WorkflowExecutionFilter",
                        id: 5
                      },
                      typeFilter: {
                        type: "temporal.api.filter.v1.WorkflowTypeFilter",
                        id: 6
                      }
                    }
                  },
                  ListOpenWorkflowExecutionsResponse: {
                    fields: {
                      executions: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.WorkflowExecutionInfo",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  ListClosedWorkflowExecutionsRequest: {
                    oneofs: {
                      filters: {
                        oneof: [
                          "executionFilter",
                          "typeFilter",
                          "statusFilter"
                        ]
                      }
                    },
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      maximumPageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      },
                      startTimeFilter: {
                        type: "temporal.api.filter.v1.StartTimeFilter",
                        id: 4
                      },
                      executionFilter: {
                        type: "temporal.api.filter.v1.WorkflowExecutionFilter",
                        id: 5
                      },
                      typeFilter: {
                        type: "temporal.api.filter.v1.WorkflowTypeFilter",
                        id: 6
                      },
                      statusFilter: {
                        type: "temporal.api.filter.v1.StatusFilter",
                        id: 7
                      }
                    }
                  },
                  ListClosedWorkflowExecutionsResponse: {
                    fields: {
                      executions: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.WorkflowExecutionInfo",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  ListWorkflowExecutionsRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      pageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      },
                      query: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  ListWorkflowExecutionsResponse: {
                    fields: {
                      executions: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.WorkflowExecutionInfo",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  ListArchivedWorkflowExecutionsRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      pageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      },
                      query: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  ListArchivedWorkflowExecutionsResponse: {
                    fields: {
                      executions: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.WorkflowExecutionInfo",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  ScanWorkflowExecutionsRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      pageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      },
                      query: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  ScanWorkflowExecutionsResponse: {
                    fields: {
                      executions: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.WorkflowExecutionInfo",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  CountWorkflowExecutionsRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      query: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  CountWorkflowExecutionsResponse: {
                    fields: {
                      count: {
                        type: "int64",
                        id: 1
                      },
                      groups: {
                        rule: "repeated",
                        type: "AggregationGroup",
                        id: 2
                      }
                    },
                    nested: {
                      AggregationGroup: {
                        fields: {
                          groupValues: {
                            rule: "repeated",
                            type: "temporal.api.common.v1.Payload",
                            id: 1
                          },
                          count: {
                            type: "int64",
                            id: 2
                          }
                        }
                      }
                    }
                  },
                  GetSearchAttributesRequest: {
                    fields: {}
                  },
                  GetSearchAttributesResponse: {
                    fields: {
                      keys: {
                        keyType: "string",
                        type: "temporal.api.enums.v1.IndexedValueType",
                        id: 1
                      }
                    }
                  },
                  RespondQueryTaskCompletedRequest: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      completedType: {
                        type: "temporal.api.enums.v1.QueryResultType",
                        id: 2
                      },
                      queryResult: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 3
                      },
                      errorMessage: {
                        type: "string",
                        id: 4
                      },
                      namespace: {
                        type: "string",
                        id: 6
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 7
                      },
                      cause: {
                        type: "temporal.api.enums.v1.WorkflowTaskFailedCause",
                        id: 8
                      }
                    },
                    reserved: [
                      [
                        5,
                        5
                      ]
                    ]
                  },
                  RespondQueryTaskCompletedResponse: {
                    fields: {}
                  },
                  ResetStickyTaskQueueRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      }
                    }
                  },
                  ResetStickyTaskQueueResponse: {
                    fields: {}
                  },
                  ShutdownWorkerRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      stickyTaskQueue: {
                        type: "string",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      reason: {
                        type: "string",
                        id: 4
                      },
                      workerHeartbeat: {
                        type: "temporal.api.worker.v1.WorkerHeartbeat",
                        id: 5
                      }
                    }
                  },
                  ShutdownWorkerResponse: {
                    fields: {}
                  },
                  QueryWorkflowRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      query: {
                        type: "temporal.api.query.v1.WorkflowQuery",
                        id: 3
                      },
                      queryRejectCondition: {
                        type: "temporal.api.enums.v1.QueryRejectCondition",
                        id: 4
                      }
                    }
                  },
                  QueryWorkflowResponse: {
                    fields: {
                      queryResult: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      queryRejected: {
                        type: "temporal.api.query.v1.QueryRejected",
                        id: 2
                      }
                    }
                  },
                  DescribeWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      }
                    }
                  },
                  DescribeWorkflowExecutionResponse: {
                    fields: {
                      executionConfig: {
                        type: "temporal.api.workflow.v1.WorkflowExecutionConfig",
                        id: 1
                      },
                      workflowExecutionInfo: {
                        type: "temporal.api.workflow.v1.WorkflowExecutionInfo",
                        id: 2
                      },
                      pendingActivities: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.PendingActivityInfo",
                        id: 3
                      },
                      pendingChildren: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.PendingChildExecutionInfo",
                        id: 4
                      },
                      pendingWorkflowTask: {
                        type: "temporal.api.workflow.v1.PendingWorkflowTaskInfo",
                        id: 5
                      },
                      callbacks: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.CallbackInfo",
                        id: 6
                      },
                      pendingNexusOperations: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.PendingNexusOperationInfo",
                        id: 7
                      },
                      workflowExtendedInfo: {
                        type: "temporal.api.workflow.v1.WorkflowExecutionExtendedInfo",
                        id: 8
                      }
                    }
                  },
                  DescribeTaskQueueRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 2
                      },
                      taskQueueType: {
                        type: "temporal.api.enums.v1.TaskQueueType",
                        id: 3
                      },
                      reportStats: {
                        type: "bool",
                        id: 8
                      },
                      reportConfig: {
                        type: "bool",
                        id: 11
                      },
                      includeTaskQueueStatus: {
                        type: "bool",
                        id: 4,
                        options: {
                          deprecated: true
                        }
                      },
                      apiMode: {
                        type: "temporal.api.enums.v1.DescribeTaskQueueMode",
                        id: 5,
                        options: {
                          deprecated: true
                        }
                      },
                      versions: {
                        type: "temporal.api.taskqueue.v1.TaskQueueVersionSelection",
                        id: 6,
                        options: {
                          deprecated: true
                        }
                      },
                      taskQueueTypes: {
                        rule: "repeated",
                        type: "temporal.api.enums.v1.TaskQueueType",
                        id: 7,
                        options: {
                          deprecated: true
                        }
                      },
                      reportPollers: {
                        type: "bool",
                        id: 9,
                        options: {
                          deprecated: true
                        }
                      },
                      reportTaskReachability: {
                        type: "bool",
                        id: 10,
                        options: {
                          deprecated: true
                        }
                      }
                    }
                  },
                  DescribeTaskQueueResponse: {
                    fields: {
                      pollers: {
                        rule: "repeated",
                        type: "temporal.api.taskqueue.v1.PollerInfo",
                        id: 1
                      },
                      stats: {
                        type: "temporal.api.taskqueue.v1.TaskQueueStats",
                        id: 5
                      },
                      statsByPriorityKey: {
                        keyType: "int32",
                        type: "temporal.api.taskqueue.v1.TaskQueueStats",
                        id: 8
                      },
                      versioningInfo: {
                        type: "temporal.api.taskqueue.v1.TaskQueueVersioningInfo",
                        id: 4
                      },
                      config: {
                        type: "temporal.api.taskqueue.v1.TaskQueueConfig",
                        id: 6
                      },
                      effectiveRateLimit: {
                        type: "EffectiveRateLimit",
                        id: 7
                      },
                      taskQueueStatus: {
                        type: "temporal.api.taskqueue.v1.TaskQueueStatus",
                        id: 2,
                        options: {
                          deprecated: true
                        }
                      },
                      versionsInfo: {
                        keyType: "string",
                        type: "temporal.api.taskqueue.v1.TaskQueueVersionInfo",
                        id: 3,
                        options: {
                          deprecated: true
                        }
                      }
                    },
                    nested: {
                      EffectiveRateLimit: {
                        fields: {
                          requestsPerSecond: {
                            type: "float",
                            id: 1
                          },
                          rateLimitSource: {
                            type: "temporal.api.enums.v1.RateLimitSource",
                            id: 2
                          }
                        }
                      }
                    }
                  },
                  GetClusterInfoRequest: {
                    fields: {}
                  },
                  GetClusterInfoResponse: {
                    fields: {
                      supportedClients: {
                        keyType: "string",
                        type: "string",
                        id: 1
                      },
                      serverVersion: {
                        type: "string",
                        id: 2
                      },
                      clusterId: {
                        type: "string",
                        id: 3
                      },
                      versionInfo: {
                        type: "temporal.api.version.v1.VersionInfo",
                        id: 4
                      },
                      clusterName: {
                        type: "string",
                        id: 5
                      },
                      historyShardCount: {
                        type: "int32",
                        id: 6
                      },
                      persistenceStore: {
                        type: "string",
                        id: 7
                      },
                      visibilityStore: {
                        type: "string",
                        id: 8
                      }
                    }
                  },
                  GetSystemInfoRequest: {
                    fields: {}
                  },
                  GetSystemInfoResponse: {
                    fields: {
                      serverVersion: {
                        type: "string",
                        id: 1
                      },
                      capabilities: {
                        type: "Capabilities",
                        id: 2
                      }
                    },
                    nested: {
                      Capabilities: {
                        fields: {
                          signalAndQueryHeader: {
                            type: "bool",
                            id: 1
                          },
                          internalErrorDifferentiation: {
                            type: "bool",
                            id: 2
                          },
                          activityFailureIncludeHeartbeat: {
                            type: "bool",
                            id: 3
                          },
                          supportsSchedules: {
                            type: "bool",
                            id: 4
                          },
                          encodedFailureAttributes: {
                            type: "bool",
                            id: 5
                          },
                          buildIdBasedVersioning: {
                            type: "bool",
                            id: 6
                          },
                          upsertMemo: {
                            type: "bool",
                            id: 7
                          },
                          eagerWorkflowStart: {
                            type: "bool",
                            id: 8
                          },
                          sdkMetadata: {
                            type: "bool",
                            id: 9
                          },
                          countGroupByExecutionStatus: {
                            type: "bool",
                            id: 10
                          },
                          nexus: {
                            type: "bool",
                            id: 11
                          }
                        }
                      }
                    }
                  },
                  ListTaskQueuePartitionsRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 2
                      }
                    }
                  },
                  ListTaskQueuePartitionsResponse: {
                    fields: {
                      activityTaskQueuePartitions: {
                        rule: "repeated",
                        type: "temporal.api.taskqueue.v1.TaskQueuePartitionMetadata",
                        id: 1
                      },
                      workflowTaskQueuePartitions: {
                        rule: "repeated",
                        type: "temporal.api.taskqueue.v1.TaskQueuePartitionMetadata",
                        id: 2
                      }
                    }
                  },
                  CreateScheduleRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      scheduleId: {
                        type: "string",
                        id: 2
                      },
                      schedule: {
                        type: "temporal.api.schedule.v1.Schedule",
                        id: 3
                      },
                      initialPatch: {
                        type: "temporal.api.schedule.v1.SchedulePatch",
                        id: 4
                      },
                      identity: {
                        type: "string",
                        id: 5
                      },
                      requestId: {
                        type: "string",
                        id: 6
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 7
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 8
                      }
                    }
                  },
                  CreateScheduleResponse: {
                    fields: {
                      conflictToken: {
                        type: "bytes",
                        id: 1
                      }
                    }
                  },
                  DescribeScheduleRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      scheduleId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  DescribeScheduleResponse: {
                    fields: {
                      schedule: {
                        type: "temporal.api.schedule.v1.Schedule",
                        id: 1
                      },
                      info: {
                        type: "temporal.api.schedule.v1.ScheduleInfo",
                        id: 2
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 3
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 4
                      },
                      conflictToken: {
                        type: "bytes",
                        id: 5
                      }
                    }
                  },
                  UpdateScheduleRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      scheduleId: {
                        type: "string",
                        id: 2
                      },
                      schedule: {
                        type: "temporal.api.schedule.v1.Schedule",
                        id: 3
                      },
                      conflictToken: {
                        type: "bytes",
                        id: 4
                      },
                      identity: {
                        type: "string",
                        id: 5
                      },
                      requestId: {
                        type: "string",
                        id: 6
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 7
                      }
                    }
                  },
                  UpdateScheduleResponse: {
                    fields: {}
                  },
                  PatchScheduleRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      scheduleId: {
                        type: "string",
                        id: 2
                      },
                      patch: {
                        type: "temporal.api.schedule.v1.SchedulePatch",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      },
                      requestId: {
                        type: "string",
                        id: 5
                      }
                    }
                  },
                  PatchScheduleResponse: {
                    fields: {}
                  },
                  ListScheduleMatchingTimesRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      scheduleId: {
                        type: "string",
                        id: 2
                      },
                      startTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3
                      },
                      endTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4
                      }
                    }
                  },
                  ListScheduleMatchingTimesResponse: {
                    fields: {
                      startTime: {
                        rule: "repeated",
                        type: "google.protobuf.Timestamp",
                        id: 1
                      }
                    }
                  },
                  DeleteScheduleRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      scheduleId: {
                        type: "string",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  DeleteScheduleResponse: {
                    fields: {}
                  },
                  ListSchedulesRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      maximumPageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      },
                      query: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  ListSchedulesResponse: {
                    fields: {
                      schedules: {
                        rule: "repeated",
                        type: "temporal.api.schedule.v1.ScheduleListEntry",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  UpdateWorkerBuildIdCompatibilityRequest: {
                    oneofs: {
                      operation: {
                        oneof: [
                          "addNewBuildIdInNewDefaultSet",
                          "addNewCompatibleBuildId",
                          "promoteSetByBuildId",
                          "promoteBuildIdWithinSet",
                          "mergeSets"
                        ]
                      }
                    },
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      taskQueue: {
                        type: "string",
                        id: 2
                      },
                      addNewBuildIdInNewDefaultSet: {
                        type: "string",
                        id: 3
                      },
                      addNewCompatibleBuildId: {
                        type: "AddNewCompatibleVersion",
                        id: 4
                      },
                      promoteSetByBuildId: {
                        type: "string",
                        id: 5
                      },
                      promoteBuildIdWithinSet: {
                        type: "string",
                        id: 6
                      },
                      mergeSets: {
                        type: "MergeSets",
                        id: 7
                      }
                    },
                    nested: {
                      AddNewCompatibleVersion: {
                        fields: {
                          newBuildId: {
                            type: "string",
                            id: 1
                          },
                          existingCompatibleBuildId: {
                            type: "string",
                            id: 2
                          },
                          makeSetDefault: {
                            type: "bool",
                            id: 3
                          }
                        }
                      },
                      MergeSets: {
                        fields: {
                          primarySetBuildId: {
                            type: "string",
                            id: 1
                          },
                          secondarySetBuildId: {
                            type: "string",
                            id: 2
                          }
                        }
                      }
                    }
                  },
                  UpdateWorkerBuildIdCompatibilityResponse: {
                    fields: {},
                    reserved: [
                      [
                        1,
                        1
                      ],
                      "version_set_id"
                    ]
                  },
                  GetWorkerBuildIdCompatibilityRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      taskQueue: {
                        type: "string",
                        id: 2
                      },
                      maxSets: {
                        type: "int32",
                        id: 3
                      }
                    }
                  },
                  GetWorkerBuildIdCompatibilityResponse: {
                    fields: {
                      majorVersionSets: {
                        rule: "repeated",
                        type: "temporal.api.taskqueue.v1.CompatibleVersionSet",
                        id: 1
                      }
                    }
                  },
                  UpdateWorkerVersioningRulesRequest: {
                    oneofs: {
                      operation: {
                        oneof: [
                          "insertAssignmentRule",
                          "replaceAssignmentRule",
                          "deleteAssignmentRule",
                          "addCompatibleRedirectRule",
                          "replaceCompatibleRedirectRule",
                          "deleteCompatibleRedirectRule",
                          "commitBuildId"
                        ]
                      }
                    },
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      taskQueue: {
                        type: "string",
                        id: 2
                      },
                      conflictToken: {
                        type: "bytes",
                        id: 3
                      },
                      insertAssignmentRule: {
                        type: "InsertBuildIdAssignmentRule",
                        id: 4
                      },
                      replaceAssignmentRule: {
                        type: "ReplaceBuildIdAssignmentRule",
                        id: 5
                      },
                      deleteAssignmentRule: {
                        type: "DeleteBuildIdAssignmentRule",
                        id: 6
                      },
                      addCompatibleRedirectRule: {
                        type: "AddCompatibleBuildIdRedirectRule",
                        id: 7
                      },
                      replaceCompatibleRedirectRule: {
                        type: "ReplaceCompatibleBuildIdRedirectRule",
                        id: 8
                      },
                      deleteCompatibleRedirectRule: {
                        type: "DeleteCompatibleBuildIdRedirectRule",
                        id: 9
                      },
                      commitBuildId: {
                        type: "CommitBuildId",
                        id: 10
                      }
                    },
                    nested: {
                      InsertBuildIdAssignmentRule: {
                        fields: {
                          ruleIndex: {
                            type: "int32",
                            id: 1
                          },
                          rule: {
                            type: "temporal.api.taskqueue.v1.BuildIdAssignmentRule",
                            id: 2
                          }
                        }
                      },
                      ReplaceBuildIdAssignmentRule: {
                        fields: {
                          ruleIndex: {
                            type: "int32",
                            id: 1
                          },
                          rule: {
                            type: "temporal.api.taskqueue.v1.BuildIdAssignmentRule",
                            id: 2
                          },
                          force: {
                            type: "bool",
                            id: 3
                          }
                        }
                      },
                      DeleteBuildIdAssignmentRule: {
                        fields: {
                          ruleIndex: {
                            type: "int32",
                            id: 1
                          },
                          force: {
                            type: "bool",
                            id: 2
                          }
                        }
                      },
                      AddCompatibleBuildIdRedirectRule: {
                        fields: {
                          rule: {
                            type: "temporal.api.taskqueue.v1.CompatibleBuildIdRedirectRule",
                            id: 1
                          }
                        }
                      },
                      ReplaceCompatibleBuildIdRedirectRule: {
                        fields: {
                          rule: {
                            type: "temporal.api.taskqueue.v1.CompatibleBuildIdRedirectRule",
                            id: 1
                          }
                        }
                      },
                      DeleteCompatibleBuildIdRedirectRule: {
                        fields: {
                          sourceBuildId: {
                            type: "string",
                            id: 1
                          }
                        }
                      },
                      CommitBuildId: {
                        fields: {
                          targetBuildId: {
                            type: "string",
                            id: 1
                          },
                          force: {
                            type: "bool",
                            id: 2
                          }
                        }
                      }
                    }
                  },
                  UpdateWorkerVersioningRulesResponse: {
                    fields: {
                      assignmentRules: {
                        rule: "repeated",
                        type: "temporal.api.taskqueue.v1.TimestampedBuildIdAssignmentRule",
                        id: 1
                      },
                      compatibleRedirectRules: {
                        rule: "repeated",
                        type: "temporal.api.taskqueue.v1.TimestampedCompatibleBuildIdRedirectRule",
                        id: 2
                      },
                      conflictToken: {
                        type: "bytes",
                        id: 3
                      }
                    }
                  },
                  GetWorkerVersioningRulesRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      taskQueue: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  GetWorkerVersioningRulesResponse: {
                    fields: {
                      assignmentRules: {
                        rule: "repeated",
                        type: "temporal.api.taskqueue.v1.TimestampedBuildIdAssignmentRule",
                        id: 1
                      },
                      compatibleRedirectRules: {
                        rule: "repeated",
                        type: "temporal.api.taskqueue.v1.TimestampedCompatibleBuildIdRedirectRule",
                        id: 2
                      },
                      conflictToken: {
                        type: "bytes",
                        id: 3
                      }
                    }
                  },
                  GetWorkerTaskReachabilityRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      buildIds: {
                        rule: "repeated",
                        type: "string",
                        id: 2
                      },
                      taskQueues: {
                        rule: "repeated",
                        type: "string",
                        id: 3
                      },
                      reachability: {
                        type: "temporal.api.enums.v1.TaskReachability",
                        id: 4
                      }
                    }
                  },
                  GetWorkerTaskReachabilityResponse: {
                    fields: {
                      buildIdReachability: {
                        rule: "repeated",
                        type: "temporal.api.taskqueue.v1.BuildIdReachability",
                        id: 1
                      }
                    }
                  },
                  UpdateWorkflowExecutionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      firstExecutionRunId: {
                        type: "string",
                        id: 3
                      },
                      waitPolicy: {
                        type: "temporal.api.update.v1.WaitPolicy",
                        id: 4
                      },
                      request: {
                        type: "temporal.api.update.v1.Request",
                        id: 5
                      }
                    }
                  },
                  UpdateWorkflowExecutionResponse: {
                    fields: {
                      updateRef: {
                        type: "temporal.api.update.v1.UpdateRef",
                        id: 1
                      },
                      outcome: {
                        type: "temporal.api.update.v1.Outcome",
                        id: 2
                      },
                      stage: {
                        type: "temporal.api.enums.v1.UpdateWorkflowExecutionLifecycleStage",
                        id: 3
                      }
                    }
                  },
                  StartBatchOperationRequest: {
                    oneofs: {
                      operation: {
                        oneof: [
                          "terminationOperation",
                          "signalOperation",
                          "cancellationOperation",
                          "deletionOperation",
                          "resetOperation",
                          "updateWorkflowOptionsOperation",
                          "unpauseActivitiesOperation",
                          "resetActivitiesOperation",
                          "updateActivityOptionsOperation"
                        ]
                      }
                    },
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      visibilityQuery: {
                        type: "string",
                        id: 2
                      },
                      jobId: {
                        type: "string",
                        id: 3
                      },
                      reason: {
                        type: "string",
                        id: 4
                      },
                      executions: {
                        rule: "repeated",
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 5
                      },
                      maxOperationsPerSecond: {
                        type: "float",
                        id: 6
                      },
                      terminationOperation: {
                        type: "temporal.api.batch.v1.BatchOperationTermination",
                        id: 10
                      },
                      signalOperation: {
                        type: "temporal.api.batch.v1.BatchOperationSignal",
                        id: 11
                      },
                      cancellationOperation: {
                        type: "temporal.api.batch.v1.BatchOperationCancellation",
                        id: 12
                      },
                      deletionOperation: {
                        type: "temporal.api.batch.v1.BatchOperationDeletion",
                        id: 13
                      },
                      resetOperation: {
                        type: "temporal.api.batch.v1.BatchOperationReset",
                        id: 14
                      },
                      updateWorkflowOptionsOperation: {
                        type: "temporal.api.batch.v1.BatchOperationUpdateWorkflowExecutionOptions",
                        id: 15
                      },
                      unpauseActivitiesOperation: {
                        type: "temporal.api.batch.v1.BatchOperationUnpauseActivities",
                        id: 16
                      },
                      resetActivitiesOperation: {
                        type: "temporal.api.batch.v1.BatchOperationResetActivities",
                        id: 17
                      },
                      updateActivityOptionsOperation: {
                        type: "temporal.api.batch.v1.BatchOperationUpdateActivityOptions",
                        id: 18
                      }
                    }
                  },
                  StartBatchOperationResponse: {
                    fields: {}
                  },
                  StopBatchOperationRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      jobId: {
                        type: "string",
                        id: 2
                      },
                      reason: {
                        type: "string",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  StopBatchOperationResponse: {
                    fields: {}
                  },
                  DescribeBatchOperationRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      jobId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  DescribeBatchOperationResponse: {
                    fields: {
                      operationType: {
                        type: "temporal.api.enums.v1.BatchOperationType",
                        id: 1
                      },
                      jobId: {
                        type: "string",
                        id: 2
                      },
                      state: {
                        type: "temporal.api.enums.v1.BatchOperationState",
                        id: 3
                      },
                      startTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4
                      },
                      closeTime: {
                        type: "google.protobuf.Timestamp",
                        id: 5
                      },
                      totalOperationCount: {
                        type: "int64",
                        id: 6
                      },
                      completeOperationCount: {
                        type: "int64",
                        id: 7
                      },
                      failureOperationCount: {
                        type: "int64",
                        id: 8
                      },
                      identity: {
                        type: "string",
                        id: 9
                      },
                      reason: {
                        type: "string",
                        id: 10
                      }
                    }
                  },
                  ListBatchOperationsRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      pageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      }
                    }
                  },
                  ListBatchOperationsResponse: {
                    fields: {
                      operationInfo: {
                        rule: "repeated",
                        type: "temporal.api.batch.v1.BatchOperationInfo",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  PollWorkflowExecutionUpdateRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      updateRef: {
                        type: "temporal.api.update.v1.UpdateRef",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      waitPolicy: {
                        type: "temporal.api.update.v1.WaitPolicy",
                        id: 4
                      }
                    }
                  },
                  PollWorkflowExecutionUpdateResponse: {
                    fields: {
                      outcome: {
                        type: "temporal.api.update.v1.Outcome",
                        id: 1
                      },
                      stage: {
                        type: "temporal.api.enums.v1.UpdateWorkflowExecutionLifecycleStage",
                        id: 2
                      },
                      updateRef: {
                        type: "temporal.api.update.v1.UpdateRef",
                        id: 3
                      }
                    }
                  },
                  PollNexusTaskQueueRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 3
                      },
                      workerVersionCapabilities: {
                        type: "temporal.api.common.v1.WorkerVersionCapabilities",
                        id: 4,
                        options: {
                          deprecated: true
                        }
                      },
                      deploymentOptions: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentOptions",
                        id: 6
                      },
                      workerHeartbeat: {
                        rule: "repeated",
                        type: "temporal.api.worker.v1.WorkerHeartbeat",
                        id: 7
                      }
                    }
                  },
                  PollNexusTaskQueueResponse: {
                    fields: {
                      taskToken: {
                        type: "bytes",
                        id: 1
                      },
                      request: {
                        type: "temporal.api.nexus.v1.Request",
                        id: 2
                      },
                      pollerScalingDecision: {
                        type: "temporal.api.taskqueue.v1.PollerScalingDecision",
                        id: 3
                      }
                    }
                  },
                  RespondNexusTaskCompletedRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      },
                      taskToken: {
                        type: "bytes",
                        id: 3
                      },
                      response: {
                        type: "temporal.api.nexus.v1.Response",
                        id: 4
                      }
                    }
                  },
                  RespondNexusTaskCompletedResponse: {
                    fields: {}
                  },
                  RespondNexusTaskFailedRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      },
                      taskToken: {
                        type: "bytes",
                        id: 3
                      },
                      error: {
                        type: "temporal.api.nexus.v1.HandlerError",
                        id: 4
                      }
                    }
                  },
                  RespondNexusTaskFailedResponse: {
                    fields: {}
                  },
                  ExecuteMultiOperationRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      operations: {
                        rule: "repeated",
                        type: "Operation",
                        id: 2
                      }
                    },
                    nested: {
                      Operation: {
                        oneofs: {
                          operation: {
                            oneof: [
                              "startWorkflow",
                              "updateWorkflow"
                            ]
                          }
                        },
                        fields: {
                          startWorkflow: {
                            type: "StartWorkflowExecutionRequest",
                            id: 1
                          },
                          updateWorkflow: {
                            type: "UpdateWorkflowExecutionRequest",
                            id: 2
                          }
                        }
                      }
                    }
                  },
                  ExecuteMultiOperationResponse: {
                    fields: {
                      responses: {
                        rule: "repeated",
                        type: "Response",
                        id: 1
                      }
                    },
                    nested: {
                      Response: {
                        oneofs: {
                          response: {
                            oneof: [
                              "startWorkflow",
                              "updateWorkflow"
                            ]
                          }
                        },
                        fields: {
                          startWorkflow: {
                            type: "StartWorkflowExecutionResponse",
                            id: 1
                          },
                          updateWorkflow: {
                            type: "UpdateWorkflowExecutionResponse",
                            id: 2
                          }
                        }
                      }
                    }
                  },
                  UpdateActivityOptionsRequest: {
                    oneofs: {
                      activity: {
                        oneof: [
                          "id",
                          "type",
                          "matchAll"
                        ]
                      }
                    },
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      activityOptions: {
                        type: "temporal.api.activity.v1.ActivityOptions",
                        id: 4
                      },
                      updateMask: {
                        type: "google.protobuf.FieldMask",
                        id: 5
                      },
                      id: {
                        type: "string",
                        id: 6
                      },
                      type: {
                        type: "string",
                        id: 7
                      },
                      matchAll: {
                        type: "bool",
                        id: 9
                      },
                      restoreOriginal: {
                        type: "bool",
                        id: 8
                      }
                    }
                  },
                  UpdateActivityOptionsResponse: {
                    fields: {
                      activityOptions: {
                        type: "temporal.api.activity.v1.ActivityOptions",
                        id: 1
                      }
                    }
                  },
                  PauseActivityRequest: {
                    oneofs: {
                      activity: {
                        oneof: [
                          "id",
                          "type"
                        ]
                      }
                    },
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      id: {
                        type: "string",
                        id: 4
                      },
                      type: {
                        type: "string",
                        id: 5
                      },
                      reason: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  PauseActivityResponse: {
                    fields: {}
                  },
                  UnpauseActivityRequest: {
                    oneofs: {
                      activity: {
                        oneof: [
                          "id",
                          "type",
                          "unpauseAll"
                        ]
                      }
                    },
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      id: {
                        type: "string",
                        id: 4
                      },
                      type: {
                        type: "string",
                        id: 5
                      },
                      unpauseAll: {
                        type: "bool",
                        id: 6
                      },
                      resetAttempts: {
                        type: "bool",
                        id: 7
                      },
                      resetHeartbeat: {
                        type: "bool",
                        id: 8
                      },
                      jitter: {
                        type: "google.protobuf.Duration",
                        id: 9
                      }
                    }
                  },
                  UnpauseActivityResponse: {
                    fields: {}
                  },
                  ResetActivityRequest: {
                    oneofs: {
                      activity: {
                        oneof: [
                          "id",
                          "type",
                          "matchAll"
                        ]
                      }
                    },
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      id: {
                        type: "string",
                        id: 4
                      },
                      type: {
                        type: "string",
                        id: 5
                      },
                      matchAll: {
                        type: "bool",
                        id: 10
                      },
                      resetHeartbeat: {
                        type: "bool",
                        id: 6
                      },
                      keepPaused: {
                        type: "bool",
                        id: 7
                      },
                      jitter: {
                        type: "google.protobuf.Duration",
                        id: 8
                      },
                      restoreOriginalOptions: {
                        type: "bool",
                        id: 9
                      }
                    }
                  },
                  ResetActivityResponse: {
                    fields: {}
                  },
                  UpdateWorkflowExecutionOptionsRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      workflowExecutionOptions: {
                        type: "temporal.api.workflow.v1.WorkflowExecutionOptions",
                        id: 3
                      },
                      updateMask: {
                        type: "google.protobuf.FieldMask",
                        id: 4
                      }
                    }
                  },
                  UpdateWorkflowExecutionOptionsResponse: {
                    fields: {
                      workflowExecutionOptions: {
                        type: "temporal.api.workflow.v1.WorkflowExecutionOptions",
                        id: 1
                      }
                    }
                  },
                  DescribeDeploymentRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      deployment: {
                        type: "deployment.v1.Deployment",
                        id: 2
                      }
                    }
                  },
                  DescribeDeploymentResponse: {
                    fields: {
                      deploymentInfo: {
                        type: "deployment.v1.DeploymentInfo",
                        id: 1
                      }
                    }
                  },
                  DescribeWorkerDeploymentVersionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      version: {
                        type: "string",
                        id: 2,
                        options: {
                          deprecated: true
                        }
                      },
                      deploymentVersion: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                        id: 3
                      },
                      reportTaskQueueStats: {
                        type: "bool",
                        id: 4
                      }
                    }
                  },
                  DescribeWorkerDeploymentVersionResponse: {
                    fields: {
                      workerDeploymentVersionInfo: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersionInfo",
                        id: 1
                      },
                      versionTaskQueues: {
                        rule: "repeated",
                        type: "VersionTaskQueue",
                        id: 2
                      }
                    },
                    nested: {
                      VersionTaskQueue: {
                        fields: {
                          name: {
                            type: "string",
                            id: 1
                          },
                          type: {
                            type: "temporal.api.enums.v1.TaskQueueType",
                            id: 2
                          },
                          stats: {
                            type: "temporal.api.taskqueue.v1.TaskQueueStats",
                            id: 3
                          },
                          statsByPriorityKey: {
                            keyType: "int32",
                            type: "temporal.api.taskqueue.v1.TaskQueueStats",
                            id: 4
                          }
                        }
                      }
                    }
                  },
                  DescribeWorkerDeploymentRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      deploymentName: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  DescribeWorkerDeploymentResponse: {
                    fields: {
                      conflictToken: {
                        type: "bytes",
                        id: 1
                      },
                      workerDeploymentInfo: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentInfo",
                        id: 2
                      }
                    }
                  },
                  ListDeploymentsRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      pageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      },
                      seriesName: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  ListDeploymentsResponse: {
                    fields: {
                      nextPageToken: {
                        type: "bytes",
                        id: 1
                      },
                      deployments: {
                        rule: "repeated",
                        type: "temporal.api.deployment.v1.DeploymentListInfo",
                        id: 2
                      }
                    }
                  },
                  SetCurrentDeploymentRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      deployment: {
                        type: "temporal.api.deployment.v1.Deployment",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      updateMetadata: {
                        type: "temporal.api.deployment.v1.UpdateDeploymentMetadata",
                        id: 4
                      }
                    }
                  },
                  SetCurrentDeploymentResponse: {
                    fields: {
                      currentDeploymentInfo: {
                        type: "temporal.api.deployment.v1.DeploymentInfo",
                        id: 1
                      },
                      previousDeploymentInfo: {
                        type: "temporal.api.deployment.v1.DeploymentInfo",
                        id: 2
                      }
                    }
                  },
                  SetWorkerDeploymentCurrentVersionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      deploymentName: {
                        type: "string",
                        id: 2
                      },
                      version: {
                        type: "string",
                        id: 3,
                        options: {
                          deprecated: true
                        }
                      },
                      buildId: {
                        type: "string",
                        id: 7
                      },
                      conflictToken: {
                        type: "bytes",
                        id: 4
                      },
                      identity: {
                        type: "string",
                        id: 5
                      },
                      ignoreMissingTaskQueues: {
                        type: "bool",
                        id: 6
                      }
                    }
                  },
                  SetWorkerDeploymentCurrentVersionResponse: {
                    fields: {
                      conflictToken: {
                        type: "bytes",
                        id: 1
                      },
                      previousVersion: {
                        type: "string",
                        id: 2,
                        options: {
                          deprecated: true
                        }
                      },
                      previousDeploymentVersion: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                        id: 3
                      }
                    }
                  },
                  SetWorkerDeploymentRampingVersionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      deploymentName: {
                        type: "string",
                        id: 2
                      },
                      version: {
                        type: "string",
                        id: 3,
                        options: {
                          deprecated: true
                        }
                      },
                      buildId: {
                        type: "string",
                        id: 8
                      },
                      percentage: {
                        type: "float",
                        id: 4
                      },
                      conflictToken: {
                        type: "bytes",
                        id: 5
                      },
                      identity: {
                        type: "string",
                        id: 6
                      },
                      ignoreMissingTaskQueues: {
                        type: "bool",
                        id: 7
                      }
                    }
                  },
                  SetWorkerDeploymentRampingVersionResponse: {
                    fields: {
                      conflictToken: {
                        type: "bytes",
                        id: 1
                      },
                      previousVersion: {
                        type: "string",
                        id: 2,
                        options: {
                          deprecated: true
                        }
                      },
                      previousDeploymentVersion: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                        id: 4
                      },
                      previousPercentage: {
                        type: "float",
                        id: 3
                      }
                    }
                  },
                  ListWorkerDeploymentsRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      pageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      }
                    }
                  },
                  ListWorkerDeploymentsResponse: {
                    fields: {
                      nextPageToken: {
                        type: "bytes",
                        id: 1
                      },
                      workerDeployments: {
                        rule: "repeated",
                        type: "WorkerDeploymentSummary",
                        id: 2
                      }
                    },
                    nested: {
                      WorkerDeploymentSummary: {
                        fields: {
                          name: {
                            type: "string",
                            id: 1
                          },
                          createTime: {
                            type: "google.protobuf.Timestamp",
                            id: 2
                          },
                          routingConfig: {
                            type: "temporal.api.deployment.v1.RoutingConfig",
                            id: 3
                          },
                          latestVersionSummary: {
                            type: "temporal.api.deployment.v1.WorkerDeploymentInfo.WorkerDeploymentVersionSummary",
                            id: 4
                          },
                          currentVersionSummary: {
                            type: "temporal.api.deployment.v1.WorkerDeploymentInfo.WorkerDeploymentVersionSummary",
                            id: 5
                          },
                          rampingVersionSummary: {
                            type: "temporal.api.deployment.v1.WorkerDeploymentInfo.WorkerDeploymentVersionSummary",
                            id: 6
                          }
                        }
                      }
                    }
                  },
                  DeleteWorkerDeploymentVersionRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      version: {
                        type: "string",
                        id: 2,
                        options: {
                          deprecated: true
                        }
                      },
                      deploymentVersion: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                        id: 5
                      },
                      skipDrainage: {
                        type: "bool",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  DeleteWorkerDeploymentVersionResponse: {
                    fields: {}
                  },
                  DeleteWorkerDeploymentRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      deploymentName: {
                        type: "string",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  DeleteWorkerDeploymentResponse: {
                    fields: {}
                  },
                  UpdateWorkerDeploymentVersionMetadataRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      version: {
                        type: "string",
                        id: 2,
                        options: {
                          deprecated: true
                        }
                      },
                      deploymentVersion: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                        id: 5
                      },
                      upsertEntries: {
                        keyType: "string",
                        type: "temporal.api.common.v1.Payload",
                        id: 3
                      },
                      removeEntries: {
                        rule: "repeated",
                        type: "string",
                        id: 4
                      },
                      identity: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  UpdateWorkerDeploymentVersionMetadataResponse: {
                    fields: {
                      metadata: {
                        type: "temporal.api.deployment.v1.VersionMetadata",
                        id: 1
                      }
                    }
                  },
                  GetCurrentDeploymentRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      seriesName: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  GetCurrentDeploymentResponse: {
                    fields: {
                      currentDeploymentInfo: {
                        type: "temporal.api.deployment.v1.DeploymentInfo",
                        id: 1
                      }
                    }
                  },
                  GetDeploymentReachabilityRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      deployment: {
                        type: "temporal.api.deployment.v1.Deployment",
                        id: 2
                      }
                    }
                  },
                  GetDeploymentReachabilityResponse: {
                    fields: {
                      deploymentInfo: {
                        type: "temporal.api.deployment.v1.DeploymentInfo",
                        id: 1
                      },
                      reachability: {
                        type: "enums.v1.DeploymentReachability",
                        id: 2
                      },
                      lastUpdateTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3
                      }
                    }
                  },
                  CreateWorkflowRuleRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      spec: {
                        type: "temporal.api.rules.v1.WorkflowRuleSpec",
                        id: 2
                      },
                      forceScan: {
                        type: "bool",
                        id: 3
                      },
                      requestId: {
                        type: "string",
                        id: 4
                      },
                      identity: {
                        type: "string",
                        id: 5
                      },
                      description: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  CreateWorkflowRuleResponse: {
                    fields: {
                      rule: {
                        type: "temporal.api.rules.v1.WorkflowRule",
                        id: 1
                      },
                      jobId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  DescribeWorkflowRuleRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      ruleId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  DescribeWorkflowRuleResponse: {
                    fields: {
                      rule: {
                        type: "temporal.api.rules.v1.WorkflowRule",
                        id: 1
                      }
                    }
                  },
                  DeleteWorkflowRuleRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      ruleId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  DeleteWorkflowRuleResponse: {
                    fields: {}
                  },
                  ListWorkflowRulesRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  ListWorkflowRulesResponse: {
                    fields: {
                      rules: {
                        rule: "repeated",
                        type: "temporal.api.rules.v1.WorkflowRule",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  TriggerWorkflowRuleRequest: {
                    oneofs: {
                      rule: {
                        oneof: [
                          "id",
                          "spec"
                        ]
                      }
                    },
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      id: {
                        type: "string",
                        id: 4
                      },
                      spec: {
                        type: "temporal.api.rules.v1.WorkflowRuleSpec",
                        id: 5
                      },
                      identity: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  TriggerWorkflowRuleResponse: {
                    fields: {
                      applied: {
                        type: "bool",
                        id: 1
                      }
                    }
                  },
                  RecordWorkerHeartbeatRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      },
                      workerHeartbeat: {
                        rule: "repeated",
                        type: "temporal.api.worker.v1.WorkerHeartbeat",
                        id: 3
                      }
                    }
                  },
                  RecordWorkerHeartbeatResponse: {
                    fields: {}
                  },
                  ListWorkersRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      pageSize: {
                        type: "int32",
                        id: 2
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 3
                      },
                      query: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  ListWorkersResponse: {
                    fields: {
                      workersInfo: {
                        rule: "repeated",
                        type: "temporal.api.worker.v1.WorkerInfo",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  UpdateTaskQueueConfigRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      },
                      taskQueue: {
                        type: "string",
                        id: 3
                      },
                      taskQueueType: {
                        type: "temporal.api.enums.v1.TaskQueueType",
                        id: 4
                      },
                      updateQueueRateLimit: {
                        type: "RateLimitUpdate",
                        id: 5
                      },
                      updateFairnessKeyRateLimitDefault: {
                        type: "RateLimitUpdate",
                        id: 6
                      }
                    },
                    nested: {
                      RateLimitUpdate: {
                        fields: {
                          rateLimit: {
                            type: "temporal.api.taskqueue.v1.RateLimit",
                            id: 1
                          },
                          reason: {
                            type: "string",
                            id: 2
                          }
                        }
                      }
                    }
                  },
                  UpdateTaskQueueConfigResponse: {
                    fields: {
                      config: {
                        type: "temporal.api.taskqueue.v1.TaskQueueConfig",
                        id: 1
                      }
                    }
                  },
                  FetchWorkerConfigRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      },
                      reason: {
                        type: "string",
                        id: 3
                      },
                      selector: {
                        type: "temporal.api.common.v1.WorkerSelector",
                        id: 6
                      }
                    }
                  },
                  FetchWorkerConfigResponse: {
                    fields: {
                      workerConfig: {
                        type: "temporal.api.sdk.v1.WorkerConfig",
                        id: 1
                      }
                    }
                  },
                  UpdateWorkerConfigRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      },
                      reason: {
                        type: "string",
                        id: 3
                      },
                      workerConfig: {
                        type: "temporal.api.sdk.v1.WorkerConfig",
                        id: 4
                      },
                      updateMask: {
                        type: "google.protobuf.FieldMask",
                        id: 5
                      },
                      selector: {
                        type: "temporal.api.common.v1.WorkerSelector",
                        id: 6
                      }
                    }
                  },
                  UpdateWorkerConfigResponse: {
                    oneofs: {
                      response: {
                        oneof: [
                          "workerConfig"
                        ]
                      }
                    },
                    fields: {
                      workerConfig: {
                        type: "temporal.api.sdk.v1.WorkerConfig",
                        id: 1
                      }
                    }
                  },
                  WorkflowService: {
                    methods: {
                      RegisterNamespace: {
                        requestType: "RegisterNamespaceRequest",
                        responseType: "RegisterNamespaceResponse",
                        options: {
                          "(google.api.http).post": "/cluster/namespaces",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/cluster/namespaces",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      DescribeNamespace: {
                        requestType: "DescribeNamespaceRequest",
                        responseType: "DescribeNamespaceResponse",
                        options: {
                          "(google.api.http).get": "/cluster/namespaces/{namespace}",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/cluster/namespaces/{namespace}",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}"
                              }
                            }
                          }
                        ]
                      },
                      ListNamespaces: {
                        requestType: "ListNamespacesRequest",
                        responseType: "ListNamespacesResponse",
                        options: {
                          "(google.api.http).get": "/cluster/namespaces",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/cluster/namespaces",
                              additional_bindings: {
                                get: "/api/v1/namespaces"
                              }
                            }
                          }
                        ]
                      },
                      UpdateNamespace: {
                        requestType: "UpdateNamespaceRequest",
                        responseType: "UpdateNamespaceResponse",
                        options: {
                          "(google.api.http).post": "/cluster/namespaces/{namespace}/update",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/update",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/cluster/namespaces/{namespace}/update",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/update",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      DeprecateNamespace: {
                        requestType: "DeprecateNamespaceRequest",
                        responseType: "DeprecateNamespaceResponse"
                      },
                      StartWorkflowExecution: {
                        requestType: "StartWorkflowExecutionRequest",
                        responseType: "StartWorkflowExecutionResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/workflows/{workflow_id}",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/workflows/{workflow_id}",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/workflows/{workflow_id}",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/workflows/{workflow_id}",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      ExecuteMultiOperation: {
                        requestType: "ExecuteMultiOperationRequest",
                        responseType: "ExecuteMultiOperationResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/workflows/execute-multi-operation",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/workflows/execute-multi-operation",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/workflows/execute-multi-operation",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/workflows/execute-multi-operation",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      GetWorkflowExecutionHistory: {
                        requestType: "GetWorkflowExecutionHistoryRequest",
                        responseType: "GetWorkflowExecutionHistoryResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/workflows/{execution.workflow_id}/history",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/workflows/{execution.workflow_id}/history"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/workflows/{execution.workflow_id}/history",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/workflows/{execution.workflow_id}/history"
                              }
                            }
                          }
                        ]
                      },
                      GetWorkflowExecutionHistoryReverse: {
                        requestType: "GetWorkflowExecutionHistoryReverseRequest",
                        responseType: "GetWorkflowExecutionHistoryReverseResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/workflows/{execution.workflow_id}/history-reverse",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/workflows/{execution.workflow_id}/history-reverse"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/workflows/{execution.workflow_id}/history-reverse",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/workflows/{execution.workflow_id}/history-reverse"
                              }
                            }
                          }
                        ]
                      },
                      PollWorkflowTaskQueue: {
                        requestType: "PollWorkflowTaskQueueRequest",
                        responseType: "PollWorkflowTaskQueueResponse"
                      },
                      RespondWorkflowTaskCompleted: {
                        requestType: "RespondWorkflowTaskCompletedRequest",
                        responseType: "RespondWorkflowTaskCompletedResponse"
                      },
                      RespondWorkflowTaskFailed: {
                        requestType: "RespondWorkflowTaskFailedRequest",
                        responseType: "RespondWorkflowTaskFailedResponse"
                      },
                      PollActivityTaskQueue: {
                        requestType: "PollActivityTaskQueueRequest",
                        responseType: "PollActivityTaskQueueResponse"
                      },
                      RecordActivityTaskHeartbeat: {
                        requestType: "RecordActivityTaskHeartbeatRequest",
                        responseType: "RecordActivityTaskHeartbeatResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/activities/heartbeat",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/activities/heartbeat",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/activities/heartbeat",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/activities/heartbeat",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      RecordActivityTaskHeartbeatById: {
                        requestType: "RecordActivityTaskHeartbeatByIdRequest",
                        responseType: "RecordActivityTaskHeartbeatByIdResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/activities/heartbeat-by-id",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/activities/heartbeat-by-id",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/activities/heartbeat-by-id",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/activities/heartbeat-by-id",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      RespondActivityTaskCompleted: {
                        requestType: "RespondActivityTaskCompletedRequest",
                        responseType: "RespondActivityTaskCompletedResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/activities/complete",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/activities/complete",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/activities/complete",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/activities/complete",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      RespondActivityTaskCompletedById: {
                        requestType: "RespondActivityTaskCompletedByIdRequest",
                        responseType: "RespondActivityTaskCompletedByIdResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/activities/complete-by-id",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/activities/complete-by-id",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/activities/complete-by-id",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/activities/complete-by-id",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      RespondActivityTaskFailed: {
                        requestType: "RespondActivityTaskFailedRequest",
                        responseType: "RespondActivityTaskFailedResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/activities/fail",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/activities/fail",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/activities/fail",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/activities/fail",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      RespondActivityTaskFailedById: {
                        requestType: "RespondActivityTaskFailedByIdRequest",
                        responseType: "RespondActivityTaskFailedByIdResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/activities/fail-by-id",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/activities/fail-by-id",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/activities/fail-by-id",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/activities/fail-by-id",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      RespondActivityTaskCanceled: {
                        requestType: "RespondActivityTaskCanceledRequest",
                        responseType: "RespondActivityTaskCanceledResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/activities/cancel",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/activities/cancel",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/activities/cancel",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/activities/cancel",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      RespondActivityTaskCanceledById: {
                        requestType: "RespondActivityTaskCanceledByIdRequest",
                        responseType: "RespondActivityTaskCanceledByIdResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/activities/cancel-by-id",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/activities/cancel-by-id",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/activities/cancel-by-id",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/activities/cancel-by-id",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      RequestCancelWorkflowExecution: {
                        requestType: "RequestCancelWorkflowExecutionRequest",
                        responseType: "RequestCancelWorkflowExecutionResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/cancel",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/cancel",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/cancel",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/cancel",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      SignalWorkflowExecution: {
                        requestType: "SignalWorkflowExecutionRequest",
                        responseType: "SignalWorkflowExecutionResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/signal/{signal_name}",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/signal/{signal_name}",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/signal/{signal_name}",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/signal/{signal_name}",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      SignalWithStartWorkflowExecution: {
                        requestType: "SignalWithStartWorkflowExecutionRequest",
                        responseType: "SignalWithStartWorkflowExecutionResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/workflows/{workflow_id}/signal-with-start/{signal_name}",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/workflows/{workflow_id}/signal-with-start/{signal_name}",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/workflows/{workflow_id}/signal-with-start/{signal_name}",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/workflows/{workflow_id}/signal-with-start/{signal_name}",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      ResetWorkflowExecution: {
                        requestType: "ResetWorkflowExecutionRequest",
                        responseType: "ResetWorkflowExecutionResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/reset",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/reset",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/reset",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/reset",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      TerminateWorkflowExecution: {
                        requestType: "TerminateWorkflowExecutionRequest",
                        responseType: "TerminateWorkflowExecutionResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/terminate",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/terminate",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/terminate",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/terminate",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      DeleteWorkflowExecution: {
                        requestType: "DeleteWorkflowExecutionRequest",
                        responseType: "DeleteWorkflowExecutionResponse"
                      },
                      ListOpenWorkflowExecutions: {
                        requestType: "ListOpenWorkflowExecutionsRequest",
                        responseType: "ListOpenWorkflowExecutionsResponse"
                      },
                      ListClosedWorkflowExecutions: {
                        requestType: "ListClosedWorkflowExecutionsRequest",
                        responseType: "ListClosedWorkflowExecutionsResponse"
                      },
                      ListWorkflowExecutions: {
                        requestType: "ListWorkflowExecutionsRequest",
                        responseType: "ListWorkflowExecutionsResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/workflows",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/workflows"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/workflows",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/workflows"
                              }
                            }
                          }
                        ]
                      },
                      ListArchivedWorkflowExecutions: {
                        requestType: "ListArchivedWorkflowExecutionsRequest",
                        responseType: "ListArchivedWorkflowExecutionsResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/archived-workflows",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/archived-workflows"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/archived-workflows",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/archived-workflows"
                              }
                            }
                          }
                        ]
                      },
                      ScanWorkflowExecutions: {
                        requestType: "ScanWorkflowExecutionsRequest",
                        responseType: "ScanWorkflowExecutionsResponse"
                      },
                      CountWorkflowExecutions: {
                        requestType: "CountWorkflowExecutionsRequest",
                        responseType: "CountWorkflowExecutionsResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/workflow-count",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/workflow-count"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/workflow-count",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/workflow-count"
                              }
                            }
                          }
                        ]
                      },
                      GetSearchAttributes: {
                        requestType: "GetSearchAttributesRequest",
                        responseType: "GetSearchAttributesResponse"
                      },
                      RespondQueryTaskCompleted: {
                        requestType: "RespondQueryTaskCompletedRequest",
                        responseType: "RespondQueryTaskCompletedResponse"
                      },
                      ResetStickyTaskQueue: {
                        requestType: "ResetStickyTaskQueueRequest",
                        responseType: "ResetStickyTaskQueueResponse"
                      },
                      ShutdownWorker: {
                        requestType: "ShutdownWorkerRequest",
                        responseType: "ShutdownWorkerResponse"
                      },
                      QueryWorkflow: {
                        requestType: "QueryWorkflowRequest",
                        responseType: "QueryWorkflowResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/workflows/{execution.workflow_id}/query/{query.query_type}",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/workflows/{execution.workflow_id}/query/{query.query_type}",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/workflows/{execution.workflow_id}/query/{query.query_type}",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/workflows/{execution.workflow_id}/query/{query.query_type}",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      DescribeWorkflowExecution: {
                        requestType: "DescribeWorkflowExecutionRequest",
                        responseType: "DescribeWorkflowExecutionResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/workflows/{execution.workflow_id}",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/workflows/{execution.workflow_id}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/workflows/{execution.workflow_id}",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/workflows/{execution.workflow_id}"
                              }
                            }
                          }
                        ]
                      },
                      DescribeTaskQueue: {
                        requestType: "DescribeTaskQueueRequest",
                        responseType: "DescribeTaskQueueResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/task-queues/{task_queue.name}",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/task-queues/{task_queue.name}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/task-queues/{task_queue.name}",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/task-queues/{task_queue.name}"
                              }
                            }
                          }
                        ]
                      },
                      GetClusterInfo: {
                        requestType: "GetClusterInfoRequest",
                        responseType: "GetClusterInfoResponse",
                        options: {
                          "(google.api.http).get": "/cluster",
                          "(google.api.http).additional_bindings.get": "/api/v1/cluster-info"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/cluster",
                              additional_bindings: {
                                get: "/api/v1/cluster-info"
                              }
                            }
                          }
                        ]
                      },
                      GetSystemInfo: {
                        requestType: "GetSystemInfoRequest",
                        responseType: "GetSystemInfoResponse",
                        options: {
                          "(google.api.http).get": "/system-info",
                          "(google.api.http).additional_bindings.get": "/api/v1/system-info"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/system-info",
                              additional_bindings: {
                                get: "/api/v1/system-info"
                              }
                            }
                          }
                        ]
                      },
                      ListTaskQueuePartitions: {
                        requestType: "ListTaskQueuePartitionsRequest",
                        responseType: "ListTaskQueuePartitionsResponse"
                      },
                      CreateSchedule: {
                        requestType: "CreateScheduleRequest",
                        responseType: "CreateScheduleResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/schedules/{schedule_id}",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/schedules/{schedule_id}",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/schedules/{schedule_id}",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/schedules/{schedule_id}",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      DescribeSchedule: {
                        requestType: "DescribeScheduleRequest",
                        responseType: "DescribeScheduleResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/schedules/{schedule_id}",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/schedules/{schedule_id}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/schedules/{schedule_id}",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/schedules/{schedule_id}"
                              }
                            }
                          }
                        ]
                      },
                      UpdateSchedule: {
                        requestType: "UpdateScheduleRequest",
                        responseType: "UpdateScheduleResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/schedules/{schedule_id}/update",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/schedules/{schedule_id}/update",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/schedules/{schedule_id}/update",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/schedules/{schedule_id}/update",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      PatchSchedule: {
                        requestType: "PatchScheduleRequest",
                        responseType: "PatchScheduleResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/schedules/{schedule_id}/patch",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/schedules/{schedule_id}/patch",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/schedules/{schedule_id}/patch",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/schedules/{schedule_id}/patch",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      ListScheduleMatchingTimes: {
                        requestType: "ListScheduleMatchingTimesRequest",
                        responseType: "ListScheduleMatchingTimesResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/schedules/{schedule_id}/matching-times",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/schedules/{schedule_id}/matching-times"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/schedules/{schedule_id}/matching-times",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/schedules/{schedule_id}/matching-times"
                              }
                            }
                          }
                        ]
                      },
                      DeleteSchedule: {
                        requestType: "DeleteScheduleRequest",
                        responseType: "DeleteScheduleResponse",
                        options: {
                          "(google.api.http).delete": "/namespaces/{namespace}/schedules/{schedule_id}",
                          "(google.api.http).additional_bindings.delete": "/api/v1/namespaces/{namespace}/schedules/{schedule_id}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              "delete": "/namespaces/{namespace}/schedules/{schedule_id}",
                              additional_bindings: {
                                "delete": "/api/v1/namespaces/{namespace}/schedules/{schedule_id}"
                              }
                            }
                          }
                        ]
                      },
                      ListSchedules: {
                        requestType: "ListSchedulesRequest",
                        responseType: "ListSchedulesResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/schedules",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/schedules"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/schedules",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/schedules"
                              }
                            }
                          }
                        ]
                      },
                      UpdateWorkerBuildIdCompatibility: {
                        requestType: "UpdateWorkerBuildIdCompatibilityRequest",
                        responseType: "UpdateWorkerBuildIdCompatibilityResponse"
                      },
                      GetWorkerBuildIdCompatibility: {
                        requestType: "GetWorkerBuildIdCompatibilityRequest",
                        responseType: "GetWorkerBuildIdCompatibilityResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/task-queues/{task_queue}/worker-build-id-compatibility",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/task-queues/{task_queue}/worker-build-id-compatibility"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/task-queues/{task_queue}/worker-build-id-compatibility",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/task-queues/{task_queue}/worker-build-id-compatibility"
                              }
                            }
                          }
                        ]
                      },
                      UpdateWorkerVersioningRules: {
                        requestType: "UpdateWorkerVersioningRulesRequest",
                        responseType: "UpdateWorkerVersioningRulesResponse"
                      },
                      GetWorkerVersioningRules: {
                        requestType: "GetWorkerVersioningRulesRequest",
                        responseType: "GetWorkerVersioningRulesResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/task-queues/{task_queue}/worker-versioning-rules",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/task-queues/{task_queue}/worker-versioning-rules"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/task-queues/{task_queue}/worker-versioning-rules",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/task-queues/{task_queue}/worker-versioning-rules"
                              }
                            }
                          }
                        ]
                      },
                      GetWorkerTaskReachability: {
                        requestType: "GetWorkerTaskReachabilityRequest",
                        responseType: "GetWorkerTaskReachabilityResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/worker-task-reachability",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/worker-task-reachability"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/worker-task-reachability",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/worker-task-reachability"
                              }
                            }
                          }
                        ]
                      },
                      DescribeDeployment: {
                        requestType: "DescribeDeploymentRequest",
                        responseType: "DescribeDeploymentResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/deployments/{deployment.series_name}/{deployment.build_id}",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/deployments/{deployment.series_name}/{deployment.build_id}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/deployments/{deployment.series_name}/{deployment.build_id}",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/deployments/{deployment.series_name}/{deployment.build_id}"
                              }
                            }
                          }
                        ]
                      },
                      DescribeWorkerDeploymentVersion: {
                        requestType: "DescribeWorkerDeploymentVersionRequest",
                        responseType: "DescribeWorkerDeploymentVersionResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/worker-deployment-versions/{deployment_version.deployment_name}/{deployment_version.build_id}",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/worker-deployment-versions/{deployment_version.deployment_name}/{deployment_version.build_id}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/worker-deployment-versions/{deployment_version.deployment_name}/{deployment_version.build_id}",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/worker-deployment-versions/{deployment_version.deployment_name}/{deployment_version.build_id}"
                              }
                            }
                          }
                        ]
                      },
                      ListDeployments: {
                        requestType: "ListDeploymentsRequest",
                        responseType: "ListDeploymentsResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/deployments",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/deployments"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/deployments",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/deployments"
                              }
                            }
                          }
                        ]
                      },
                      GetDeploymentReachability: {
                        requestType: "GetDeploymentReachabilityRequest",
                        responseType: "GetDeploymentReachabilityResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/deployments/{deployment.series_name}/{deployment.build_id}/reachability",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/deployments/{deployment.series_name}/{deployment.build_id}/reachability"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/deployments/{deployment.series_name}/{deployment.build_id}/reachability",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/deployments/{deployment.series_name}/{deployment.build_id}/reachability"
                              }
                            }
                          }
                        ]
                      },
                      GetCurrentDeployment: {
                        requestType: "GetCurrentDeploymentRequest",
                        responseType: "GetCurrentDeploymentResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/current-deployment/{series_name}",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/current-deployment/{series_name}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/current-deployment/{series_name}",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/current-deployment/{series_name}"
                              }
                            }
                          }
                        ]
                      },
                      SetCurrentDeployment: {
                        requestType: "SetCurrentDeploymentRequest",
                        responseType: "SetCurrentDeploymentResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/current-deployment/{deployment.series_name}",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/current-deployment/{deployment.series_name}",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/current-deployment/{deployment.series_name}",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/current-deployment/{deployment.series_name}",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      SetWorkerDeploymentCurrentVersion: {
                        requestType: "SetWorkerDeploymentCurrentVersionRequest",
                        responseType: "SetWorkerDeploymentCurrentVersionResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/worker-deployments/{deployment_name}/set-current-version",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/worker-deployments/{deployment_name}/set-current-version",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/worker-deployments/{deployment_name}/set-current-version",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/worker-deployments/{deployment_name}/set-current-version",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      DescribeWorkerDeployment: {
                        requestType: "DescribeWorkerDeploymentRequest",
                        responseType: "DescribeWorkerDeploymentResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/worker-deployments/{deployment_name}",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/worker-deployments/{deployment_name}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/worker-deployments/{deployment_name}",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/worker-deployments/{deployment_name}"
                              }
                            }
                          }
                        ]
                      },
                      DeleteWorkerDeployment: {
                        requestType: "DeleteWorkerDeploymentRequest",
                        responseType: "DeleteWorkerDeploymentResponse",
                        options: {
                          "(google.api.http).delete": "/namespaces/{namespace}/worker-deployments/{deployment_name}",
                          "(google.api.http).additional_bindings.delete": "/api/v1/namespaces/{namespace}/worker-deployments/{deployment_name}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              "delete": "/namespaces/{namespace}/worker-deployments/{deployment_name}",
                              additional_bindings: {
                                "delete": "/api/v1/namespaces/{namespace}/worker-deployments/{deployment_name}"
                              }
                            }
                          }
                        ]
                      },
                      DeleteWorkerDeploymentVersion: {
                        requestType: "DeleteWorkerDeploymentVersionRequest",
                        responseType: "DeleteWorkerDeploymentVersionResponse",
                        options: {
                          "(google.api.http).delete": "/namespaces/{namespace}/worker-deployment-versions/{deployment_version.deployment_name}/{deployment_version.build_id}",
                          "(google.api.http).additional_bindings.delete": "/api/v1/namespaces/{namespace}/worker-deployment-versions/{deployment_version.deployment_name}/{deployment_version.build_id}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              "delete": "/namespaces/{namespace}/worker-deployment-versions/{deployment_version.deployment_name}/{deployment_version.build_id}",
                              additional_bindings: {
                                "delete": "/api/v1/namespaces/{namespace}/worker-deployment-versions/{deployment_version.deployment_name}/{deployment_version.build_id}"
                              }
                            }
                          }
                        ]
                      },
                      SetWorkerDeploymentRampingVersion: {
                        requestType: "SetWorkerDeploymentRampingVersionRequest",
                        responseType: "SetWorkerDeploymentRampingVersionResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/worker-deployments/{deployment_name}/set-ramping-version",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/worker-deployments/{deployment_name}/set-ramping-version",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/worker-deployments/{deployment_name}/set-ramping-version",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/worker-deployments/{deployment_name}/set-ramping-version",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      ListWorkerDeployments: {
                        requestType: "ListWorkerDeploymentsRequest",
                        responseType: "ListWorkerDeploymentsResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/worker-deployments",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/worker-deployments"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/worker-deployments",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/worker-deployments"
                              }
                            }
                          }
                        ]
                      },
                      UpdateWorkerDeploymentVersionMetadata: {
                        requestType: "UpdateWorkerDeploymentVersionMetadataRequest",
                        responseType: "UpdateWorkerDeploymentVersionMetadataResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/worker-deployment-versions/{deployment_version.deployment_name}/{deployment_version.build_id}/update-metadata",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/worker-deployment-versions/{deployment_version.deployment_name}/{deployment_version.build_id}/update-metadata",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/worker-deployment-versions/{deployment_version.deployment_name}/{deployment_version.build_id}/update-metadata",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/worker-deployment-versions/{deployment_version.deployment_name}/{deployment_version.build_id}/update-metadata",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      UpdateWorkflowExecution: {
                        requestType: "UpdateWorkflowExecutionRequest",
                        responseType: "UpdateWorkflowExecutionResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/update/{request.input.name}",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/update/{request.input.name}",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/update/{request.input.name}",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/update/{request.input.name}",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      PollWorkflowExecutionUpdate: {
                        requestType: "PollWorkflowExecutionUpdateRequest",
                        responseType: "PollWorkflowExecutionUpdateResponse"
                      },
                      StartBatchOperation: {
                        requestType: "StartBatchOperationRequest",
                        responseType: "StartBatchOperationResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/batch-operations/{job_id}",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/batch-operations/{job_id}",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/batch-operations/{job_id}",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/batch-operations/{job_id}",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      StopBatchOperation: {
                        requestType: "StopBatchOperationRequest",
                        responseType: "StopBatchOperationResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/batch-operations/{job_id}/stop",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/batch-operations/{job_id}/stop",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/batch-operations/{job_id}/stop",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/batch-operations/{job_id}/stop",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      DescribeBatchOperation: {
                        requestType: "DescribeBatchOperationRequest",
                        responseType: "DescribeBatchOperationResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/batch-operations/{job_id}",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/batch-operations/{job_id}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/batch-operations/{job_id}",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/batch-operations/{job_id}"
                              }
                            }
                          }
                        ]
                      },
                      ListBatchOperations: {
                        requestType: "ListBatchOperationsRequest",
                        responseType: "ListBatchOperationsResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/batch-operations",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/batch-operations"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/batch-operations",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/batch-operations"
                              }
                            }
                          }
                        ]
                      },
                      PollNexusTaskQueue: {
                        requestType: "PollNexusTaskQueueRequest",
                        responseType: "PollNexusTaskQueueResponse"
                      },
                      RespondNexusTaskCompleted: {
                        requestType: "RespondNexusTaskCompletedRequest",
                        responseType: "RespondNexusTaskCompletedResponse"
                      },
                      RespondNexusTaskFailed: {
                        requestType: "RespondNexusTaskFailedRequest",
                        responseType: "RespondNexusTaskFailedResponse"
                      },
                      UpdateActivityOptions: {
                        requestType: "UpdateActivityOptionsRequest",
                        responseType: "UpdateActivityOptionsResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/activities/update-options",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/activities/update-options",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/activities/update-options",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/activities/update-options",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      UpdateWorkflowExecutionOptions: {
                        requestType: "UpdateWorkflowExecutionOptionsRequest",
                        responseType: "UpdateWorkflowExecutionOptionsResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/update-options",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/update-options",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/update-options",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/workflows/{workflow_execution.workflow_id}/update-options",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      PauseActivity: {
                        requestType: "PauseActivityRequest",
                        responseType: "PauseActivityResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/activities/pause",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/activities/pause",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/activities/pause",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/activities/pause",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      UnpauseActivity: {
                        requestType: "UnpauseActivityRequest",
                        responseType: "UnpauseActivityResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/activities/unpause",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/activities/unpause",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/activities/unpause",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/activities/unpause",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      ResetActivity: {
                        requestType: "ResetActivityRequest",
                        responseType: "ResetActivityResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/activities/reset",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/activities/reset",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/activities/reset",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/activities/reset",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      CreateWorkflowRule: {
                        requestType: "CreateWorkflowRuleRequest",
                        responseType: "CreateWorkflowRuleResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/workflow-rules",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/workflow-rules",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/workflow-rules",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/workflow-rules",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      DescribeWorkflowRule: {
                        requestType: "DescribeWorkflowRuleRequest",
                        responseType: "DescribeWorkflowRuleResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/workflow-rules/{rule_id}",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/workflow-rules/{rule_id}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/workflow-rules/{rule_id}",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/workflow-rules/{rule_id}"
                              }
                            }
                          }
                        ]
                      },
                      DeleteWorkflowRule: {
                        requestType: "DeleteWorkflowRuleRequest",
                        responseType: "DeleteWorkflowRuleResponse",
                        options: {
                          "(google.api.http).delete": "/namespaces/{namespace}/workflow-rules/{rule_id}",
                          "(google.api.http).additional_bindings.delete": "/api/v1/namespaces/{namespace}/workflow-rules/{rule_id}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              "delete": "/namespaces/{namespace}/workflow-rules/{rule_id}",
                              additional_bindings: {
                                "delete": "/api/v1/namespaces/{namespace}/workflow-rules/{rule_id}"
                              }
                            }
                          }
                        ]
                      },
                      ListWorkflowRules: {
                        requestType: "ListWorkflowRulesRequest",
                        responseType: "ListWorkflowRulesResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/workflow-rules",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/workflow-rules"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/workflow-rules",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/workflow-rules"
                              }
                            }
                          }
                        ]
                      },
                      TriggerWorkflowRule: {
                        requestType: "TriggerWorkflowRuleRequest",
                        responseType: "TriggerWorkflowRuleResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/workflows/{execution.workflow_id}/trigger-rule",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/workflows/{execution.workflow_id}/trigger-rule",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/workflows/{execution.workflow_id}/trigger-rule",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/workflows/{execution.workflow_id}/trigger-rule",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      RecordWorkerHeartbeat: {
                        requestType: "RecordWorkerHeartbeatRequest",
                        responseType: "RecordWorkerHeartbeatResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/workers/heartbeat",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/workers/heartbeat",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/workers/heartbeat",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/workers/heartbeat",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      ListWorkers: {
                        requestType: "ListWorkersRequest",
                        responseType: "ListWorkersResponse",
                        options: {
                          "(google.api.http).get": "/namespaces/{namespace}/workers",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/workers"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/namespaces/{namespace}/workers",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/workers"
                              }
                            }
                          }
                        ]
                      },
                      UpdateTaskQueueConfig: {
                        requestType: "UpdateTaskQueueConfigRequest",
                        responseType: "UpdateTaskQueueConfigResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/task-queues/{task_queue}/update-config",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/task-queues/{task_queue}/update-config",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/task-queues/{task_queue}/update-config",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/task-queues/{task_queue}/update-config",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      FetchWorkerConfig: {
                        requestType: "FetchWorkerConfigRequest",
                        responseType: "FetchWorkerConfigResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/workers/fetch-config",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/workers/fetch-config",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/workers/fetch-config",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/workers/fetch-config",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      UpdateWorkerConfig: {
                        requestType: "UpdateWorkerConfigRequest",
                        responseType: "UpdateWorkerConfigResponse",
                        options: {
                          "(google.api.http).post": "/namespaces/{namespace}/workers/update-config",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/namespaces/{namespace}/workers/update-config",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/namespaces/{namespace}/workers/update-config",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/namespaces/{namespace}/workers/update-config",
                                body: "*"
                              }
                            }
                          }
                        ]
                      }
                    }
                  }
                }
              }
            }
          },
          activity: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/activity/v1;activity",
                  java_package: "io.temporal.api.activity.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Activity::V1",
                  csharp_namespace: "Temporalio.Api.Activity.V1"
                },
                nested: {
                  ActivityOptions: {
                    fields: {
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 1
                      },
                      scheduleToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 2
                      },
                      scheduleToStartTimeout: {
                        type: "google.protobuf.Duration",
                        id: 3
                      },
                      startToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 4
                      },
                      heartbeatTimeout: {
                        type: "google.protobuf.Duration",
                        id: 5
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 6
                      }
                    }
                  }
                }
              }
            }
          },
          taskqueue: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/taskqueue/v1;taskqueue",
                  java_package: "io.temporal.api.taskqueue.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::TaskQueue::V1",
                  csharp_namespace: "Temporalio.Api.TaskQueue.V1"
                },
                nested: {
                  TaskQueue: {
                    fields: {
                      name: {
                        type: "string",
                        id: 1
                      },
                      kind: {
                        type: "temporal.api.enums.v1.TaskQueueKind",
                        id: 2
                      },
                      normalName: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  TaskQueueMetadata: {
                    fields: {
                      maxTasksPerSecond: {
                        type: "google.protobuf.DoubleValue",
                        id: 1
                      }
                    }
                  },
                  TaskQueueVersioningInfo: {
                    fields: {
                      currentDeploymentVersion: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                        id: 7
                      },
                      currentVersion: {
                        type: "string",
                        id: 1,
                        options: {
                          deprecated: true
                        }
                      },
                      rampingDeploymentVersion: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                        id: 9
                      },
                      rampingVersion: {
                        type: "string",
                        id: 2,
                        options: {
                          deprecated: true
                        }
                      },
                      rampingVersionPercentage: {
                        type: "float",
                        id: 3
                      },
                      updateTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4
                      }
                    }
                  },
                  TaskQueueVersionSelection: {
                    fields: {
                      buildIds: {
                        rule: "repeated",
                        type: "string",
                        id: 1
                      },
                      unversioned: {
                        type: "bool",
                        id: 2
                      },
                      allActive: {
                        type: "bool",
                        id: 3
                      }
                    }
                  },
                  TaskQueueVersionInfo: {
                    fields: {
                      typesInfo: {
                        keyType: "int32",
                        type: "TaskQueueTypeInfo",
                        id: 1
                      },
                      taskReachability: {
                        type: "temporal.api.enums.v1.BuildIdTaskReachability",
                        id: 2
                      }
                    }
                  },
                  TaskQueueTypeInfo: {
                    fields: {
                      pollers: {
                        rule: "repeated",
                        type: "PollerInfo",
                        id: 1
                      },
                      stats: {
                        type: "TaskQueueStats",
                        id: 2
                      }
                    }
                  },
                  TaskQueueStats: {
                    fields: {
                      approximateBacklogCount: {
                        type: "int64",
                        id: 1
                      },
                      approximateBacklogAge: {
                        type: "google.protobuf.Duration",
                        id: 2
                      },
                      tasksAddRate: {
                        type: "float",
                        id: 3
                      },
                      tasksDispatchRate: {
                        type: "float",
                        id: 4
                      }
                    }
                  },
                  TaskQueueStatus: {
                    fields: {
                      backlogCountHint: {
                        type: "int64",
                        id: 1
                      },
                      readLevel: {
                        type: "int64",
                        id: 2
                      },
                      ackLevel: {
                        type: "int64",
                        id: 3
                      },
                      ratePerSecond: {
                        type: "double",
                        id: 4
                      },
                      taskIdBlock: {
                        type: "TaskIdBlock",
                        id: 5
                      }
                    }
                  },
                  TaskIdBlock: {
                    fields: {
                      startId: {
                        type: "int64",
                        id: 1
                      },
                      endId: {
                        type: "int64",
                        id: 2
                      }
                    }
                  },
                  TaskQueuePartitionMetadata: {
                    fields: {
                      key: {
                        type: "string",
                        id: 1
                      },
                      ownerHostName: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  PollerInfo: {
                    fields: {
                      lastAccessTime: {
                        type: "google.protobuf.Timestamp",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      },
                      ratePerSecond: {
                        type: "double",
                        id: 3
                      },
                      workerVersionCapabilities: {
                        type: "temporal.api.common.v1.WorkerVersionCapabilities",
                        id: 4,
                        options: {
                          deprecated: true
                        }
                      },
                      deploymentOptions: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentOptions",
                        id: 5
                      }
                    }
                  },
                  StickyExecutionAttributes: {
                    fields: {
                      workerTaskQueue: {
                        type: "TaskQueue",
                        id: 1
                      },
                      scheduleToStartTimeout: {
                        type: "google.protobuf.Duration",
                        id: 2
                      }
                    }
                  },
                  CompatibleVersionSet: {
                    fields: {
                      buildIds: {
                        rule: "repeated",
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  TaskQueueReachability: {
                    fields: {
                      taskQueue: {
                        type: "string",
                        id: 1
                      },
                      reachability: {
                        rule: "repeated",
                        type: "temporal.api.enums.v1.TaskReachability",
                        id: 2
                      }
                    }
                  },
                  BuildIdReachability: {
                    fields: {
                      buildId: {
                        type: "string",
                        id: 1
                      },
                      taskQueueReachability: {
                        rule: "repeated",
                        type: "TaskQueueReachability",
                        id: 2
                      }
                    }
                  },
                  RampByPercentage: {
                    fields: {
                      rampPercentage: {
                        type: "float",
                        id: 1
                      }
                    }
                  },
                  BuildIdAssignmentRule: {
                    oneofs: {
                      ramp: {
                        oneof: [
                          "percentageRamp"
                        ]
                      }
                    },
                    fields: {
                      targetBuildId: {
                        type: "string",
                        id: 1
                      },
                      percentageRamp: {
                        type: "RampByPercentage",
                        id: 3
                      }
                    }
                  },
                  CompatibleBuildIdRedirectRule: {
                    fields: {
                      sourceBuildId: {
                        type: "string",
                        id: 1
                      },
                      targetBuildId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  TimestampedBuildIdAssignmentRule: {
                    fields: {
                      rule: {
                        type: "BuildIdAssignmentRule",
                        id: 1
                      },
                      createTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2
                      }
                    }
                  },
                  TimestampedCompatibleBuildIdRedirectRule: {
                    fields: {
                      rule: {
                        type: "CompatibleBuildIdRedirectRule",
                        id: 1
                      },
                      createTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2
                      }
                    }
                  },
                  PollerScalingDecision: {
                    fields: {
                      pollRequestDeltaSuggestion: {
                        type: "int32",
                        id: 1
                      }
                    }
                  },
                  RateLimit: {
                    fields: {
                      requestsPerSecond: {
                        type: "float",
                        id: 1
                      }
                    }
                  },
                  ConfigMetadata: {
                    fields: {
                      reason: {
                        type: "string",
                        id: 1
                      },
                      updateIdentity: {
                        type: "string",
                        id: 2
                      },
                      updateTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3
                      }
                    }
                  },
                  RateLimitConfig: {
                    fields: {
                      rateLimit: {
                        type: "RateLimit",
                        id: 1
                      },
                      metadata: {
                        type: "ConfigMetadata",
                        id: 2
                      }
                    }
                  },
                  TaskQueueConfig: {
                    fields: {
                      queueRateLimit: {
                        type: "RateLimitConfig",
                        id: 1
                      },
                      fairnessKeysRateLimitDefault: {
                        type: "RateLimitConfig",
                        id: 2
                      }
                    }
                  }
                }
              }
            }
          },
          deployment: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/deployment/v1;deployment",
                  java_package: "io.temporal.api.deployment.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Deployment::V1",
                  csharp_namespace: "Temporalio.Api.Deployment.V1"
                },
                nested: {
                  WorkerDeploymentOptions: {
                    fields: {
                      deploymentName: {
                        type: "string",
                        id: 1
                      },
                      buildId: {
                        type: "string",
                        id: 2
                      },
                      workerVersioningMode: {
                        type: "temporal.api.enums.v1.WorkerVersioningMode",
                        id: 3
                      }
                    }
                  },
                  Deployment: {
                    fields: {
                      seriesName: {
                        type: "string",
                        id: 1
                      },
                      buildId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  DeploymentInfo: {
                    fields: {
                      deployment: {
                        type: "Deployment",
                        id: 1
                      },
                      createTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2
                      },
                      taskQueueInfos: {
                        rule: "repeated",
                        type: "TaskQueueInfo",
                        id: 3
                      },
                      metadata: {
                        keyType: "string",
                        type: "temporal.api.common.v1.Payload",
                        id: 4
                      },
                      isCurrent: {
                        type: "bool",
                        id: 5
                      }
                    },
                    nested: {
                      TaskQueueInfo: {
                        fields: {
                          name: {
                            type: "string",
                            id: 1
                          },
                          type: {
                            type: "temporal.api.enums.v1.TaskQueueType",
                            id: 2
                          },
                          firstPollerTime: {
                            type: "google.protobuf.Timestamp",
                            id: 3
                          }
                        }
                      }
                    }
                  },
                  UpdateDeploymentMetadata: {
                    fields: {
                      upsertEntries: {
                        keyType: "string",
                        type: "temporal.api.common.v1.Payload",
                        id: 1
                      },
                      removeEntries: {
                        rule: "repeated",
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  DeploymentListInfo: {
                    fields: {
                      deployment: {
                        type: "deployment.v1.Deployment",
                        id: 1
                      },
                      createTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2
                      },
                      isCurrent: {
                        type: "bool",
                        id: 3
                      }
                    }
                  },
                  WorkerDeploymentVersionInfo: {
                    fields: {
                      version: {
                        type: "string",
                        id: 1,
                        options: {
                          deprecated: true
                        }
                      },
                      status: {
                        type: "temporal.api.enums.v1.WorkerDeploymentVersionStatus",
                        id: 14
                      },
                      deploymentVersion: {
                        type: "WorkerDeploymentVersion",
                        id: 11
                      },
                      deploymentName: {
                        type: "string",
                        id: 2
                      },
                      createTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3
                      },
                      routingChangedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4
                      },
                      currentSinceTime: {
                        type: "google.protobuf.Timestamp",
                        id: 5
                      },
                      rampingSinceTime: {
                        type: "google.protobuf.Timestamp",
                        id: 6
                      },
                      firstActivationTime: {
                        type: "google.protobuf.Timestamp",
                        id: 12
                      },
                      lastDeactivationTime: {
                        type: "google.protobuf.Timestamp",
                        id: 13
                      },
                      rampPercentage: {
                        type: "float",
                        id: 7
                      },
                      taskQueueInfos: {
                        rule: "repeated",
                        type: "VersionTaskQueueInfo",
                        id: 8
                      },
                      drainageInfo: {
                        type: "VersionDrainageInfo",
                        id: 9
                      },
                      metadata: {
                        type: "VersionMetadata",
                        id: 10
                      }
                    },
                    nested: {
                      VersionTaskQueueInfo: {
                        fields: {
                          name: {
                            type: "string",
                            id: 1
                          },
                          type: {
                            type: "temporal.api.enums.v1.TaskQueueType",
                            id: 2
                          }
                        }
                      }
                    }
                  },
                  VersionDrainageInfo: {
                    fields: {
                      status: {
                        type: "enums.v1.VersionDrainageStatus",
                        id: 1
                      },
                      lastChangedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2
                      },
                      lastCheckedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3
                      }
                    }
                  },
                  WorkerDeploymentInfo: {
                    fields: {
                      name: {
                        type: "string",
                        id: 1
                      },
                      versionSummaries: {
                        rule: "repeated",
                        type: "WorkerDeploymentVersionSummary",
                        id: 2
                      },
                      createTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3
                      },
                      routingConfig: {
                        type: "RoutingConfig",
                        id: 4
                      },
                      lastModifierIdentity: {
                        type: "string",
                        id: 5
                      }
                    },
                    nested: {
                      WorkerDeploymentVersionSummary: {
                        fields: {
                          version: {
                            type: "string",
                            id: 1,
                            options: {
                              deprecated: true
                            }
                          },
                          status: {
                            type: "temporal.api.enums.v1.WorkerDeploymentVersionStatus",
                            id: 11
                          },
                          deploymentVersion: {
                            type: "WorkerDeploymentVersion",
                            id: 4
                          },
                          createTime: {
                            type: "google.protobuf.Timestamp",
                            id: 2
                          },
                          drainageStatus: {
                            type: "enums.v1.VersionDrainageStatus",
                            id: 3
                          },
                          drainageInfo: {
                            type: "VersionDrainageInfo",
                            id: 5
                          },
                          currentSinceTime: {
                            type: "google.protobuf.Timestamp",
                            id: 6
                          },
                          rampingSinceTime: {
                            type: "google.protobuf.Timestamp",
                            id: 7
                          },
                          routingUpdateTime: {
                            type: "google.protobuf.Timestamp",
                            id: 8
                          },
                          firstActivationTime: {
                            type: "google.protobuf.Timestamp",
                            id: 9
                          },
                          lastDeactivationTime: {
                            type: "google.protobuf.Timestamp",
                            id: 10
                          }
                        }
                      }
                    }
                  },
                  WorkerDeploymentVersion: {
                    fields: {
                      buildId: {
                        type: "string",
                        id: 1
                      },
                      deploymentName: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  VersionMetadata: {
                    fields: {
                      entries: {
                        keyType: "string",
                        type: "temporal.api.common.v1.Payload",
                        id: 1
                      }
                    }
                  },
                  RoutingConfig: {
                    fields: {
                      currentDeploymentVersion: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                        id: 7
                      },
                      currentVersion: {
                        type: "string",
                        id: 1,
                        options: {
                          deprecated: true
                        }
                      },
                      rampingDeploymentVersion: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                        id: 9
                      },
                      rampingVersion: {
                        type: "string",
                        id: 2,
                        options: {
                          deprecated: true
                        }
                      },
                      rampingVersionPercentage: {
                        type: "float",
                        id: 3
                      },
                      currentVersionChangedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4
                      },
                      rampingVersionChangedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 5
                      },
                      rampingVersionPercentageChangedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 6
                      }
                    }
                  }
                }
              }
            }
          },
          history: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/history/v1;history",
                  java_package: "io.temporal.api.history.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::History::V1",
                  csharp_namespace: "Temporalio.Api.History.V1"
                },
                nested: {
                  WorkflowExecutionStartedEventAttributes: {
                    fields: {
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 1
                      },
                      parentWorkflowNamespace: {
                        type: "string",
                        id: 2
                      },
                      parentWorkflowNamespaceId: {
                        type: "string",
                        id: 27
                      },
                      parentWorkflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      parentInitiatedEventId: {
                        type: "int64",
                        id: 4
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 5
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 6
                      },
                      workflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 8
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 9
                      },
                      continuedExecutionRunId: {
                        type: "string",
                        id: 10
                      },
                      initiator: {
                        type: "temporal.api.enums.v1.ContinueAsNewInitiator",
                        id: 11
                      },
                      continuedFailure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 12
                      },
                      lastCompletionResult: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 13
                      },
                      originalExecutionRunId: {
                        type: "string",
                        id: 14
                      },
                      identity: {
                        type: "string",
                        id: 15
                      },
                      firstExecutionRunId: {
                        type: "string",
                        id: 16
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 17
                      },
                      attempt: {
                        type: "int32",
                        id: 18
                      },
                      workflowExecutionExpirationTime: {
                        type: "google.protobuf.Timestamp",
                        id: 19
                      },
                      cronSchedule: {
                        type: "string",
                        id: 20
                      },
                      firstWorkflowTaskBackoff: {
                        type: "google.protobuf.Duration",
                        id: 21
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 22
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 23
                      },
                      prevAutoResetPoints: {
                        type: "temporal.api.workflow.v1.ResetPoints",
                        id: 24
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 25
                      },
                      parentInitiatedEventVersion: {
                        type: "int64",
                        id: 26
                      },
                      workflowId: {
                        type: "string",
                        id: 28
                      },
                      sourceVersionStamp: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 29,
                        options: {
                          deprecated: true
                        }
                      },
                      completionCallbacks: {
                        rule: "repeated",
                        type: "temporal.api.common.v1.Callback",
                        id: 30
                      },
                      rootWorkflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 31
                      },
                      inheritedBuildId: {
                        type: "string",
                        id: 32,
                        options: {
                          deprecated: true
                        }
                      },
                      versioningOverride: {
                        type: "temporal.api.workflow.v1.VersioningOverride",
                        id: 33
                      },
                      parentPinnedWorkerDeploymentVersion: {
                        type: "string",
                        id: 34,
                        options: {
                          deprecated: true
                        }
                      },
                      priority: {
                        type: "temporal.api.common.v1.Priority",
                        id: 35
                      },
                      inheritedPinnedVersion: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                        id: 37
                      },
                      eagerExecutionAccepted: {
                        type: "bool",
                        id: 38
                      }
                    },
                    reserved: [
                      [
                        36,
                        36
                      ],
                      "parent_pinned_deployment_version"
                    ]
                  },
                  WorkflowExecutionCompletedEventAttributes: {
                    fields: {
                      result: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 2
                      },
                      newExecutionRunId: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  WorkflowExecutionFailedEventAttributes: {
                    fields: {
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 1
                      },
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 2
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 3
                      },
                      newExecutionRunId: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  WorkflowExecutionTimedOutEventAttributes: {
                    fields: {
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 1
                      },
                      newExecutionRunId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  WorkflowExecutionContinuedAsNewEventAttributes: {
                    fields: {
                      newExecutionRunId: {
                        type: "string",
                        id: 1
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 2
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 3
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 4
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 5
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 6
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 7
                      },
                      backoffStartInterval: {
                        type: "google.protobuf.Duration",
                        id: 8
                      },
                      initiator: {
                        type: "temporal.api.enums.v1.ContinueAsNewInitiator",
                        id: 9
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 10,
                        options: {
                          deprecated: true
                        }
                      },
                      lastCompletionResult: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 11
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 12
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 13
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 14
                      },
                      inheritBuildId: {
                        type: "bool",
                        id: 15,
                        options: {
                          deprecated: true
                        }
                      }
                    }
                  },
                  WorkflowTaskScheduledEventAttributes: {
                    fields: {
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 1
                      },
                      startToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 2
                      },
                      attempt: {
                        type: "int32",
                        id: 3
                      }
                    }
                  },
                  WorkflowTaskStartedEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      },
                      requestId: {
                        type: "string",
                        id: 3
                      },
                      suggestContinueAsNew: {
                        type: "bool",
                        id: 4
                      },
                      historySizeBytes: {
                        type: "int64",
                        id: 5
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 6,
                        options: {
                          deprecated: true
                        }
                      },
                      buildIdRedirectCounter: {
                        type: "int64",
                        id: 7,
                        options: {
                          deprecated: true
                        }
                      }
                    }
                  },
                  WorkflowTaskCompletedEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      startedEventId: {
                        type: "int64",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      binaryChecksum: {
                        type: "string",
                        id: 4,
                        options: {
                          deprecated: true
                        }
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 5,
                        options: {
                          deprecated: true
                        }
                      },
                      sdkMetadata: {
                        type: "temporal.api.sdk.v1.WorkflowTaskCompletedMetadata",
                        id: 6
                      },
                      meteringMetadata: {
                        type: "temporal.api.common.v1.MeteringMetadata",
                        id: 13
                      },
                      deployment: {
                        type: "temporal.api.deployment.v1.Deployment",
                        id: 7,
                        options: {
                          deprecated: true
                        }
                      },
                      versioningBehavior: {
                        type: "temporal.api.enums.v1.VersioningBehavior",
                        id: 8
                      },
                      workerDeploymentVersion: {
                        type: "string",
                        id: 9,
                        options: {
                          deprecated: true
                        }
                      },
                      workerDeploymentName: {
                        type: "string",
                        id: 10
                      },
                      deploymentVersion: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                        id: 11
                      }
                    }
                  },
                  WorkflowTaskTimedOutEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      startedEventId: {
                        type: "int64",
                        id: 2
                      },
                      timeoutType: {
                        type: "temporal.api.enums.v1.TimeoutType",
                        id: 3
                      }
                    }
                  },
                  WorkflowTaskFailedEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      startedEventId: {
                        type: "int64",
                        id: 2
                      },
                      cause: {
                        type: "temporal.api.enums.v1.WorkflowTaskFailedCause",
                        id: 3
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 4
                      },
                      identity: {
                        type: "string",
                        id: 5
                      },
                      baseRunId: {
                        type: "string",
                        id: 6
                      },
                      newRunId: {
                        type: "string",
                        id: 7
                      },
                      forkEventVersion: {
                        type: "int64",
                        id: 8
                      },
                      binaryChecksum: {
                        type: "string",
                        id: 9,
                        options: {
                          deprecated: true
                        }
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 10,
                        options: {
                          deprecated: true
                        }
                      }
                    }
                  },
                  ActivityTaskScheduledEventAttributes: {
                    fields: {
                      activityId: {
                        type: "string",
                        id: 1
                      },
                      activityType: {
                        type: "temporal.api.common.v1.ActivityType",
                        id: 2
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 4
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 5
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 6
                      },
                      scheduleToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7
                      },
                      scheduleToStartTimeout: {
                        type: "google.protobuf.Duration",
                        id: 8
                      },
                      startToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 9
                      },
                      heartbeatTimeout: {
                        type: "google.protobuf.Duration",
                        id: 10
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 11
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 12
                      },
                      useWorkflowBuildId: {
                        type: "bool",
                        id: 13,
                        options: {
                          deprecated: true
                        }
                      },
                      priority: {
                        type: "temporal.api.common.v1.Priority",
                        id: 14
                      }
                    },
                    reserved: [
                      [
                        3,
                        3
                      ]
                    ]
                  },
                  ActivityTaskStartedEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      },
                      requestId: {
                        type: "string",
                        id: 3
                      },
                      attempt: {
                        type: "int32",
                        id: 4
                      },
                      lastFailure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 5
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 6,
                        options: {
                          deprecated: true
                        }
                      },
                      buildIdRedirectCounter: {
                        type: "int64",
                        id: 7,
                        options: {
                          deprecated: true
                        }
                      }
                    }
                  },
                  ActivityTaskCompletedEventAttributes: {
                    fields: {
                      result: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      scheduledEventId: {
                        type: "int64",
                        id: 2
                      },
                      startedEventId: {
                        type: "int64",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 5,
                        options: {
                          deprecated: true
                        }
                      }
                    }
                  },
                  ActivityTaskFailedEventAttributes: {
                    fields: {
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 1
                      },
                      scheduledEventId: {
                        type: "int64",
                        id: 2
                      },
                      startedEventId: {
                        type: "int64",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      },
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 5
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 6,
                        options: {
                          deprecated: true
                        }
                      }
                    }
                  },
                  ActivityTaskTimedOutEventAttributes: {
                    fields: {
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 1
                      },
                      scheduledEventId: {
                        type: "int64",
                        id: 2
                      },
                      startedEventId: {
                        type: "int64",
                        id: 3
                      },
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 4
                      }
                    }
                  },
                  ActivityTaskCancelRequestedEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 2
                      }
                    }
                  },
                  ActivityTaskCanceledEventAttributes: {
                    fields: {
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      latestCancelRequestedEventId: {
                        type: "int64",
                        id: 2
                      },
                      scheduledEventId: {
                        type: "int64",
                        id: 3
                      },
                      startedEventId: {
                        type: "int64",
                        id: 4
                      },
                      identity: {
                        type: "string",
                        id: 5
                      },
                      workerVersion: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 6,
                        options: {
                          deprecated: true
                        }
                      }
                    }
                  },
                  TimerStartedEventAttributes: {
                    fields: {
                      timerId: {
                        type: "string",
                        id: 1
                      },
                      startToFireTimeout: {
                        type: "google.protobuf.Duration",
                        id: 2
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 3
                      }
                    }
                  },
                  TimerFiredEventAttributes: {
                    fields: {
                      timerId: {
                        type: "string",
                        id: 1
                      },
                      startedEventId: {
                        type: "int64",
                        id: 2
                      }
                    }
                  },
                  TimerCanceledEventAttributes: {
                    fields: {
                      timerId: {
                        type: "string",
                        id: 1
                      },
                      startedEventId: {
                        type: "int64",
                        id: 2
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  WorkflowExecutionCancelRequestedEventAttributes: {
                    fields: {
                      cause: {
                        type: "string",
                        id: 1
                      },
                      externalInitiatedEventId: {
                        type: "int64",
                        id: 2
                      },
                      externalWorkflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  WorkflowExecutionCanceledEventAttributes: {
                    fields: {
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 1
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      }
                    }
                  },
                  MarkerRecordedEventAttributes: {
                    fields: {
                      markerName: {
                        type: "string",
                        id: 1
                      },
                      details: {
                        keyType: "string",
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 3
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 4
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 5
                      }
                    }
                  },
                  WorkflowExecutionSignaledEventAttributes: {
                    fields: {
                      signalName: {
                        type: "string",
                        id: 1
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 4
                      },
                      skipGenerateWorkflowTask: {
                        type: "bool",
                        id: 5,
                        options: {
                          deprecated: true
                        }
                      },
                      externalWorkflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 6
                      }
                    }
                  },
                  WorkflowExecutionTerminatedEventAttributes: {
                    fields: {
                      reason: {
                        type: "string",
                        id: 1
                      },
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      identity: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  RequestCancelExternalWorkflowExecutionInitiatedEventAttributes: {
                    fields: {
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      },
                      namespaceId: {
                        type: "string",
                        id: 7
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      control: {
                        type: "string",
                        id: 4,
                        options: {
                          deprecated: true
                        }
                      },
                      childWorkflowOnly: {
                        type: "bool",
                        id: 5
                      },
                      reason: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  RequestCancelExternalWorkflowExecutionFailedEventAttributes: {
                    fields: {
                      cause: {
                        type: "temporal.api.enums.v1.CancelExternalWorkflowExecutionFailedCause",
                        id: 1
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 2
                      },
                      namespace: {
                        type: "string",
                        id: 3
                      },
                      namespaceId: {
                        type: "string",
                        id: 7
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 4
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 5
                      },
                      control: {
                        type: "string",
                        id: 6,
                        options: {
                          deprecated: true
                        }
                      }
                    }
                  },
                  ExternalWorkflowExecutionCancelRequestedEventAttributes: {
                    fields: {
                      initiatedEventId: {
                        type: "int64",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      },
                      namespaceId: {
                        type: "string",
                        id: 4
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      }
                    }
                  },
                  SignalExternalWorkflowExecutionInitiatedEventAttributes: {
                    fields: {
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      },
                      namespaceId: {
                        type: "string",
                        id: 9
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      signalName: {
                        type: "string",
                        id: 4
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      control: {
                        type: "string",
                        id: 6,
                        options: {
                          deprecated: true
                        }
                      },
                      childWorkflowOnly: {
                        type: "bool",
                        id: 7
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 8
                      }
                    }
                  },
                  SignalExternalWorkflowExecutionFailedEventAttributes: {
                    fields: {
                      cause: {
                        type: "temporal.api.enums.v1.SignalExternalWorkflowExecutionFailedCause",
                        id: 1
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 2
                      },
                      namespace: {
                        type: "string",
                        id: 3
                      },
                      namespaceId: {
                        type: "string",
                        id: 7
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 4
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 5
                      },
                      control: {
                        type: "string",
                        id: 6,
                        options: {
                          deprecated: true
                        }
                      }
                    }
                  },
                  ExternalWorkflowExecutionSignaledEventAttributes: {
                    fields: {
                      initiatedEventId: {
                        type: "int64",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      },
                      namespaceId: {
                        type: "string",
                        id: 5
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      control: {
                        type: "string",
                        id: 4,
                        options: {
                          deprecated: true
                        }
                      }
                    }
                  },
                  UpsertWorkflowSearchAttributesEventAttributes: {
                    fields: {
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 1
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 2
                      }
                    }
                  },
                  WorkflowPropertiesModifiedEventAttributes: {
                    fields: {
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 1
                      },
                      upsertedMemo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 2
                      }
                    }
                  },
                  StartChildWorkflowExecutionInitiatedEventAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      namespaceId: {
                        type: "string",
                        id: 18
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 4
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      workflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 6
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 8
                      },
                      parentClosePolicy: {
                        type: "temporal.api.enums.v1.ParentClosePolicy",
                        id: 9
                      },
                      control: {
                        type: "string",
                        id: 10,
                        options: {
                          deprecated: true
                        }
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 11
                      },
                      workflowIdReusePolicy: {
                        type: "temporal.api.enums.v1.WorkflowIdReusePolicy",
                        id: 12
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 13
                      },
                      cronSchedule: {
                        type: "string",
                        id: 14
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 15
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 16
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 17
                      },
                      inheritBuildId: {
                        type: "bool",
                        id: 19,
                        options: {
                          deprecated: true
                        }
                      },
                      priority: {
                        type: "temporal.api.common.v1.Priority",
                        id: 20
                      }
                    }
                  },
                  StartChildWorkflowExecutionFailedEventAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      namespaceId: {
                        type: "string",
                        id: 8
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      cause: {
                        type: "temporal.api.enums.v1.StartChildWorkflowExecutionFailedCause",
                        id: 4
                      },
                      control: {
                        type: "string",
                        id: 5,
                        options: {
                          deprecated: true
                        }
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 6
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 7
                      }
                    }
                  },
                  ChildWorkflowExecutionStartedEventAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      namespaceId: {
                        type: "string",
                        id: 6
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 2
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 4
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 5
                      }
                    }
                  },
                  ChildWorkflowExecutionCompletedEventAttributes: {
                    fields: {
                      result: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      },
                      namespaceId: {
                        type: "string",
                        id: 7
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 4
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 5
                      },
                      startedEventId: {
                        type: "int64",
                        id: 6
                      }
                    }
                  },
                  ChildWorkflowExecutionFailedEventAttributes: {
                    fields: {
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      },
                      namespaceId: {
                        type: "string",
                        id: 8
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 4
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 5
                      },
                      startedEventId: {
                        type: "int64",
                        id: 6
                      },
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 7
                      }
                    }
                  },
                  ChildWorkflowExecutionCanceledEventAttributes: {
                    fields: {
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      },
                      namespaceId: {
                        type: "string",
                        id: 7
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 3
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 4
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 5
                      },
                      startedEventId: {
                        type: "int64",
                        id: 6
                      }
                    }
                  },
                  ChildWorkflowExecutionTimedOutEventAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      namespaceId: {
                        type: "string",
                        id: 7
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 4
                      },
                      startedEventId: {
                        type: "int64",
                        id: 5
                      },
                      retryState: {
                        type: "temporal.api.enums.v1.RetryState",
                        id: 6
                      }
                    }
                  },
                  ChildWorkflowExecutionTerminatedEventAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      namespaceId: {
                        type: "string",
                        id: 6
                      },
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      initiatedEventId: {
                        type: "int64",
                        id: 4
                      },
                      startedEventId: {
                        type: "int64",
                        id: 5
                      }
                    }
                  },
                  WorkflowExecutionOptionsUpdatedEventAttributes: {
                    fields: {
                      versioningOverride: {
                        type: "temporal.api.workflow.v1.VersioningOverride",
                        id: 1
                      },
                      unsetVersioningOverride: {
                        type: "bool",
                        id: 2
                      },
                      attachedRequestId: {
                        type: "string",
                        id: 3
                      },
                      attachedCompletionCallbacks: {
                        rule: "repeated",
                        type: "temporal.api.common.v1.Callback",
                        id: 4
                      }
                    }
                  },
                  WorkflowPropertiesModifiedExternallyEventAttributes: {
                    fields: {
                      newTaskQueue: {
                        type: "string",
                        id: 1
                      },
                      newWorkflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 2
                      },
                      newWorkflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 3
                      },
                      newWorkflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 4
                      },
                      upsertedMemo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 5
                      }
                    }
                  },
                  ActivityPropertiesModifiedExternallyEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      newRetryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 2
                      }
                    }
                  },
                  WorkflowExecutionUpdateAcceptedEventAttributes: {
                    fields: {
                      protocolInstanceId: {
                        type: "string",
                        id: 1
                      },
                      acceptedRequestMessageId: {
                        type: "string",
                        id: 2
                      },
                      acceptedRequestSequencingEventId: {
                        type: "int64",
                        id: 3
                      },
                      acceptedRequest: {
                        type: "temporal.api.update.v1.Request",
                        id: 4
                      }
                    }
                  },
                  WorkflowExecutionUpdateCompletedEventAttributes: {
                    fields: {
                      meta: {
                        type: "temporal.api.update.v1.Meta",
                        id: 1
                      },
                      acceptedEventId: {
                        type: "int64",
                        id: 3
                      },
                      outcome: {
                        type: "temporal.api.update.v1.Outcome",
                        id: 2
                      }
                    }
                  },
                  WorkflowExecutionUpdateRejectedEventAttributes: {
                    fields: {
                      protocolInstanceId: {
                        type: "string",
                        id: 1
                      },
                      rejectedRequestMessageId: {
                        type: "string",
                        id: 2
                      },
                      rejectedRequestSequencingEventId: {
                        type: "int64",
                        id: 3
                      },
                      rejectedRequest: {
                        type: "temporal.api.update.v1.Request",
                        id: 4
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 5
                      }
                    }
                  },
                  WorkflowExecutionUpdateAdmittedEventAttributes: {
                    fields: {
                      request: {
                        type: "temporal.api.update.v1.Request",
                        id: 1
                      },
                      origin: {
                        type: "temporal.api.enums.v1.UpdateAdmittedEventOrigin",
                        id: 2
                      }
                    }
                  },
                  NexusOperationScheduledEventAttributes: {
                    fields: {
                      endpoint: {
                        type: "string",
                        id: 1
                      },
                      service: {
                        type: "string",
                        id: 2
                      },
                      operation: {
                        type: "string",
                        id: 3
                      },
                      input: {
                        type: "temporal.api.common.v1.Payload",
                        id: 4
                      },
                      scheduleToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 5
                      },
                      nexusHeader: {
                        keyType: "string",
                        type: "string",
                        id: 6
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 7
                      },
                      requestId: {
                        type: "string",
                        id: 8
                      },
                      endpointId: {
                        type: "string",
                        id: 9
                      }
                    }
                  },
                  NexusOperationStartedEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      operationId: {
                        type: "string",
                        id: 3,
                        options: {
                          deprecated: true
                        }
                      },
                      requestId: {
                        type: "string",
                        id: 4
                      },
                      operationToken: {
                        type: "string",
                        id: 5
                      }
                    }
                  },
                  NexusOperationCompletedEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      result: {
                        type: "temporal.api.common.v1.Payload",
                        id: 2
                      },
                      requestId: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  NexusOperationFailedEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 2
                      },
                      requestId: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  NexusOperationTimedOutEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 2
                      },
                      requestId: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  NexusOperationCanceledEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 2
                      },
                      requestId: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  NexusOperationCancelRequestedEventAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 2
                      }
                    }
                  },
                  NexusOperationCancelRequestCompletedEventAttributes: {
                    fields: {
                      requestedEventId: {
                        type: "int64",
                        id: 1
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 2
                      },
                      scheduledEventId: {
                        type: "int64",
                        id: 3
                      }
                    }
                  },
                  NexusOperationCancelRequestFailedEventAttributes: {
                    fields: {
                      requestedEventId: {
                        type: "int64",
                        id: 1
                      },
                      workflowTaskCompletedEventId: {
                        type: "int64",
                        id: 2
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 3
                      },
                      scheduledEventId: {
                        type: "int64",
                        id: 4
                      }
                    }
                  },
                  HistoryEvent: {
                    oneofs: {
                      attributes: {
                        oneof: [
                          "workflowExecutionStartedEventAttributes",
                          "workflowExecutionCompletedEventAttributes",
                          "workflowExecutionFailedEventAttributes",
                          "workflowExecutionTimedOutEventAttributes",
                          "workflowTaskScheduledEventAttributes",
                          "workflowTaskStartedEventAttributes",
                          "workflowTaskCompletedEventAttributes",
                          "workflowTaskTimedOutEventAttributes",
                          "workflowTaskFailedEventAttributes",
                          "activityTaskScheduledEventAttributes",
                          "activityTaskStartedEventAttributes",
                          "activityTaskCompletedEventAttributes",
                          "activityTaskFailedEventAttributes",
                          "activityTaskTimedOutEventAttributes",
                          "timerStartedEventAttributes",
                          "timerFiredEventAttributes",
                          "activityTaskCancelRequestedEventAttributes",
                          "activityTaskCanceledEventAttributes",
                          "timerCanceledEventAttributes",
                          "markerRecordedEventAttributes",
                          "workflowExecutionSignaledEventAttributes",
                          "workflowExecutionTerminatedEventAttributes",
                          "workflowExecutionCancelRequestedEventAttributes",
                          "workflowExecutionCanceledEventAttributes",
                          "requestCancelExternalWorkflowExecutionInitiatedEventAttributes",
                          "requestCancelExternalWorkflowExecutionFailedEventAttributes",
                          "externalWorkflowExecutionCancelRequestedEventAttributes",
                          "workflowExecutionContinuedAsNewEventAttributes",
                          "startChildWorkflowExecutionInitiatedEventAttributes",
                          "startChildWorkflowExecutionFailedEventAttributes",
                          "childWorkflowExecutionStartedEventAttributes",
                          "childWorkflowExecutionCompletedEventAttributes",
                          "childWorkflowExecutionFailedEventAttributes",
                          "childWorkflowExecutionCanceledEventAttributes",
                          "childWorkflowExecutionTimedOutEventAttributes",
                          "childWorkflowExecutionTerminatedEventAttributes",
                          "signalExternalWorkflowExecutionInitiatedEventAttributes",
                          "signalExternalWorkflowExecutionFailedEventAttributes",
                          "externalWorkflowExecutionSignaledEventAttributes",
                          "upsertWorkflowSearchAttributesEventAttributes",
                          "workflowExecutionUpdateAcceptedEventAttributes",
                          "workflowExecutionUpdateRejectedEventAttributes",
                          "workflowExecutionUpdateCompletedEventAttributes",
                          "workflowPropertiesModifiedExternallyEventAttributes",
                          "activityPropertiesModifiedExternallyEventAttributes",
                          "workflowPropertiesModifiedEventAttributes",
                          "workflowExecutionUpdateAdmittedEventAttributes",
                          "nexusOperationScheduledEventAttributes",
                          "nexusOperationStartedEventAttributes",
                          "nexusOperationCompletedEventAttributes",
                          "nexusOperationFailedEventAttributes",
                          "nexusOperationCanceledEventAttributes",
                          "nexusOperationTimedOutEventAttributes",
                          "nexusOperationCancelRequestedEventAttributes",
                          "workflowExecutionOptionsUpdatedEventAttributes",
                          "nexusOperationCancelRequestCompletedEventAttributes",
                          "nexusOperationCancelRequestFailedEventAttributes"
                        ]
                      }
                    },
                    fields: {
                      eventId: {
                        type: "int64",
                        id: 1
                      },
                      eventTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2
                      },
                      eventType: {
                        type: "temporal.api.enums.v1.EventType",
                        id: 3
                      },
                      version: {
                        type: "int64",
                        id: 4
                      },
                      taskId: {
                        type: "int64",
                        id: 5
                      },
                      workerMayIgnore: {
                        type: "bool",
                        id: 300
                      },
                      userMetadata: {
                        type: "temporal.api.sdk.v1.UserMetadata",
                        id: 301
                      },
                      links: {
                        rule: "repeated",
                        type: "temporal.api.common.v1.Link",
                        id: 302
                      },
                      workflowExecutionStartedEventAttributes: {
                        type: "WorkflowExecutionStartedEventAttributes",
                        id: 6
                      },
                      workflowExecutionCompletedEventAttributes: {
                        type: "WorkflowExecutionCompletedEventAttributes",
                        id: 7
                      },
                      workflowExecutionFailedEventAttributes: {
                        type: "WorkflowExecutionFailedEventAttributes",
                        id: 8
                      },
                      workflowExecutionTimedOutEventAttributes: {
                        type: "WorkflowExecutionTimedOutEventAttributes",
                        id: 9
                      },
                      workflowTaskScheduledEventAttributes: {
                        type: "WorkflowTaskScheduledEventAttributes",
                        id: 10
                      },
                      workflowTaskStartedEventAttributes: {
                        type: "WorkflowTaskStartedEventAttributes",
                        id: 11
                      },
                      workflowTaskCompletedEventAttributes: {
                        type: "WorkflowTaskCompletedEventAttributes",
                        id: 12
                      },
                      workflowTaskTimedOutEventAttributes: {
                        type: "WorkflowTaskTimedOutEventAttributes",
                        id: 13
                      },
                      workflowTaskFailedEventAttributes: {
                        type: "WorkflowTaskFailedEventAttributes",
                        id: 14
                      },
                      activityTaskScheduledEventAttributes: {
                        type: "ActivityTaskScheduledEventAttributes",
                        id: 15
                      },
                      activityTaskStartedEventAttributes: {
                        type: "ActivityTaskStartedEventAttributes",
                        id: 16
                      },
                      activityTaskCompletedEventAttributes: {
                        type: "ActivityTaskCompletedEventAttributes",
                        id: 17
                      },
                      activityTaskFailedEventAttributes: {
                        type: "ActivityTaskFailedEventAttributes",
                        id: 18
                      },
                      activityTaskTimedOutEventAttributes: {
                        type: "ActivityTaskTimedOutEventAttributes",
                        id: 19
                      },
                      timerStartedEventAttributes: {
                        type: "TimerStartedEventAttributes",
                        id: 20
                      },
                      timerFiredEventAttributes: {
                        type: "TimerFiredEventAttributes",
                        id: 21
                      },
                      activityTaskCancelRequestedEventAttributes: {
                        type: "ActivityTaskCancelRequestedEventAttributes",
                        id: 22
                      },
                      activityTaskCanceledEventAttributes: {
                        type: "ActivityTaskCanceledEventAttributes",
                        id: 23
                      },
                      timerCanceledEventAttributes: {
                        type: "TimerCanceledEventAttributes",
                        id: 24
                      },
                      markerRecordedEventAttributes: {
                        type: "MarkerRecordedEventAttributes",
                        id: 25
                      },
                      workflowExecutionSignaledEventAttributes: {
                        type: "WorkflowExecutionSignaledEventAttributes",
                        id: 26
                      },
                      workflowExecutionTerminatedEventAttributes: {
                        type: "WorkflowExecutionTerminatedEventAttributes",
                        id: 27
                      },
                      workflowExecutionCancelRequestedEventAttributes: {
                        type: "WorkflowExecutionCancelRequestedEventAttributes",
                        id: 28
                      },
                      workflowExecutionCanceledEventAttributes: {
                        type: "WorkflowExecutionCanceledEventAttributes",
                        id: 29
                      },
                      requestCancelExternalWorkflowExecutionInitiatedEventAttributes: {
                        type: "RequestCancelExternalWorkflowExecutionInitiatedEventAttributes",
                        id: 30
                      },
                      requestCancelExternalWorkflowExecutionFailedEventAttributes: {
                        type: "RequestCancelExternalWorkflowExecutionFailedEventAttributes",
                        id: 31
                      },
                      externalWorkflowExecutionCancelRequestedEventAttributes: {
                        type: "ExternalWorkflowExecutionCancelRequestedEventAttributes",
                        id: 32
                      },
                      workflowExecutionContinuedAsNewEventAttributes: {
                        type: "WorkflowExecutionContinuedAsNewEventAttributes",
                        id: 33
                      },
                      startChildWorkflowExecutionInitiatedEventAttributes: {
                        type: "StartChildWorkflowExecutionInitiatedEventAttributes",
                        id: 34
                      },
                      startChildWorkflowExecutionFailedEventAttributes: {
                        type: "StartChildWorkflowExecutionFailedEventAttributes",
                        id: 35
                      },
                      childWorkflowExecutionStartedEventAttributes: {
                        type: "ChildWorkflowExecutionStartedEventAttributes",
                        id: 36
                      },
                      childWorkflowExecutionCompletedEventAttributes: {
                        type: "ChildWorkflowExecutionCompletedEventAttributes",
                        id: 37
                      },
                      childWorkflowExecutionFailedEventAttributes: {
                        type: "ChildWorkflowExecutionFailedEventAttributes",
                        id: 38
                      },
                      childWorkflowExecutionCanceledEventAttributes: {
                        type: "ChildWorkflowExecutionCanceledEventAttributes",
                        id: 39
                      },
                      childWorkflowExecutionTimedOutEventAttributes: {
                        type: "ChildWorkflowExecutionTimedOutEventAttributes",
                        id: 40
                      },
                      childWorkflowExecutionTerminatedEventAttributes: {
                        type: "ChildWorkflowExecutionTerminatedEventAttributes",
                        id: 41
                      },
                      signalExternalWorkflowExecutionInitiatedEventAttributes: {
                        type: "SignalExternalWorkflowExecutionInitiatedEventAttributes",
                        id: 42
                      },
                      signalExternalWorkflowExecutionFailedEventAttributes: {
                        type: "SignalExternalWorkflowExecutionFailedEventAttributes",
                        id: 43
                      },
                      externalWorkflowExecutionSignaledEventAttributes: {
                        type: "ExternalWorkflowExecutionSignaledEventAttributes",
                        id: 44
                      },
                      upsertWorkflowSearchAttributesEventAttributes: {
                        type: "UpsertWorkflowSearchAttributesEventAttributes",
                        id: 45
                      },
                      workflowExecutionUpdateAcceptedEventAttributes: {
                        type: "WorkflowExecutionUpdateAcceptedEventAttributes",
                        id: 46
                      },
                      workflowExecutionUpdateRejectedEventAttributes: {
                        type: "WorkflowExecutionUpdateRejectedEventAttributes",
                        id: 47
                      },
                      workflowExecutionUpdateCompletedEventAttributes: {
                        type: "WorkflowExecutionUpdateCompletedEventAttributes",
                        id: 48
                      },
                      workflowPropertiesModifiedExternallyEventAttributes: {
                        type: "WorkflowPropertiesModifiedExternallyEventAttributes",
                        id: 49
                      },
                      activityPropertiesModifiedExternallyEventAttributes: {
                        type: "ActivityPropertiesModifiedExternallyEventAttributes",
                        id: 50
                      },
                      workflowPropertiesModifiedEventAttributes: {
                        type: "WorkflowPropertiesModifiedEventAttributes",
                        id: 51
                      },
                      workflowExecutionUpdateAdmittedEventAttributes: {
                        type: "WorkflowExecutionUpdateAdmittedEventAttributes",
                        id: 52
                      },
                      nexusOperationScheduledEventAttributes: {
                        type: "NexusOperationScheduledEventAttributes",
                        id: 53
                      },
                      nexusOperationStartedEventAttributes: {
                        type: "NexusOperationStartedEventAttributes",
                        id: 54
                      },
                      nexusOperationCompletedEventAttributes: {
                        type: "NexusOperationCompletedEventAttributes",
                        id: 55
                      },
                      nexusOperationFailedEventAttributes: {
                        type: "NexusOperationFailedEventAttributes",
                        id: 56
                      },
                      nexusOperationCanceledEventAttributes: {
                        type: "NexusOperationCanceledEventAttributes",
                        id: 57
                      },
                      nexusOperationTimedOutEventAttributes: {
                        type: "NexusOperationTimedOutEventAttributes",
                        id: 58
                      },
                      nexusOperationCancelRequestedEventAttributes: {
                        type: "NexusOperationCancelRequestedEventAttributes",
                        id: 59
                      },
                      workflowExecutionOptionsUpdatedEventAttributes: {
                        type: "WorkflowExecutionOptionsUpdatedEventAttributes",
                        id: 60
                      },
                      nexusOperationCancelRequestCompletedEventAttributes: {
                        type: "NexusOperationCancelRequestCompletedEventAttributes",
                        id: 61
                      },
                      nexusOperationCancelRequestFailedEventAttributes: {
                        type: "NexusOperationCancelRequestFailedEventAttributes",
                        id: 62
                      }
                    }
                  },
                  History: {
                    fields: {
                      events: {
                        rule: "repeated",
                        type: "HistoryEvent",
                        id: 1
                      }
                    }
                  }
                }
              }
            }
          },
          workflow: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/workflow/v1;workflow",
                  java_package: "io.temporal.api.workflow.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Workflow::V1",
                  csharp_namespace: "Temporalio.Api.Workflow.V1"
                },
                nested: {
                  WorkflowExecutionInfo: {
                    fields: {
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 1
                      },
                      type: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 2
                      },
                      startTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3
                      },
                      closeTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4
                      },
                      status: {
                        type: "temporal.api.enums.v1.WorkflowExecutionStatus",
                        id: 5
                      },
                      historyLength: {
                        type: "int64",
                        id: 6
                      },
                      parentNamespaceId: {
                        type: "string",
                        id: 7
                      },
                      parentExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 8
                      },
                      executionTime: {
                        type: "google.protobuf.Timestamp",
                        id: 9
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 10
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 11
                      },
                      autoResetPoints: {
                        type: "ResetPoints",
                        id: 12
                      },
                      taskQueue: {
                        type: "string",
                        id: 13
                      },
                      stateTransitionCount: {
                        type: "int64",
                        id: 14
                      },
                      historySizeBytes: {
                        type: "int64",
                        id: 15
                      },
                      mostRecentWorkerVersionStamp: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 16,
                        options: {
                          deprecated: true
                        }
                      },
                      executionDuration: {
                        type: "google.protobuf.Duration",
                        id: 17
                      },
                      rootExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 18
                      },
                      assignedBuildId: {
                        type: "string",
                        id: 19,
                        options: {
                          deprecated: true
                        }
                      },
                      inheritedBuildId: {
                        type: "string",
                        id: 20,
                        options: {
                          deprecated: true
                        }
                      },
                      firstRunId: {
                        type: "string",
                        id: 21
                      },
                      versioningInfo: {
                        type: "WorkflowExecutionVersioningInfo",
                        id: 22
                      },
                      workerDeploymentName: {
                        type: "string",
                        id: 23
                      },
                      priority: {
                        type: "temporal.api.common.v1.Priority",
                        id: 24
                      }
                    }
                  },
                  WorkflowExecutionExtendedInfo: {
                    fields: {
                      executionExpirationTime: {
                        type: "google.protobuf.Timestamp",
                        id: 1
                      },
                      runExpirationTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2
                      },
                      cancelRequested: {
                        type: "bool",
                        id: 3
                      },
                      lastResetTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4
                      },
                      originalStartTime: {
                        type: "google.protobuf.Timestamp",
                        id: 5
                      },
                      resetRunId: {
                        type: "string",
                        id: 6
                      },
                      requestIdInfos: {
                        keyType: "string",
                        type: "RequestIdInfo",
                        id: 7
                      }
                    }
                  },
                  WorkflowExecutionVersioningInfo: {
                    fields: {
                      behavior: {
                        type: "temporal.api.enums.v1.VersioningBehavior",
                        id: 1
                      },
                      deployment: {
                        type: "temporal.api.deployment.v1.Deployment",
                        id: 2,
                        options: {
                          deprecated: true
                        }
                      },
                      version: {
                        type: "string",
                        id: 5,
                        options: {
                          deprecated: true
                        }
                      },
                      deploymentVersion: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                        id: 7
                      },
                      versioningOverride: {
                        type: "VersioningOverride",
                        id: 3
                      },
                      deploymentTransition: {
                        type: "DeploymentTransition",
                        id: 4,
                        options: {
                          deprecated: true
                        }
                      },
                      versionTransition: {
                        type: "DeploymentVersionTransition",
                        id: 6
                      }
                    }
                  },
                  DeploymentTransition: {
                    fields: {
                      deployment: {
                        type: "temporal.api.deployment.v1.Deployment",
                        id: 1
                      }
                    }
                  },
                  DeploymentVersionTransition: {
                    fields: {
                      version: {
                        type: "string",
                        id: 1,
                        options: {
                          deprecated: true
                        }
                      },
                      deploymentVersion: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                        id: 2
                      }
                    }
                  },
                  WorkflowExecutionConfig: {
                    fields: {
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 1
                      },
                      workflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 2
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 3
                      },
                      defaultWorkflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 4
                      },
                      userMetadata: {
                        type: "temporal.api.sdk.v1.UserMetadata",
                        id: 5
                      }
                    }
                  },
                  PendingActivityInfo: {
                    oneofs: {
                      assignedBuildId: {
                        oneof: [
                          "useWorkflowBuildId",
                          "lastIndependentlyAssignedBuildId"
                        ]
                      }
                    },
                    fields: {
                      activityId: {
                        type: "string",
                        id: 1
                      },
                      activityType: {
                        type: "temporal.api.common.v1.ActivityType",
                        id: 2
                      },
                      state: {
                        type: "temporal.api.enums.v1.PendingActivityState",
                        id: 3
                      },
                      heartbeatDetails: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 4
                      },
                      lastHeartbeatTime: {
                        type: "google.protobuf.Timestamp",
                        id: 5
                      },
                      lastStartedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 6
                      },
                      attempt: {
                        type: "int32",
                        id: 7
                      },
                      maximumAttempts: {
                        type: "int32",
                        id: 8
                      },
                      scheduledTime: {
                        type: "google.protobuf.Timestamp",
                        id: 9
                      },
                      expirationTime: {
                        type: "google.protobuf.Timestamp",
                        id: 10
                      },
                      lastFailure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 11
                      },
                      lastWorkerIdentity: {
                        type: "string",
                        id: 12
                      },
                      useWorkflowBuildId: {
                        type: "google.protobuf.Empty",
                        id: 13,
                        options: {
                          deprecated: true
                        }
                      },
                      lastIndependentlyAssignedBuildId: {
                        type: "string",
                        id: 14,
                        options: {
                          deprecated: true
                        }
                      },
                      lastWorkerVersionStamp: {
                        type: "temporal.api.common.v1.WorkerVersionStamp",
                        id: 15,
                        options: {
                          deprecated: true
                        }
                      },
                      currentRetryInterval: {
                        type: "google.protobuf.Duration",
                        id: 16
                      },
                      lastAttemptCompleteTime: {
                        type: "google.protobuf.Timestamp",
                        id: 17
                      },
                      nextAttemptScheduleTime: {
                        type: "google.protobuf.Timestamp",
                        id: 18
                      },
                      paused: {
                        type: "bool",
                        id: 19
                      },
                      lastDeployment: {
                        type: "temporal.api.deployment.v1.Deployment",
                        id: 20,
                        options: {
                          deprecated: true
                        }
                      },
                      lastWorkerDeploymentVersion: {
                        type: "string",
                        id: 21,
                        options: {
                          deprecated: true
                        }
                      },
                      lastDeploymentVersion: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                        id: 25
                      },
                      priority: {
                        type: "temporal.api.common.v1.Priority",
                        id: 22
                      },
                      pauseInfo: {
                        type: "PauseInfo",
                        id: 23
                      },
                      activityOptions: {
                        type: "temporal.api.activity.v1.ActivityOptions",
                        id: 24
                      }
                    },
                    nested: {
                      PauseInfo: {
                        oneofs: {
                          pausedBy: {
                            oneof: [
                              "manual",
                              "rule"
                            ]
                          }
                        },
                        fields: {
                          pauseTime: {
                            type: "google.protobuf.Timestamp",
                            id: 1
                          },
                          manual: {
                            type: "Manual",
                            id: 2
                          },
                          rule: {
                            type: "Rule",
                            id: 4
                          }
                        },
                        nested: {
                          Manual: {
                            fields: {
                              identity: {
                                type: "string",
                                id: 1
                              },
                              reason: {
                                type: "string",
                                id: 2
                              }
                            }
                          },
                          Rule: {
                            fields: {
                              ruleId: {
                                type: "string",
                                id: 1
                              },
                              identity: {
                                type: "string",
                                id: 2
                              },
                              reason: {
                                type: "string",
                                id: 3
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  PendingChildExecutionInfo: {
                    fields: {
                      workflowId: {
                        type: "string",
                        id: 1
                      },
                      runId: {
                        type: "string",
                        id: 2
                      },
                      workflowTypeName: {
                        type: "string",
                        id: 3
                      },
                      initiatedId: {
                        type: "int64",
                        id: 4
                      },
                      parentClosePolicy: {
                        type: "temporal.api.enums.v1.ParentClosePolicy",
                        id: 5
                      }
                    }
                  },
                  PendingWorkflowTaskInfo: {
                    fields: {
                      state: {
                        type: "temporal.api.enums.v1.PendingWorkflowTaskState",
                        id: 1
                      },
                      scheduledTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2
                      },
                      originalScheduledTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3
                      },
                      startedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4
                      },
                      attempt: {
                        type: "int32",
                        id: 5
                      }
                    }
                  },
                  ResetPoints: {
                    fields: {
                      points: {
                        rule: "repeated",
                        type: "ResetPointInfo",
                        id: 1
                      }
                    }
                  },
                  ResetPointInfo: {
                    fields: {
                      buildId: {
                        type: "string",
                        id: 7
                      },
                      binaryChecksum: {
                        type: "string",
                        id: 1,
                        options: {
                          deprecated: true
                        }
                      },
                      runId: {
                        type: "string",
                        id: 2
                      },
                      firstWorkflowTaskCompletedId: {
                        type: "int64",
                        id: 3
                      },
                      createTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4
                      },
                      expireTime: {
                        type: "google.protobuf.Timestamp",
                        id: 5
                      },
                      resettable: {
                        type: "bool",
                        id: 6
                      }
                    }
                  },
                  NewWorkflowExecutionInfo: {
                    fields: {
                      workflowId: {
                        type: "string",
                        id: 1
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 2
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 3
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 4
                      },
                      workflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 5
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 6
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7
                      },
                      workflowIdReusePolicy: {
                        type: "temporal.api.enums.v1.WorkflowIdReusePolicy",
                        id: 8
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 9
                      },
                      cronSchedule: {
                        type: "string",
                        id: 10
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 11
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 12
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 13
                      },
                      userMetadata: {
                        type: "temporal.api.sdk.v1.UserMetadata",
                        id: 14
                      },
                      versioningOverride: {
                        type: "VersioningOverride",
                        id: 15
                      },
                      priority: {
                        type: "temporal.api.common.v1.Priority",
                        id: 16
                      }
                    }
                  },
                  CallbackInfo: {
                    fields: {
                      callback: {
                        type: "temporal.api.common.v1.Callback",
                        id: 1
                      },
                      trigger: {
                        type: "Trigger",
                        id: 2
                      },
                      registrationTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3
                      },
                      state: {
                        type: "temporal.api.enums.v1.CallbackState",
                        id: 4
                      },
                      attempt: {
                        type: "int32",
                        id: 5
                      },
                      lastAttemptCompleteTime: {
                        type: "google.protobuf.Timestamp",
                        id: 6
                      },
                      lastAttemptFailure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 7
                      },
                      nextAttemptScheduleTime: {
                        type: "google.protobuf.Timestamp",
                        id: 8
                      },
                      blockedReason: {
                        type: "string",
                        id: 9
                      }
                    },
                    nested: {
                      WorkflowClosed: {
                        fields: {}
                      },
                      Trigger: {
                        oneofs: {
                          variant: {
                            oneof: [
                              "workflowClosed"
                            ]
                          }
                        },
                        fields: {
                          workflowClosed: {
                            type: "WorkflowClosed",
                            id: 1
                          }
                        }
                      }
                    }
                  },
                  PendingNexusOperationInfo: {
                    fields: {
                      endpoint: {
                        type: "string",
                        id: 1
                      },
                      service: {
                        type: "string",
                        id: 2
                      },
                      operation: {
                        type: "string",
                        id: 3
                      },
                      operationId: {
                        type: "string",
                        id: 4,
                        options: {
                          deprecated: true
                        }
                      },
                      scheduleToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 5
                      },
                      scheduledTime: {
                        type: "google.protobuf.Timestamp",
                        id: 6
                      },
                      state: {
                        type: "temporal.api.enums.v1.PendingNexusOperationState",
                        id: 7
                      },
                      attempt: {
                        type: "int32",
                        id: 8
                      },
                      lastAttemptCompleteTime: {
                        type: "google.protobuf.Timestamp",
                        id: 9
                      },
                      lastAttemptFailure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 10
                      },
                      nextAttemptScheduleTime: {
                        type: "google.protobuf.Timestamp",
                        id: 11
                      },
                      cancellationInfo: {
                        type: "NexusOperationCancellationInfo",
                        id: 12
                      },
                      scheduledEventId: {
                        type: "int64",
                        id: 13
                      },
                      blockedReason: {
                        type: "string",
                        id: 14
                      },
                      operationToken: {
                        type: "string",
                        id: 15
                      }
                    }
                  },
                  NexusOperationCancellationInfo: {
                    fields: {
                      requestedTime: {
                        type: "google.protobuf.Timestamp",
                        id: 1
                      },
                      state: {
                        type: "temporal.api.enums.v1.NexusOperationCancellationState",
                        id: 2
                      },
                      attempt: {
                        type: "int32",
                        id: 3
                      },
                      lastAttemptCompleteTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4
                      },
                      lastAttemptFailure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 5
                      },
                      nextAttemptScheduleTime: {
                        type: "google.protobuf.Timestamp",
                        id: 6
                      },
                      blockedReason: {
                        type: "string",
                        id: 7
                      }
                    }
                  },
                  WorkflowExecutionOptions: {
                    fields: {
                      versioningOverride: {
                        type: "VersioningOverride",
                        id: 1
                      }
                    }
                  },
                  VersioningOverride: {
                    oneofs: {
                      override: {
                        oneof: [
                          "pinned",
                          "autoUpgrade"
                        ]
                      }
                    },
                    fields: {
                      pinned: {
                        type: "PinnedOverride",
                        id: 3
                      },
                      autoUpgrade: {
                        type: "bool",
                        id: 4
                      },
                      behavior: {
                        type: "temporal.api.enums.v1.VersioningBehavior",
                        id: 1,
                        options: {
                          deprecated: true
                        }
                      },
                      deployment: {
                        type: "temporal.api.deployment.v1.Deployment",
                        id: 2,
                        options: {
                          deprecated: true
                        }
                      },
                      pinnedVersion: {
                        type: "string",
                        id: 9,
                        options: {
                          deprecated: true
                        }
                      }
                    },
                    nested: {
                      PinnedOverride: {
                        fields: {
                          behavior: {
                            type: "PinnedOverrideBehavior",
                            id: 1
                          },
                          version: {
                            type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                            id: 2
                          }
                        }
                      },
                      PinnedOverrideBehavior: {
                        values: {
                          PINNED_OVERRIDE_BEHAVIOR_UNSPECIFIED: 0,
                          PINNED_OVERRIDE_BEHAVIOR_PINNED: 1
                        }
                      }
                    }
                  },
                  OnConflictOptions: {
                    fields: {
                      attachRequestId: {
                        type: "bool",
                        id: 1
                      },
                      attachCompletionCallbacks: {
                        type: "bool",
                        id: 2
                      },
                      attachLinks: {
                        type: "bool",
                        id: 3
                      }
                    }
                  },
                  RequestIdInfo: {
                    fields: {
                      eventType: {
                        type: "temporal.api.enums.v1.EventType",
                        id: 1
                      },
                      eventId: {
                        type: "int64",
                        id: 2
                      },
                      buffered: {
                        type: "bool",
                        id: 3
                      }
                    }
                  },
                  PostResetOperation: {
                    oneofs: {
                      variant: {
                        oneof: [
                          "signalWorkflow",
                          "updateWorkflowOptions"
                        ]
                      }
                    },
                    fields: {
                      signalWorkflow: {
                        type: "SignalWorkflow",
                        id: 1
                      },
                      updateWorkflowOptions: {
                        type: "UpdateWorkflowOptions",
                        id: 2
                      }
                    },
                    nested: {
                      SignalWorkflow: {
                        fields: {
                          signalName: {
                            type: "string",
                            id: 1
                          },
                          input: {
                            type: "temporal.api.common.v1.Payloads",
                            id: 2
                          },
                          header: {
                            type: "temporal.api.common.v1.Header",
                            id: 3
                          },
                          links: {
                            rule: "repeated",
                            type: "temporal.api.common.v1.Link",
                            id: 4
                          }
                        }
                      },
                      UpdateWorkflowOptions: {
                        fields: {
                          workflowExecutionOptions: {
                            type: "temporal.api.workflow.v1.WorkflowExecutionOptions",
                            id: 1
                          },
                          updateMask: {
                            type: "google.protobuf.FieldMask",
                            id: 2
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          sdk: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/sdk/v1;sdk",
                  java_package: "io.temporal.api.sdk.v1",
                  java_multiple_files: true,
                  java_outer_classname: "WorkflowMetadataProto",
                  ruby_package: "Temporalio::Api::Sdk::V1",
                  csharp_namespace: "Temporalio.Api.Sdk.V1"
                },
                nested: {
                  UserMetadata: {
                    fields: {
                      summary: {
                        type: "temporal.api.common.v1.Payload",
                        id: 1
                      },
                      details: {
                        type: "temporal.api.common.v1.Payload",
                        id: 2
                      }
                    }
                  },
                  WorkflowTaskCompletedMetadata: {
                    fields: {
                      coreUsedFlags: {
                        rule: "repeated",
                        type: "uint32",
                        id: 1
                      },
                      langUsedFlags: {
                        rule: "repeated",
                        type: "uint32",
                        id: 2
                      },
                      sdkName: {
                        type: "string",
                        id: 3
                      },
                      sdkVersion: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  WorkerConfig: {
                    oneofs: {
                      pollerBehavior: {
                        oneof: [
                          "simplePollerBehavior",
                          "autoscalingPollerBehavior"
                        ]
                      }
                    },
                    fields: {
                      workflowCacheSize: {
                        type: "int32",
                        id: 1
                      },
                      simplePollerBehavior: {
                        type: "SimplePollerBehavior",
                        id: 2
                      },
                      autoscalingPollerBehavior: {
                        type: "AutoscalingPollerBehavior",
                        id: 3
                      }
                    },
                    nested: {
                      SimplePollerBehavior: {
                        fields: {
                          maxPollers: {
                            type: "int32",
                            id: 1
                          }
                        }
                      },
                      AutoscalingPollerBehavior: {
                        fields: {
                          minPollers: {
                            type: "int32",
                            id: 1
                          },
                          maxPollers: {
                            type: "int32",
                            id: 2
                          },
                          initialPollers: {
                            type: "int32",
                            id: 3
                          }
                        }
                      }
                    }
                  },
                  WorkflowMetadata: {
                    fields: {
                      definition: {
                        type: "WorkflowDefinition",
                        id: 1
                      },
                      currentDetails: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  WorkflowDefinition: {
                    fields: {
                      type: {
                        type: "string",
                        id: 1
                      },
                      queryDefinitions: {
                        rule: "repeated",
                        type: "WorkflowInteractionDefinition",
                        id: 2
                      },
                      signalDefinitions: {
                        rule: "repeated",
                        type: "WorkflowInteractionDefinition",
                        id: 3
                      },
                      updateDefinitions: {
                        rule: "repeated",
                        type: "WorkflowInteractionDefinition",
                        id: 4
                      }
                    }
                  },
                  WorkflowInteractionDefinition: {
                    fields: {
                      name: {
                        type: "string",
                        id: 1
                      },
                      description: {
                        type: "string",
                        id: 2
                      }
                    }
                  }
                }
              }
            }
          },
          command: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/command/v1;command",
                  java_package: "io.temporal.api.command.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Command::V1",
                  csharp_namespace: "Temporalio.Api.Command.V1"
                },
                nested: {
                  ScheduleActivityTaskCommandAttributes: {
                    fields: {
                      activityId: {
                        type: "string",
                        id: 1
                      },
                      activityType: {
                        type: "temporal.api.common.v1.ActivityType",
                        id: 2
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 4
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 5
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 6
                      },
                      scheduleToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7
                      },
                      scheduleToStartTimeout: {
                        type: "google.protobuf.Duration",
                        id: 8
                      },
                      startToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 9
                      },
                      heartbeatTimeout: {
                        type: "google.protobuf.Duration",
                        id: 10
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 11
                      },
                      requestEagerExecution: {
                        type: "bool",
                        id: 12
                      },
                      useWorkflowBuildId: {
                        type: "bool",
                        id: 13
                      },
                      priority: {
                        type: "temporal.api.common.v1.Priority",
                        id: 14
                      }
                    },
                    reserved: [
                      [
                        3,
                        3
                      ]
                    ]
                  },
                  RequestCancelActivityTaskCommandAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      }
                    }
                  },
                  StartTimerCommandAttributes: {
                    fields: {
                      timerId: {
                        type: "string",
                        id: 1
                      },
                      startToFireTimeout: {
                        type: "google.protobuf.Duration",
                        id: 2
                      }
                    }
                  },
                  CompleteWorkflowExecutionCommandAttributes: {
                    fields: {
                      result: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      }
                    }
                  },
                  FailWorkflowExecutionCommandAttributes: {
                    fields: {
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 1
                      }
                    }
                  },
                  CancelTimerCommandAttributes: {
                    fields: {
                      timerId: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  CancelWorkflowExecutionCommandAttributes: {
                    fields: {
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      }
                    }
                  },
                  RequestCancelExternalWorkflowExecutionCommandAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      runId: {
                        type: "string",
                        id: 3
                      },
                      control: {
                        type: "string",
                        id: 4,
                        options: {
                          deprecated: true
                        }
                      },
                      childWorkflowOnly: {
                        type: "bool",
                        id: 5
                      },
                      reason: {
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  SignalExternalWorkflowExecutionCommandAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      execution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 2
                      },
                      signalName: {
                        type: "string",
                        id: 3
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 4
                      },
                      control: {
                        type: "string",
                        id: 5,
                        options: {
                          deprecated: true
                        }
                      },
                      childWorkflowOnly: {
                        type: "bool",
                        id: 6
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 7
                      }
                    }
                  },
                  UpsertWorkflowSearchAttributesCommandAttributes: {
                    fields: {
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 1
                      }
                    }
                  },
                  ModifyWorkflowPropertiesCommandAttributes: {
                    fields: {
                      upsertedMemo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 1
                      }
                    }
                  },
                  RecordMarkerCommandAttributes: {
                    fields: {
                      markerName: {
                        type: "string",
                        id: 1
                      },
                      details: {
                        keyType: "string",
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 3
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 4
                      }
                    }
                  },
                  ContinueAsNewWorkflowExecutionCommandAttributes: {
                    fields: {
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 1
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 2
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 3
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 4
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 5
                      },
                      backoffStartInterval: {
                        type: "google.protobuf.Duration",
                        id: 6
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 7
                      },
                      initiator: {
                        type: "temporal.api.enums.v1.ContinueAsNewInitiator",
                        id: 8
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 9
                      },
                      lastCompletionResult: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 10
                      },
                      cronSchedule: {
                        type: "string",
                        id: 11
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 12
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 13
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 14
                      },
                      inheritBuildId: {
                        type: "bool",
                        id: 15,
                        options: {
                          deprecated: true
                        }
                      }
                    }
                  },
                  StartChildWorkflowExecutionCommandAttributes: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      workflowId: {
                        type: "string",
                        id: 2
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 3
                      },
                      taskQueue: {
                        type: "temporal.api.taskqueue.v1.TaskQueue",
                        id: 4
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 5
                      },
                      workflowExecutionTimeout: {
                        type: "google.protobuf.Duration",
                        id: 6
                      },
                      workflowRunTimeout: {
                        type: "google.protobuf.Duration",
                        id: 7
                      },
                      workflowTaskTimeout: {
                        type: "google.protobuf.Duration",
                        id: 8
                      },
                      parentClosePolicy: {
                        type: "temporal.api.enums.v1.ParentClosePolicy",
                        id: 9
                      },
                      control: {
                        type: "string",
                        id: 10
                      },
                      workflowIdReusePolicy: {
                        type: "temporal.api.enums.v1.WorkflowIdReusePolicy",
                        id: 11
                      },
                      retryPolicy: {
                        type: "temporal.api.common.v1.RetryPolicy",
                        id: 12
                      },
                      cronSchedule: {
                        type: "string",
                        id: 13
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 14
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 15
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 16
                      },
                      inheritBuildId: {
                        type: "bool",
                        id: 17,
                        options: {
                          deprecated: true
                        }
                      },
                      priority: {
                        type: "temporal.api.common.v1.Priority",
                        id: 18
                      }
                    }
                  },
                  ProtocolMessageCommandAttributes: {
                    fields: {
                      messageId: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  ScheduleNexusOperationCommandAttributes: {
                    fields: {
                      endpoint: {
                        type: "string",
                        id: 1
                      },
                      service: {
                        type: "string",
                        id: 2
                      },
                      operation: {
                        type: "string",
                        id: 3
                      },
                      input: {
                        type: "temporal.api.common.v1.Payload",
                        id: 4
                      },
                      scheduleToCloseTimeout: {
                        type: "google.protobuf.Duration",
                        id: 5
                      },
                      nexusHeader: {
                        keyType: "string",
                        type: "string",
                        id: 6
                      }
                    }
                  },
                  RequestCancelNexusOperationCommandAttributes: {
                    fields: {
                      scheduledEventId: {
                        type: "int64",
                        id: 1
                      }
                    }
                  },
                  Command: {
                    oneofs: {
                      attributes: {
                        oneof: [
                          "scheduleActivityTaskCommandAttributes",
                          "startTimerCommandAttributes",
                          "completeWorkflowExecutionCommandAttributes",
                          "failWorkflowExecutionCommandAttributes",
                          "requestCancelActivityTaskCommandAttributes",
                          "cancelTimerCommandAttributes",
                          "cancelWorkflowExecutionCommandAttributes",
                          "requestCancelExternalWorkflowExecutionCommandAttributes",
                          "recordMarkerCommandAttributes",
                          "continueAsNewWorkflowExecutionCommandAttributes",
                          "startChildWorkflowExecutionCommandAttributes",
                          "signalExternalWorkflowExecutionCommandAttributes",
                          "upsertWorkflowSearchAttributesCommandAttributes",
                          "protocolMessageCommandAttributes",
                          "modifyWorkflowPropertiesCommandAttributes",
                          "scheduleNexusOperationCommandAttributes",
                          "requestCancelNexusOperationCommandAttributes"
                        ]
                      }
                    },
                    fields: {
                      commandType: {
                        type: "temporal.api.enums.v1.CommandType",
                        id: 1
                      },
                      userMetadata: {
                        type: "temporal.api.sdk.v1.UserMetadata",
                        id: 301
                      },
                      scheduleActivityTaskCommandAttributes: {
                        type: "ScheduleActivityTaskCommandAttributes",
                        id: 2
                      },
                      startTimerCommandAttributes: {
                        type: "StartTimerCommandAttributes",
                        id: 3
                      },
                      completeWorkflowExecutionCommandAttributes: {
                        type: "CompleteWorkflowExecutionCommandAttributes",
                        id: 4
                      },
                      failWorkflowExecutionCommandAttributes: {
                        type: "FailWorkflowExecutionCommandAttributes",
                        id: 5
                      },
                      requestCancelActivityTaskCommandAttributes: {
                        type: "RequestCancelActivityTaskCommandAttributes",
                        id: 6
                      },
                      cancelTimerCommandAttributes: {
                        type: "CancelTimerCommandAttributes",
                        id: 7
                      },
                      cancelWorkflowExecutionCommandAttributes: {
                        type: "CancelWorkflowExecutionCommandAttributes",
                        id: 8
                      },
                      requestCancelExternalWorkflowExecutionCommandAttributes: {
                        type: "RequestCancelExternalWorkflowExecutionCommandAttributes",
                        id: 9
                      },
                      recordMarkerCommandAttributes: {
                        type: "RecordMarkerCommandAttributes",
                        id: 10
                      },
                      continueAsNewWorkflowExecutionCommandAttributes: {
                        type: "ContinueAsNewWorkflowExecutionCommandAttributes",
                        id: 11
                      },
                      startChildWorkflowExecutionCommandAttributes: {
                        type: "StartChildWorkflowExecutionCommandAttributes",
                        id: 12
                      },
                      signalExternalWorkflowExecutionCommandAttributes: {
                        type: "SignalExternalWorkflowExecutionCommandAttributes",
                        id: 13
                      },
                      upsertWorkflowSearchAttributesCommandAttributes: {
                        type: "UpsertWorkflowSearchAttributesCommandAttributes",
                        id: 14
                      },
                      protocolMessageCommandAttributes: {
                        type: "ProtocolMessageCommandAttributes",
                        id: 15
                      },
                      modifyWorkflowPropertiesCommandAttributes: {
                        type: "ModifyWorkflowPropertiesCommandAttributes",
                        id: 17
                      },
                      scheduleNexusOperationCommandAttributes: {
                        type: "ScheduleNexusOperationCommandAttributes",
                        id: 18
                      },
                      requestCancelNexusOperationCommandAttributes: {
                        type: "RequestCancelNexusOperationCommandAttributes",
                        id: 19
                      }
                    }
                  }
                }
              }
            }
          },
          filter: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/filter/v1;filter",
                  java_package: "io.temporal.api.filter.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Filter::V1",
                  csharp_namespace: "Temporalio.Api.Filter.V1"
                },
                nested: {
                  WorkflowExecutionFilter: {
                    fields: {
                      workflowId: {
                        type: "string",
                        id: 1
                      },
                      runId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  WorkflowTypeFilter: {
                    fields: {
                      name: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  StartTimeFilter: {
                    fields: {
                      earliestTime: {
                        type: "google.protobuf.Timestamp",
                        id: 1
                      },
                      latestTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2
                      }
                    }
                  },
                  StatusFilter: {
                    fields: {
                      status: {
                        type: "temporal.api.enums.v1.WorkflowExecutionStatus",
                        id: 1
                      }
                    }
                  }
                }
              }
            }
          },
          protocol: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/protocol/v1;protocol",
                  java_package: "io.temporal.api.protocol.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Protocol::V1",
                  csharp_namespace: "Temporalio.Api.Protocol.V1"
                },
                nested: {
                  Message: {
                    oneofs: {
                      sequencingId: {
                        oneof: [
                          "eventId",
                          "commandIndex"
                        ]
                      }
                    },
                    fields: {
                      id: {
                        type: "string",
                        id: 1
                      },
                      protocolInstanceId: {
                        type: "string",
                        id: 2
                      },
                      eventId: {
                        type: "int64",
                        id: 3
                      },
                      commandIndex: {
                        type: "int64",
                        id: 4
                      },
                      body: {
                        type: "google.protobuf.Any",
                        id: 5
                      }
                    }
                  }
                }
              }
            }
          },
          namespace: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/namespace/v1;namespace",
                  java_package: "io.temporal.api.namespace.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Namespace::V1",
                  csharp_namespace: "Temporalio.Api.Namespace.V1"
                },
                nested: {
                  NamespaceInfo: {
                    fields: {
                      name: {
                        type: "string",
                        id: 1
                      },
                      state: {
                        type: "temporal.api.enums.v1.NamespaceState",
                        id: 2
                      },
                      description: {
                        type: "string",
                        id: 3
                      },
                      ownerEmail: {
                        type: "string",
                        id: 4
                      },
                      data: {
                        keyType: "string",
                        type: "string",
                        id: 5
                      },
                      id: {
                        type: "string",
                        id: 6
                      },
                      capabilities: {
                        type: "Capabilities",
                        id: 7
                      },
                      supportsSchedules: {
                        type: "bool",
                        id: 100
                      }
                    },
                    nested: {
                      Capabilities: {
                        fields: {
                          eagerWorkflowStart: {
                            type: "bool",
                            id: 1
                          },
                          syncUpdate: {
                            type: "bool",
                            id: 2
                          },
                          asyncUpdate: {
                            type: "bool",
                            id: 3
                          }
                        }
                      }
                    }
                  },
                  NamespaceConfig: {
                    fields: {
                      workflowExecutionRetentionTtl: {
                        type: "google.protobuf.Duration",
                        id: 1
                      },
                      badBinaries: {
                        type: "BadBinaries",
                        id: 2
                      },
                      historyArchivalState: {
                        type: "temporal.api.enums.v1.ArchivalState",
                        id: 3
                      },
                      historyArchivalUri: {
                        type: "string",
                        id: 4
                      },
                      visibilityArchivalState: {
                        type: "temporal.api.enums.v1.ArchivalState",
                        id: 5
                      },
                      visibilityArchivalUri: {
                        type: "string",
                        id: 6
                      },
                      customSearchAttributeAliases: {
                        keyType: "string",
                        type: "string",
                        id: 7
                      }
                    }
                  },
                  BadBinaries: {
                    fields: {
                      binaries: {
                        keyType: "string",
                        type: "BadBinaryInfo",
                        id: 1
                      }
                    }
                  },
                  BadBinaryInfo: {
                    fields: {
                      reason: {
                        type: "string",
                        id: 1
                      },
                      operator: {
                        type: "string",
                        id: 2
                      },
                      createTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3
                      }
                    }
                  },
                  UpdateNamespaceInfo: {
                    fields: {
                      description: {
                        type: "string",
                        id: 1
                      },
                      ownerEmail: {
                        type: "string",
                        id: 2
                      },
                      data: {
                        keyType: "string",
                        type: "string",
                        id: 3
                      },
                      state: {
                        type: "temporal.api.enums.v1.NamespaceState",
                        id: 4
                      }
                    }
                  },
                  NamespaceFilter: {
                    fields: {
                      includeDeleted: {
                        type: "bool",
                        id: 1
                      }
                    }
                  }
                }
              }
            }
          },
          query: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/query/v1;query",
                  java_package: "io.temporal.api.query.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Query::V1",
                  csharp_namespace: "Temporalio.Api.Query.V1"
                },
                nested: {
                  WorkflowQuery: {
                    fields: {
                      queryType: {
                        type: "string",
                        id: 1
                      },
                      queryArgs: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 3
                      }
                    }
                  },
                  WorkflowQueryResult: {
                    fields: {
                      resultType: {
                        type: "temporal.api.enums.v1.QueryResultType",
                        id: 1
                      },
                      answer: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      errorMessage: {
                        type: "string",
                        id: 3
                      },
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 4
                      }
                    }
                  },
                  QueryRejected: {
                    fields: {
                      status: {
                        type: "temporal.api.enums.v1.WorkflowExecutionStatus",
                        id: 1
                      }
                    }
                  }
                }
              }
            }
          },
          replication: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/replication/v1;replication",
                  java_package: "io.temporal.api.replication.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Replication::V1",
                  csharp_namespace: "Temporalio.Api.Replication.V1"
                },
                nested: {
                  ClusterReplicationConfig: {
                    fields: {
                      clusterName: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  NamespaceReplicationConfig: {
                    fields: {
                      activeClusterName: {
                        type: "string",
                        id: 1
                      },
                      clusters: {
                        rule: "repeated",
                        type: "ClusterReplicationConfig",
                        id: 2
                      },
                      state: {
                        type: "temporal.api.enums.v1.ReplicationState",
                        id: 3
                      }
                    }
                  },
                  FailoverStatus: {
                    fields: {
                      failoverTime: {
                        type: "google.protobuf.Timestamp",
                        id: 1
                      },
                      failoverVersion: {
                        type: "int64",
                        id: 2
                      }
                    }
                  }
                }
              }
            }
          },
          rules: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/rules/v1;rules",
                  java_package: "io.temporal.api.rules.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Rules::V1",
                  csharp_namespace: "Temporalio.Api.Rules.V1"
                },
                nested: {
                  WorkflowRuleAction: {
                    oneofs: {
                      variant: {
                        oneof: [
                          "activityPause"
                        ]
                      }
                    },
                    fields: {
                      activityPause: {
                        type: "ActionActivityPause",
                        id: 1
                      }
                    },
                    nested: {
                      ActionActivityPause: {
                        fields: {}
                      }
                    }
                  },
                  WorkflowRuleSpec: {
                    oneofs: {
                      trigger: {
                        oneof: [
                          "activityStart"
                        ]
                      }
                    },
                    fields: {
                      id: {
                        type: "string",
                        id: 1
                      },
                      activityStart: {
                        type: "ActivityStartingTrigger",
                        id: 2
                      },
                      visibilityQuery: {
                        type: "string",
                        id: 3
                      },
                      actions: {
                        rule: "repeated",
                        type: "WorkflowRuleAction",
                        id: 4
                      },
                      expirationTime: {
                        type: "google.protobuf.Timestamp",
                        id: 5
                      }
                    },
                    nested: {
                      ActivityStartingTrigger: {
                        fields: {
                          predicate: {
                            type: "string",
                            id: 1
                          }
                        }
                      }
                    }
                  },
                  WorkflowRule: {
                    fields: {
                      createTime: {
                        type: "google.protobuf.Timestamp",
                        id: 1
                      },
                      spec: {
                        type: "WorkflowRuleSpec",
                        id: 2
                      },
                      createdByIdentity: {
                        type: "string",
                        id: 3
                      },
                      description: {
                        type: "string",
                        id: 4
                      }
                    }
                  }
                }
              }
            }
          },
          schedule: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/schedule/v1;schedule",
                  java_package: "io.temporal.api.schedule.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Schedule::V1",
                  csharp_namespace: "Temporalio.Api.Schedule.V1"
                },
                nested: {
                  CalendarSpec: {
                    fields: {
                      second: {
                        type: "string",
                        id: 1
                      },
                      minute: {
                        type: "string",
                        id: 2
                      },
                      hour: {
                        type: "string",
                        id: 3
                      },
                      dayOfMonth: {
                        type: "string",
                        id: 4
                      },
                      month: {
                        type: "string",
                        id: 5
                      },
                      year: {
                        type: "string",
                        id: 6
                      },
                      dayOfWeek: {
                        type: "string",
                        id: 7
                      },
                      comment: {
                        type: "string",
                        id: 8
                      }
                    }
                  },
                  Range: {
                    fields: {
                      start: {
                        type: "int32",
                        id: 1
                      },
                      end: {
                        type: "int32",
                        id: 2
                      },
                      step: {
                        type: "int32",
                        id: 3
                      }
                    }
                  },
                  StructuredCalendarSpec: {
                    fields: {
                      second: {
                        rule: "repeated",
                        type: "Range",
                        id: 1
                      },
                      minute: {
                        rule: "repeated",
                        type: "Range",
                        id: 2
                      },
                      hour: {
                        rule: "repeated",
                        type: "Range",
                        id: 3
                      },
                      dayOfMonth: {
                        rule: "repeated",
                        type: "Range",
                        id: 4
                      },
                      month: {
                        rule: "repeated",
                        type: "Range",
                        id: 5
                      },
                      year: {
                        rule: "repeated",
                        type: "Range",
                        id: 6
                      },
                      dayOfWeek: {
                        rule: "repeated",
                        type: "Range",
                        id: 7
                      },
                      comment: {
                        type: "string",
                        id: 8
                      }
                    }
                  },
                  IntervalSpec: {
                    fields: {
                      interval: {
                        type: "google.protobuf.Duration",
                        id: 1
                      },
                      phase: {
                        type: "google.protobuf.Duration",
                        id: 2
                      }
                    }
                  },
                  ScheduleSpec: {
                    fields: {
                      structuredCalendar: {
                        rule: "repeated",
                        type: "StructuredCalendarSpec",
                        id: 7
                      },
                      cronString: {
                        rule: "repeated",
                        type: "string",
                        id: 8
                      },
                      calendar: {
                        rule: "repeated",
                        type: "CalendarSpec",
                        id: 1
                      },
                      interval: {
                        rule: "repeated",
                        type: "IntervalSpec",
                        id: 2
                      },
                      excludeCalendar: {
                        rule: "repeated",
                        type: "CalendarSpec",
                        id: 3,
                        options: {
                          deprecated: true
                        }
                      },
                      excludeStructuredCalendar: {
                        rule: "repeated",
                        type: "StructuredCalendarSpec",
                        id: 9
                      },
                      startTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4
                      },
                      endTime: {
                        type: "google.protobuf.Timestamp",
                        id: 5
                      },
                      jitter: {
                        type: "google.protobuf.Duration",
                        id: 6
                      },
                      timezoneName: {
                        type: "string",
                        id: 10
                      },
                      timezoneData: {
                        type: "bytes",
                        id: 11
                      }
                    }
                  },
                  SchedulePolicies: {
                    fields: {
                      overlapPolicy: {
                        type: "temporal.api.enums.v1.ScheduleOverlapPolicy",
                        id: 1
                      },
                      catchupWindow: {
                        type: "google.protobuf.Duration",
                        id: 2
                      },
                      pauseOnFailure: {
                        type: "bool",
                        id: 3
                      },
                      keepOriginalWorkflowId: {
                        type: "bool",
                        id: 4
                      }
                    }
                  },
                  ScheduleAction: {
                    oneofs: {
                      action: {
                        oneof: [
                          "startWorkflow"
                        ]
                      }
                    },
                    fields: {
                      startWorkflow: {
                        type: "temporal.api.workflow.v1.NewWorkflowExecutionInfo",
                        id: 1
                      }
                    }
                  },
                  ScheduleActionResult: {
                    fields: {
                      scheduleTime: {
                        type: "google.protobuf.Timestamp",
                        id: 1
                      },
                      actualTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2
                      },
                      startWorkflowResult: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 11
                      },
                      startWorkflowStatus: {
                        type: "temporal.api.enums.v1.WorkflowExecutionStatus",
                        id: 12
                      }
                    }
                  },
                  ScheduleState: {
                    fields: {
                      notes: {
                        type: "string",
                        id: 1
                      },
                      paused: {
                        type: "bool",
                        id: 2
                      },
                      limitedActions: {
                        type: "bool",
                        id: 3
                      },
                      remainingActions: {
                        type: "int64",
                        id: 4
                      }
                    }
                  },
                  TriggerImmediatelyRequest: {
                    fields: {
                      overlapPolicy: {
                        type: "temporal.api.enums.v1.ScheduleOverlapPolicy",
                        id: 1
                      },
                      scheduledTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2
                      }
                    }
                  },
                  BackfillRequest: {
                    fields: {
                      startTime: {
                        type: "google.protobuf.Timestamp",
                        id: 1
                      },
                      endTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2
                      },
                      overlapPolicy: {
                        type: "temporal.api.enums.v1.ScheduleOverlapPolicy",
                        id: 3
                      }
                    }
                  },
                  SchedulePatch: {
                    fields: {
                      triggerImmediately: {
                        type: "TriggerImmediatelyRequest",
                        id: 1
                      },
                      backfillRequest: {
                        rule: "repeated",
                        type: "BackfillRequest",
                        id: 2
                      },
                      pause: {
                        type: "string",
                        id: 3
                      },
                      unpause: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  ScheduleInfo: {
                    fields: {
                      actionCount: {
                        type: "int64",
                        id: 1
                      },
                      missedCatchupWindow: {
                        type: "int64",
                        id: 2
                      },
                      overlapSkipped: {
                        type: "int64",
                        id: 3
                      },
                      bufferDropped: {
                        type: "int64",
                        id: 10
                      },
                      bufferSize: {
                        type: "int64",
                        id: 11
                      },
                      runningWorkflows: {
                        rule: "repeated",
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 9
                      },
                      recentActions: {
                        rule: "repeated",
                        type: "ScheduleActionResult",
                        id: 4
                      },
                      futureActionTimes: {
                        rule: "repeated",
                        type: "google.protobuf.Timestamp",
                        id: 5
                      },
                      createTime: {
                        type: "google.protobuf.Timestamp",
                        id: 6
                      },
                      updateTime: {
                        type: "google.protobuf.Timestamp",
                        id: 7
                      },
                      invalidScheduleError: {
                        type: "string",
                        id: 8,
                        options: {
                          deprecated: true
                        }
                      }
                    }
                  },
                  Schedule: {
                    fields: {
                      spec: {
                        type: "ScheduleSpec",
                        id: 1
                      },
                      action: {
                        type: "ScheduleAction",
                        id: 2
                      },
                      policies: {
                        type: "SchedulePolicies",
                        id: 3
                      },
                      state: {
                        type: "ScheduleState",
                        id: 4
                      }
                    }
                  },
                  ScheduleListInfo: {
                    fields: {
                      spec: {
                        type: "ScheduleSpec",
                        id: 1
                      },
                      workflowType: {
                        type: "temporal.api.common.v1.WorkflowType",
                        id: 2
                      },
                      notes: {
                        type: "string",
                        id: 3
                      },
                      paused: {
                        type: "bool",
                        id: 4
                      },
                      recentActions: {
                        rule: "repeated",
                        type: "ScheduleActionResult",
                        id: 5
                      },
                      futureActionTimes: {
                        rule: "repeated",
                        type: "google.protobuf.Timestamp",
                        id: 6
                      }
                    }
                  },
                  ScheduleListEntry: {
                    fields: {
                      scheduleId: {
                        type: "string",
                        id: 1
                      },
                      memo: {
                        type: "temporal.api.common.v1.Memo",
                        id: 2
                      },
                      searchAttributes: {
                        type: "temporal.api.common.v1.SearchAttributes",
                        id: 3
                      },
                      info: {
                        type: "ScheduleListInfo",
                        id: 4
                      }
                    }
                  }
                }
              }
            }
          },
          version: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/version/v1;version",
                  java_package: "io.temporal.api.version.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Version::V1",
                  csharp_namespace: "Temporalio.Api.Version.V1"
                },
                nested: {
                  ReleaseInfo: {
                    fields: {
                      version: {
                        type: "string",
                        id: 1
                      },
                      releaseTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2
                      },
                      notes: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  Alert: {
                    fields: {
                      message: {
                        type: "string",
                        id: 1
                      },
                      severity: {
                        type: "temporal.api.enums.v1.Severity",
                        id: 2
                      }
                    }
                  },
                  VersionInfo: {
                    fields: {
                      current: {
                        type: "ReleaseInfo",
                        id: 1
                      },
                      recommended: {
                        type: "ReleaseInfo",
                        id: 2
                      },
                      instructions: {
                        type: "string",
                        id: 3
                      },
                      alerts: {
                        rule: "repeated",
                        type: "Alert",
                        id: 4
                      },
                      lastUpdateTime: {
                        type: "google.protobuf.Timestamp",
                        id: 5
                      }
                    }
                  }
                }
              }
            }
          },
          batch: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/batch/v1;batch",
                  java_package: "io.temporal.api.batch.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Batch::V1",
                  csharp_namespace: "Temporalio.Api.Batch.V1"
                },
                nested: {
                  BatchOperationInfo: {
                    fields: {
                      jobId: {
                        type: "string",
                        id: 1
                      },
                      state: {
                        type: "temporal.api.enums.v1.BatchOperationState",
                        id: 2
                      },
                      startTime: {
                        type: "google.protobuf.Timestamp",
                        id: 3
                      },
                      closeTime: {
                        type: "google.protobuf.Timestamp",
                        id: 4
                      }
                    }
                  },
                  BatchOperationTermination: {
                    fields: {
                      details: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 1
                      },
                      identity: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  BatchOperationSignal: {
                    fields: {
                      signal: {
                        type: "string",
                        id: 1
                      },
                      input: {
                        type: "temporal.api.common.v1.Payloads",
                        id: 2
                      },
                      header: {
                        type: "temporal.api.common.v1.Header",
                        id: 3
                      },
                      identity: {
                        type: "string",
                        id: 4
                      }
                    }
                  },
                  BatchOperationCancellation: {
                    fields: {
                      identity: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  BatchOperationDeletion: {
                    fields: {
                      identity: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  BatchOperationReset: {
                    fields: {
                      identity: {
                        type: "string",
                        id: 3
                      },
                      options: {
                        type: "temporal.api.common.v1.ResetOptions",
                        id: 4
                      },
                      resetType: {
                        type: "temporal.api.enums.v1.ResetType",
                        id: 1,
                        options: {
                          deprecated: true
                        }
                      },
                      resetReapplyType: {
                        type: "temporal.api.enums.v1.ResetReapplyType",
                        id: 2,
                        options: {
                          deprecated: true
                        }
                      },
                      postResetOperations: {
                        rule: "repeated",
                        type: "temporal.api.workflow.v1.PostResetOperation",
                        id: 5
                      }
                    }
                  },
                  BatchOperationUpdateWorkflowExecutionOptions: {
                    fields: {
                      identity: {
                        type: "string",
                        id: 1
                      },
                      workflowExecutionOptions: {
                        type: "temporal.api.workflow.v1.WorkflowExecutionOptions",
                        id: 2
                      },
                      updateMask: {
                        type: "google.protobuf.FieldMask",
                        id: 3
                      }
                    }
                  },
                  BatchOperationUnpauseActivities: {
                    oneofs: {
                      activity: {
                        oneof: [
                          "type",
                          "matchAll"
                        ]
                      }
                    },
                    fields: {
                      identity: {
                        type: "string",
                        id: 1
                      },
                      type: {
                        type: "string",
                        id: 2
                      },
                      matchAll: {
                        type: "bool",
                        id: 3
                      },
                      resetAttempts: {
                        type: "bool",
                        id: 4
                      },
                      resetHeartbeat: {
                        type: "bool",
                        id: 5
                      },
                      jitter: {
                        type: "google.protobuf.Duration",
                        id: 6
                      }
                    }
                  },
                  BatchOperationTriggerWorkflowRule: {
                    oneofs: {
                      rule: {
                        oneof: [
                          "id",
                          "spec"
                        ]
                      }
                    },
                    fields: {
                      identity: {
                        type: "string",
                        id: 1
                      },
                      id: {
                        type: "string",
                        id: 2
                      },
                      spec: {
                        type: "temporal.api.rules.v1.WorkflowRuleSpec",
                        id: 3
                      }
                    }
                  },
                  BatchOperationResetActivities: {
                    oneofs: {
                      activity: {
                        oneof: [
                          "type",
                          "matchAll"
                        ]
                      }
                    },
                    fields: {
                      identity: {
                        type: "string",
                        id: 1
                      },
                      type: {
                        type: "string",
                        id: 2
                      },
                      matchAll: {
                        type: "bool",
                        id: 3
                      },
                      resetAttempts: {
                        type: "bool",
                        id: 4
                      },
                      resetHeartbeat: {
                        type: "bool",
                        id: 5
                      },
                      keepPaused: {
                        type: "bool",
                        id: 6
                      },
                      jitter: {
                        type: "google.protobuf.Duration",
                        id: 7
                      },
                      restoreOriginalOptions: {
                        type: "bool",
                        id: 8
                      }
                    }
                  },
                  BatchOperationUpdateActivityOptions: {
                    oneofs: {
                      activity: {
                        oneof: [
                          "type",
                          "matchAll"
                        ]
                      }
                    },
                    fields: {
                      identity: {
                        type: "string",
                        id: 1
                      },
                      type: {
                        type: "string",
                        id: 2
                      },
                      matchAll: {
                        type: "bool",
                        id: 3
                      },
                      activityOptions: {
                        type: "temporal.api.activity.v1.ActivityOptions",
                        id: 4
                      },
                      updateMask: {
                        type: "google.protobuf.FieldMask",
                        id: 5
                      },
                      restoreOriginal: {
                        type: "bool",
                        id: 6
                      }
                    }
                  }
                }
              }
            }
          },
          worker: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/worker/v1;worker",
                  java_package: "io.temporal.api.worker.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::Worker::V1",
                  csharp_namespace: "Temporalio.Api.Worker.V1"
                },
                nested: {
                  WorkerPollerInfo: {
                    fields: {
                      currentPollers: {
                        type: "int32",
                        id: 1
                      },
                      lastSuccessfulPollTime: {
                        type: "google.protobuf.Timestamp",
                        id: 2
                      },
                      isAutoscaling: {
                        type: "bool",
                        id: 3
                      }
                    }
                  },
                  WorkerSlotsInfo: {
                    fields: {
                      currentAvailableSlots: {
                        type: "int32",
                        id: 1
                      },
                      currentUsedSlots: {
                        type: "int32",
                        id: 2
                      },
                      slotSupplierKind: {
                        type: "string",
                        id: 3
                      },
                      totalProcessedTasks: {
                        type: "int32",
                        id: 4
                      },
                      totalFailedTasks: {
                        type: "int32",
                        id: 5
                      },
                      lastIntervalProcessedTasks: {
                        type: "int32",
                        id: 6
                      },
                      lastIntervalFailureTasks: {
                        type: "int32",
                        id: 7
                      }
                    }
                  },
                  WorkerHostInfo: {
                    fields: {
                      hostName: {
                        type: "string",
                        id: 1
                      },
                      processKey: {
                        type: "string",
                        id: 5
                      },
                      processId: {
                        type: "string",
                        id: 2
                      },
                      currentHostCpuUsage: {
                        type: "float",
                        id: 3
                      },
                      currentHostMemUsage: {
                        type: "float",
                        id: 4
                      }
                    }
                  },
                  WorkerHeartbeat: {
                    fields: {
                      workerInstanceKey: {
                        type: "string",
                        id: 1
                      },
                      workerIdentity: {
                        type: "string",
                        id: 2
                      },
                      hostInfo: {
                        type: "WorkerHostInfo",
                        id: 3
                      },
                      taskQueue: {
                        type: "string",
                        id: 4
                      },
                      deploymentVersion: {
                        type: "temporal.api.deployment.v1.WorkerDeploymentVersion",
                        id: 5
                      },
                      sdkName: {
                        type: "string",
                        id: 6
                      },
                      sdkVersion: {
                        type: "string",
                        id: 7
                      },
                      status: {
                        type: "temporal.api.enums.v1.WorkerStatus",
                        id: 8
                      },
                      startTime: {
                        type: "google.protobuf.Timestamp",
                        id: 9
                      },
                      heartbeatTime: {
                        type: "google.protobuf.Timestamp",
                        id: 10
                      },
                      elapsedSinceLastHeartbeat: {
                        type: "google.protobuf.Duration",
                        id: 11
                      },
                      workflowTaskSlotsInfo: {
                        type: "WorkerSlotsInfo",
                        id: 12
                      },
                      activityTaskSlotsInfo: {
                        type: "WorkerSlotsInfo",
                        id: 13
                      },
                      nexusTaskSlotsInfo: {
                        type: "WorkerSlotsInfo",
                        id: 14
                      },
                      localActivitySlotsInfo: {
                        type: "WorkerSlotsInfo",
                        id: 15
                      },
                      workflowPollerInfo: {
                        type: "WorkerPollerInfo",
                        id: 16
                      },
                      workflowStickyPollerInfo: {
                        type: "WorkerPollerInfo",
                        id: 17
                      },
                      activityPollerInfo: {
                        type: "WorkerPollerInfo",
                        id: 18
                      },
                      nexusPollerInfo: {
                        type: "WorkerPollerInfo",
                        id: 19
                      },
                      totalStickyCacheHit: {
                        type: "int32",
                        id: 20
                      },
                      totalStickyCacheMiss: {
                        type: "int32",
                        id: 21
                      },
                      currentStickyCacheSize: {
                        type: "int32",
                        id: 22
                      },
                      plugins: {
                        rule: "repeated",
                        type: "PluginInfo",
                        id: 23
                      }
                    }
                  },
                  WorkerInfo: {
                    fields: {
                      workerHeartbeat: {
                        type: "WorkerHeartbeat",
                        id: 1
                      }
                    }
                  },
                  PluginInfo: {
                    fields: {
                      name: {
                        type: "string",
                        id: 1
                      },
                      version: {
                        type: "string",
                        id: 2
                      }
                    }
                  }
                }
              }
            }
          },
          operatorservice: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/operatorservice/v1;operatorservice",
                  java_package: "io.temporal.api.operatorservice.v1",
                  java_multiple_files: true,
                  java_outer_classname: "RequestResponseProto",
                  ruby_package: "Temporalio::Api::OperatorService::V1",
                  csharp_namespace: "Temporalio.Api.OperatorService.V1"
                },
                nested: {
                  OperatorService: {
                    methods: {
                      AddSearchAttributes: {
                        requestType: "AddSearchAttributesRequest",
                        responseType: "AddSearchAttributesResponse"
                      },
                      RemoveSearchAttributes: {
                        requestType: "RemoveSearchAttributesRequest",
                        responseType: "RemoveSearchAttributesResponse"
                      },
                      ListSearchAttributes: {
                        requestType: "ListSearchAttributesRequest",
                        responseType: "ListSearchAttributesResponse",
                        options: {
                          "(google.api.http).get": "/cluster/namespaces/{namespace}/search-attributes",
                          "(google.api.http).additional_bindings.get": "/api/v1/namespaces/{namespace}/search-attributes"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/cluster/namespaces/{namespace}/search-attributes",
                              additional_bindings: {
                                get: "/api/v1/namespaces/{namespace}/search-attributes"
                              }
                            }
                          }
                        ]
                      },
                      DeleteNamespace: {
                        requestType: "DeleteNamespaceRequest",
                        responseType: "DeleteNamespaceResponse"
                      },
                      AddOrUpdateRemoteCluster: {
                        requestType: "AddOrUpdateRemoteClusterRequest",
                        responseType: "AddOrUpdateRemoteClusterResponse"
                      },
                      RemoveRemoteCluster: {
                        requestType: "RemoveRemoteClusterRequest",
                        responseType: "RemoveRemoteClusterResponse"
                      },
                      ListClusters: {
                        requestType: "ListClustersRequest",
                        responseType: "ListClustersResponse"
                      },
                      GetNexusEndpoint: {
                        requestType: "GetNexusEndpointRequest",
                        responseType: "GetNexusEndpointResponse",
                        options: {
                          "(google.api.http).get": "/cluster/nexus/endpoints/{id}",
                          "(google.api.http).additional_bindings.get": "/api/v1/nexus/endpoints/{id}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/cluster/nexus/endpoints/{id}",
                              additional_bindings: {
                                get: "/api/v1/nexus/endpoints/{id}"
                              }
                            }
                          }
                        ]
                      },
                      CreateNexusEndpoint: {
                        requestType: "CreateNexusEndpointRequest",
                        responseType: "CreateNexusEndpointResponse",
                        options: {
                          "(google.api.http).post": "/cluster/nexus/endpoints",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/nexus/endpoints",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/cluster/nexus/endpoints",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/nexus/endpoints",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      UpdateNexusEndpoint: {
                        requestType: "UpdateNexusEndpointRequest",
                        responseType: "UpdateNexusEndpointResponse",
                        options: {
                          "(google.api.http).post": "/cluster/nexus/endpoints/{id}/update",
                          "(google.api.http).body": "*",
                          "(google.api.http).additional_bindings.post": "/api/v1/nexus/endpoints/{id}/update",
                          "(google.api.http).additional_bindings.body": "*"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              post: "/cluster/nexus/endpoints/{id}/update",
                              body: "*",
                              additional_bindings: {
                                post: "/api/v1/nexus/endpoints/{id}/update",
                                body: "*"
                              }
                            }
                          }
                        ]
                      },
                      DeleteNexusEndpoint: {
                        requestType: "DeleteNexusEndpointRequest",
                        responseType: "DeleteNexusEndpointResponse",
                        options: {
                          "(google.api.http).delete": "/cluster/nexus/endpoints/{id}",
                          "(google.api.http).additional_bindings.delete": "/api/v1/nexus/endpoints/{id}"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              "delete": "/cluster/nexus/endpoints/{id}",
                              additional_bindings: {
                                "delete": "/api/v1/nexus/endpoints/{id}"
                              }
                            }
                          }
                        ]
                      },
                      ListNexusEndpoints: {
                        requestType: "ListNexusEndpointsRequest",
                        responseType: "ListNexusEndpointsResponse",
                        options: {
                          "(google.api.http).get": "/cluster/nexus/endpoints",
                          "(google.api.http).additional_bindings.get": "/api/v1/nexus/endpoints"
                        },
                        parsedOptions: [
                          {
                            "(google.api.http)": {
                              get: "/cluster/nexus/endpoints",
                              additional_bindings: {
                                get: "/api/v1/nexus/endpoints"
                              }
                            }
                          }
                        ]
                      }
                    }
                  },
                  AddSearchAttributesRequest: {
                    fields: {
                      searchAttributes: {
                        keyType: "string",
                        type: "temporal.api.enums.v1.IndexedValueType",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  AddSearchAttributesResponse: {
                    fields: {}
                  },
                  RemoveSearchAttributesRequest: {
                    fields: {
                      searchAttributes: {
                        rule: "repeated",
                        type: "string",
                        id: 1
                      },
                      namespace: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  RemoveSearchAttributesResponse: {
                    fields: {}
                  },
                  ListSearchAttributesRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  ListSearchAttributesResponse: {
                    fields: {
                      customAttributes: {
                        keyType: "string",
                        type: "temporal.api.enums.v1.IndexedValueType",
                        id: 1
                      },
                      systemAttributes: {
                        keyType: "string",
                        type: "temporal.api.enums.v1.IndexedValueType",
                        id: 2
                      },
                      storageSchema: {
                        keyType: "string",
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  DeleteNamespaceRequest: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      namespaceId: {
                        type: "string",
                        id: 2
                      },
                      namespaceDeleteDelay: {
                        type: "google.protobuf.Duration",
                        id: 3
                      }
                    }
                  },
                  DeleteNamespaceResponse: {
                    fields: {
                      deletedNamespace: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  AddOrUpdateRemoteClusterRequest: {
                    fields: {
                      frontendAddress: {
                        type: "string",
                        id: 1
                      },
                      enableRemoteClusterConnection: {
                        type: "bool",
                        id: 2
                      },
                      frontendHttpAddress: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  AddOrUpdateRemoteClusterResponse: {
                    fields: {}
                  },
                  RemoveRemoteClusterRequest: {
                    fields: {
                      clusterName: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  RemoveRemoteClusterResponse: {
                    fields: {}
                  },
                  ListClustersRequest: {
                    fields: {
                      pageSize: {
                        type: "int32",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      }
                    }
                  },
                  ListClustersResponse: {
                    fields: {
                      clusters: {
                        rule: "repeated",
                        type: "ClusterMetadata",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 4
                      }
                    }
                  },
                  ClusterMetadata: {
                    fields: {
                      clusterName: {
                        type: "string",
                        id: 1
                      },
                      clusterId: {
                        type: "string",
                        id: 2
                      },
                      address: {
                        type: "string",
                        id: 3
                      },
                      httpAddress: {
                        type: "string",
                        id: 7
                      },
                      initialFailoverVersion: {
                        type: "int64",
                        id: 4
                      },
                      historyShardCount: {
                        type: "int32",
                        id: 5
                      },
                      isConnectionEnabled: {
                        type: "bool",
                        id: 6
                      }
                    }
                  },
                  GetNexusEndpointRequest: {
                    fields: {
                      id: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  GetNexusEndpointResponse: {
                    fields: {
                      endpoint: {
                        type: "temporal.api.nexus.v1.Endpoint",
                        id: 1
                      }
                    }
                  },
                  CreateNexusEndpointRequest: {
                    fields: {
                      spec: {
                        type: "temporal.api.nexus.v1.EndpointSpec",
                        id: 1
                      }
                    }
                  },
                  CreateNexusEndpointResponse: {
                    fields: {
                      endpoint: {
                        type: "temporal.api.nexus.v1.Endpoint",
                        id: 1
                      }
                    }
                  },
                  UpdateNexusEndpointRequest: {
                    fields: {
                      id: {
                        type: "string",
                        id: 1
                      },
                      version: {
                        type: "int64",
                        id: 2
                      },
                      spec: {
                        type: "temporal.api.nexus.v1.EndpointSpec",
                        id: 3
                      }
                    }
                  },
                  UpdateNexusEndpointResponse: {
                    fields: {
                      endpoint: {
                        type: "temporal.api.nexus.v1.Endpoint",
                        id: 1
                      }
                    }
                  },
                  DeleteNexusEndpointRequest: {
                    fields: {
                      id: {
                        type: "string",
                        id: 1
                      },
                      version: {
                        type: "int64",
                        id: 2
                      }
                    }
                  },
                  DeleteNexusEndpointResponse: {
                    fields: {}
                  },
                  ListNexusEndpointsRequest: {
                    fields: {
                      pageSize: {
                        type: "int32",
                        id: 1
                      },
                      nextPageToken: {
                        type: "bytes",
                        id: 2
                      },
                      name: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  ListNexusEndpointsResponse: {
                    fields: {
                      nextPageToken: {
                        type: "bytes",
                        id: 1
                      },
                      endpoints: {
                        rule: "repeated",
                        type: "temporal.api.nexus.v1.Endpoint",
                        id: 2
                      }
                    }
                  }
                }
              }
            }
          },
          cloud: {
            nested: {
              cloudservice: {
                nested: {
                  v1: {
                    options: {
                      go_package: "go.temporal.io/api/cloud/cloudservice/v1;cloudservice",
                      java_package: "io.temporal.api.cloud.cloudservice.v1",
                      java_multiple_files: true,
                      java_outer_classname: "RequestResponseProto",
                      ruby_package: "Temporalio::Api::Cloud::CloudService::V1",
                      csharp_namespace: "Temporalio.Api.Cloud.CloudService.V1"
                    },
                    nested: {
                      CloudService: {
                        methods: {
                          GetUsers: {
                            requestType: "GetUsersRequest",
                            responseType: "GetUsersResponse",
                            options: {
                              "(google.api.http).get": "/cloud/users"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/users"
                                }
                              }
                            ]
                          },
                          GetUser: {
                            requestType: "GetUserRequest",
                            responseType: "GetUserResponse",
                            options: {
                              "(google.api.http).get": "/cloud/users/{user_id}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/users/{user_id}"
                                }
                              }
                            ]
                          },
                          CreateUser: {
                            requestType: "CreateUserRequest",
                            responseType: "CreateUserResponse",
                            options: {
                              "(google.api.http).post": "/cloud/users",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/users",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          UpdateUser: {
                            requestType: "UpdateUserRequest",
                            responseType: "UpdateUserResponse",
                            options: {
                              "(google.api.http).post": "/cloud/users/{user_id}",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/users/{user_id}",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          DeleteUser: {
                            requestType: "DeleteUserRequest",
                            responseType: "DeleteUserResponse",
                            options: {
                              "(google.api.http).delete": "/cloud/users/{user_id}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  "delete": "/cloud/users/{user_id}"
                                }
                              }
                            ]
                          },
                          SetUserNamespaceAccess: {
                            requestType: "SetUserNamespaceAccessRequest",
                            responseType: "SetUserNamespaceAccessResponse",
                            options: {
                              "(google.api.http).post": "/cloud/namespaces/{namespace}/users/{user_id}/access",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/namespaces/{namespace}/users/{user_id}/access",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          GetAsyncOperation: {
                            requestType: "GetAsyncOperationRequest",
                            responseType: "GetAsyncOperationResponse",
                            options: {
                              "(google.api.http).get": "/cloud/operations/{async_operation_id}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/operations/{async_operation_id}"
                                }
                              }
                            ]
                          },
                          CreateNamespace: {
                            requestType: "CreateNamespaceRequest",
                            responseType: "CreateNamespaceResponse",
                            options: {
                              "(google.api.http).post": "/cloud/namespaces",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/namespaces",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          GetNamespaces: {
                            requestType: "GetNamespacesRequest",
                            responseType: "GetNamespacesResponse",
                            options: {
                              "(google.api.http).get": "/cloud/namespaces"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/namespaces"
                                }
                              }
                            ]
                          },
                          GetNamespace: {
                            requestType: "GetNamespaceRequest",
                            responseType: "GetNamespaceResponse",
                            options: {
                              "(google.api.http).get": "/cloud/namespaces/{namespace}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/namespaces/{namespace}"
                                }
                              }
                            ]
                          },
                          UpdateNamespace: {
                            requestType: "UpdateNamespaceRequest",
                            responseType: "UpdateNamespaceResponse",
                            options: {
                              "(google.api.http).post": "/cloud/namespaces/{namespace}",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/namespaces/{namespace}",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          RenameCustomSearchAttribute: {
                            requestType: "RenameCustomSearchAttributeRequest",
                            responseType: "RenameCustomSearchAttributeResponse",
                            options: {
                              "(google.api.http).post": "/cloud/namespaces/{namespace}/rename-custom-search-attribute",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/namespaces/{namespace}/rename-custom-search-attribute",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          DeleteNamespace: {
                            requestType: "DeleteNamespaceRequest",
                            responseType: "DeleteNamespaceResponse",
                            options: {
                              "(google.api.http).delete": "/cloud/namespaces/{namespace}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  "delete": "/cloud/namespaces/{namespace}"
                                }
                              }
                            ]
                          },
                          FailoverNamespaceRegion: {
                            requestType: "FailoverNamespaceRegionRequest",
                            responseType: "FailoverNamespaceRegionResponse",
                            options: {
                              "(google.api.http).post": "/cloud/namespaces/{namespace}/failover-region",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/namespaces/{namespace}/failover-region",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          AddNamespaceRegion: {
                            requestType: "AddNamespaceRegionRequest",
                            responseType: "AddNamespaceRegionResponse",
                            options: {
                              "(google.api.http).post": "/cloud/namespaces/{namespace}/add-region",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/namespaces/{namespace}/add-region",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          DeleteNamespaceRegion: {
                            requestType: "DeleteNamespaceRegionRequest",
                            responseType: "DeleteNamespaceRegionResponse",
                            options: {
                              "(google.api.http).delete": "/cloud/namespaces/{namespace}/regions/{region}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  "delete": "/cloud/namespaces/{namespace}/regions/{region}"
                                }
                              }
                            ]
                          },
                          GetRegions: {
                            requestType: "GetRegionsRequest",
                            responseType: "GetRegionsResponse",
                            options: {
                              "(google.api.http).get": "/cloud/regions"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/regions"
                                }
                              }
                            ]
                          },
                          GetRegion: {
                            requestType: "GetRegionRequest",
                            responseType: "GetRegionResponse",
                            options: {
                              "(google.api.http).get": "/cloud/regions/{region}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/regions/{region}"
                                }
                              }
                            ]
                          },
                          GetApiKeys: {
                            requestType: "GetApiKeysRequest",
                            responseType: "GetApiKeysResponse",
                            options: {
                              "(google.api.http).get": "/cloud/api-keys"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/api-keys"
                                }
                              }
                            ]
                          },
                          GetApiKey: {
                            requestType: "GetApiKeyRequest",
                            responseType: "GetApiKeyResponse",
                            options: {
                              "(google.api.http).get": "/cloud/api-keys/{key_id}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/api-keys/{key_id}"
                                }
                              }
                            ]
                          },
                          CreateApiKey: {
                            requestType: "CreateApiKeyRequest",
                            responseType: "CreateApiKeyResponse",
                            options: {
                              "(google.api.http).post": "/cloud/api-keys",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/api-keys",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          UpdateApiKey: {
                            requestType: "UpdateApiKeyRequest",
                            responseType: "UpdateApiKeyResponse",
                            options: {
                              "(google.api.http).post": "/cloud/api-keys/{key_id}",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/api-keys/{key_id}",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          DeleteApiKey: {
                            requestType: "DeleteApiKeyRequest",
                            responseType: "DeleteApiKeyResponse",
                            options: {
                              "(google.api.http).delete": "/cloud/api-keys/{key_id}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  "delete": "/cloud/api-keys/{key_id}"
                                }
                              }
                            ]
                          },
                          GetNexusEndpoints: {
                            requestType: "GetNexusEndpointsRequest",
                            responseType: "GetNexusEndpointsResponse",
                            options: {
                              "(google.api.http).get": "/cloud/nexus/endpoints"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/nexus/endpoints"
                                }
                              }
                            ]
                          },
                          GetNexusEndpoint: {
                            requestType: "GetNexusEndpointRequest",
                            responseType: "GetNexusEndpointResponse",
                            options: {
                              "(google.api.http).get": "/cloud/nexus/endpoints/{endpoint_id}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/nexus/endpoints/{endpoint_id}"
                                }
                              }
                            ]
                          },
                          CreateNexusEndpoint: {
                            requestType: "CreateNexusEndpointRequest",
                            responseType: "CreateNexusEndpointResponse",
                            options: {
                              "(google.api.http).post": "/cloud/nexus/endpoints",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/nexus/endpoints",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          UpdateNexusEndpoint: {
                            requestType: "UpdateNexusEndpointRequest",
                            responseType: "UpdateNexusEndpointResponse",
                            options: {
                              "(google.api.http).post": "/cloud/nexus/endpoints/{endpoint_id}",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/nexus/endpoints/{endpoint_id}",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          DeleteNexusEndpoint: {
                            requestType: "DeleteNexusEndpointRequest",
                            responseType: "DeleteNexusEndpointResponse",
                            options: {
                              "(google.api.http).delete": "/cloud/nexus/endpoints/{endpoint_id}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  "delete": "/cloud/nexus/endpoints/{endpoint_id}"
                                }
                              }
                            ]
                          },
                          GetUserGroups: {
                            requestType: "GetUserGroupsRequest",
                            responseType: "GetUserGroupsResponse",
                            options: {
                              "(google.api.http).get": "/cloud/user-groups"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/user-groups"
                                }
                              }
                            ]
                          },
                          GetUserGroup: {
                            requestType: "GetUserGroupRequest",
                            responseType: "GetUserGroupResponse",
                            options: {
                              "(google.api.http).get": "/cloud/user-groups/{group_id}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/user-groups/{group_id}"
                                }
                              }
                            ]
                          },
                          CreateUserGroup: {
                            requestType: "CreateUserGroupRequest",
                            responseType: "CreateUserGroupResponse",
                            options: {
                              "(google.api.http).post": "/cloud/user-groups",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/user-groups",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          UpdateUserGroup: {
                            requestType: "UpdateUserGroupRequest",
                            responseType: "UpdateUserGroupResponse",
                            options: {
                              "(google.api.http).post": "/cloud/user-groups/{group_id}",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/user-groups/{group_id}",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          DeleteUserGroup: {
                            requestType: "DeleteUserGroupRequest",
                            responseType: "DeleteUserGroupResponse",
                            options: {
                              "(google.api.http).delete": "/cloud/user-groups/{group_id}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  "delete": "/cloud/user-groups/{group_id}"
                                }
                              }
                            ]
                          },
                          SetUserGroupNamespaceAccess: {
                            requestType: "SetUserGroupNamespaceAccessRequest",
                            responseType: "SetUserGroupNamespaceAccessResponse",
                            options: {
                              "(google.api.http).post": "/cloud/namespaces/{namespace}/user-groups/{group_id}/access",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/namespaces/{namespace}/user-groups/{group_id}/access",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          AddUserGroupMember: {
                            requestType: "AddUserGroupMemberRequest",
                            responseType: "AddUserGroupMemberResponse",
                            options: {
                              "(google.api.http).post": "/cloud/user-groups/{group_id}/members",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/user-groups/{group_id}/members",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          RemoveUserGroupMember: {
                            requestType: "RemoveUserGroupMemberRequest",
                            responseType: "RemoveUserGroupMemberResponse",
                            options: {
                              "(google.api.http).post": "/cloud/user-groups/{group_id}/remove-member",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/user-groups/{group_id}/remove-member",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          GetUserGroupMembers: {
                            requestType: "GetUserGroupMembersRequest",
                            responseType: "GetUserGroupMembersResponse",
                            options: {
                              "(google.api.http).get": "/cloud/user-groups/{group_id}/members"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/user-groups/{group_id}/members"
                                }
                              }
                            ]
                          },
                          CreateServiceAccount: {
                            requestType: "CreateServiceAccountRequest",
                            responseType: "CreateServiceAccountResponse",
                            options: {
                              "(google.api.http).post": "/cloud/service-accounts",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/service-accounts",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          GetServiceAccount: {
                            requestType: "GetServiceAccountRequest",
                            responseType: "GetServiceAccountResponse",
                            options: {
                              "(google.api.http).get": "/cloud/service-accounts/{service_account_id}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/service-accounts/{service_account_id}"
                                }
                              }
                            ]
                          },
                          GetServiceAccounts: {
                            requestType: "GetServiceAccountsRequest",
                            responseType: "GetServiceAccountsResponse",
                            options: {
                              "(google.api.http).get": "/cloud/service-accounts"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/service-accounts"
                                }
                              }
                            ]
                          },
                          UpdateServiceAccount: {
                            requestType: "UpdateServiceAccountRequest",
                            responseType: "UpdateServiceAccountResponse",
                            options: {
                              "(google.api.http).post": "/cloud/service-accounts/{service_account_id}",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/service-accounts/{service_account_id}",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          DeleteServiceAccount: {
                            requestType: "DeleteServiceAccountRequest",
                            responseType: "DeleteServiceAccountResponse",
                            options: {
                              "(google.api.http).delete": "/cloud/service-accounts/{service_account_id}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  "delete": "/cloud/service-accounts/{service_account_id}"
                                }
                              }
                            ]
                          },
                          GetUsage: {
                            requestType: "GetUsageRequest",
                            responseType: "GetUsageResponse",
                            options: {
                              "(google.api.http).get": "/cloud/usage"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/usage"
                                }
                              }
                            ]
                          },
                          GetAccount: {
                            requestType: "GetAccountRequest",
                            responseType: "GetAccountResponse",
                            options: {
                              "(google.api.http).get": "/cloud/account"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/account"
                                }
                              }
                            ]
                          },
                          UpdateAccount: {
                            requestType: "UpdateAccountRequest",
                            responseType: "UpdateAccountResponse",
                            options: {
                              "(google.api.http).post": "/cloud/account",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/account",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          CreateNamespaceExportSink: {
                            requestType: "CreateNamespaceExportSinkRequest",
                            responseType: "CreateNamespaceExportSinkResponse",
                            options: {
                              "(google.api.http).post": "/cloud/namespaces/{namespace}/export-sinks",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/namespaces/{namespace}/export-sinks",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          GetNamespaceExportSink: {
                            requestType: "GetNamespaceExportSinkRequest",
                            responseType: "GetNamespaceExportSinkResponse",
                            options: {
                              "(google.api.http).get": "/cloud/namespaces/{namespace}/export-sinks/{name}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/namespaces/{namespace}/export-sinks/{name}"
                                }
                              }
                            ]
                          },
                          GetNamespaceExportSinks: {
                            requestType: "GetNamespaceExportSinksRequest",
                            responseType: "GetNamespaceExportSinksResponse",
                            options: {
                              "(google.api.http).get": "/cloud/namespaces/{namespace}/export-sinks"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/namespaces/{namespace}/export-sinks"
                                }
                              }
                            ]
                          },
                          UpdateNamespaceExportSink: {
                            requestType: "UpdateNamespaceExportSinkRequest",
                            responseType: "UpdateNamespaceExportSinkResponse",
                            options: {
                              "(google.api.http).post": "/cloud/namespaces/{namespace}/export-sinks/{spec.name}",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/namespaces/{namespace}/export-sinks/{spec.name}",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          DeleteNamespaceExportSink: {
                            requestType: "DeleteNamespaceExportSinkRequest",
                            responseType: "DeleteNamespaceExportSinkResponse",
                            options: {
                              "(google.api.http).delete": "/cloud/namespaces/{namespace}/export-sinks/{name}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  "delete": "/cloud/namespaces/{namespace}/export-sinks/{name}"
                                }
                              }
                            ]
                          },
                          ValidateNamespaceExportSink: {
                            requestType: "ValidateNamespaceExportSinkRequest",
                            responseType: "ValidateNamespaceExportSinkResponse",
                            options: {
                              "(google.api.http).post": "/cloud/namespaces/{namespace}/export-sinks/validate",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/namespaces/{namespace}/export-sinks/validate",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          UpdateNamespaceTags: {
                            requestType: "UpdateNamespaceTagsRequest",
                            responseType: "UpdateNamespaceTagsResponse",
                            options: {
                              "(google.api.http).post": "/cloud/namespaces/{namespace}/update-tags",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/namespaces/{namespace}/update-tags",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          CreateConnectivityRule: {
                            requestType: "CreateConnectivityRuleRequest",
                            responseType: "CreateConnectivityRuleResponse",
                            options: {
                              "(google.api.http).post": "/cloud/connectivity-rules",
                              "(google.api.http).body": "*"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  post: "/cloud/connectivity-rules",
                                  body: "*"
                                }
                              }
                            ]
                          },
                          GetConnectivityRule: {
                            requestType: "GetConnectivityRuleRequest",
                            responseType: "GetConnectivityRuleResponse",
                            options: {
                              "(google.api.http).get": "/cloud/connectivity-rules/{connectivity_rule_id}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/connectivity-rules/{connectivity_rule_id}"
                                }
                              }
                            ]
                          },
                          GetConnectivityRules: {
                            requestType: "GetConnectivityRulesRequest",
                            responseType: "GetConnectivityRulesResponse",
                            options: {
                              "(google.api.http).get": "/cloud/connectivity-rules"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  get: "/cloud/connectivity-rules"
                                }
                              }
                            ]
                          },
                          DeleteConnectivityRule: {
                            requestType: "DeleteConnectivityRuleRequest",
                            responseType: "DeleteConnectivityRuleResponse",
                            options: {
                              "(google.api.http).delete": "/cloud/connectivity-rules/{connectivity_rule_id}"
                            },
                            parsedOptions: [
                              {
                                "(google.api.http)": {
                                  "delete": "/cloud/connectivity-rules/{connectivity_rule_id}"
                                }
                              }
                            ]
                          }
                        }
                      },
                      GetUsersRequest: {
                        fields: {
                          pageSize: {
                            type: "int32",
                            id: 1
                          },
                          pageToken: {
                            type: "string",
                            id: 2
                          },
                          email: {
                            type: "string",
                            id: 3
                          },
                          namespace: {
                            type: "string",
                            id: 4
                          }
                        }
                      },
                      GetUsersResponse: {
                        fields: {
                          users: {
                            rule: "repeated",
                            type: "temporal.api.cloud.identity.v1.User",
                            id: 1
                          },
                          nextPageToken: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      GetUserRequest: {
                        fields: {
                          userId: {
                            type: "string",
                            id: 1
                          }
                        }
                      },
                      GetUserResponse: {
                        fields: {
                          user: {
                            type: "temporal.api.cloud.identity.v1.User",
                            id: 1
                          }
                        }
                      },
                      CreateUserRequest: {
                        fields: {
                          spec: {
                            type: "temporal.api.cloud.identity.v1.UserSpec",
                            id: 1
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      CreateUserResponse: {
                        fields: {
                          userId: {
                            type: "string",
                            id: 1
                          },
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 2
                          }
                        }
                      },
                      UpdateUserRequest: {
                        fields: {
                          userId: {
                            type: "string",
                            id: 1
                          },
                          spec: {
                            type: "temporal.api.cloud.identity.v1.UserSpec",
                            id: 2
                          },
                          resourceVersion: {
                            type: "string",
                            id: 3
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 4
                          }
                        }
                      },
                      UpdateUserResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      DeleteUserRequest: {
                        fields: {
                          userId: {
                            type: "string",
                            id: 1
                          },
                          resourceVersion: {
                            type: "string",
                            id: 2
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      DeleteUserResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      SetUserNamespaceAccessRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          userId: {
                            type: "string",
                            id: 2
                          },
                          access: {
                            type: "temporal.api.cloud.identity.v1.NamespaceAccess",
                            id: 3
                          },
                          resourceVersion: {
                            type: "string",
                            id: 4
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 5
                          }
                        }
                      },
                      SetUserNamespaceAccessResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      GetAsyncOperationRequest: {
                        fields: {
                          asyncOperationId: {
                            type: "string",
                            id: 1
                          }
                        }
                      },
                      GetAsyncOperationResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      CreateNamespaceRequest: {
                        fields: {
                          spec: {
                            type: "temporal.api.cloud.namespace.v1.NamespaceSpec",
                            id: 2
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 3
                          },
                          tags: {
                            keyType: "string",
                            type: "string",
                            id: 4
                          }
                        }
                      },
                      CreateNamespaceResponse: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 2
                          }
                        }
                      },
                      GetNamespacesRequest: {
                        fields: {
                          pageSize: {
                            type: "int32",
                            id: 1
                          },
                          pageToken: {
                            type: "string",
                            id: 2
                          },
                          name: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      GetNamespacesResponse: {
                        fields: {
                          namespaces: {
                            rule: "repeated",
                            type: "temporal.api.cloud.namespace.v1.Namespace",
                            id: 1
                          },
                          nextPageToken: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      GetNamespaceRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          }
                        }
                      },
                      GetNamespaceResponse: {
                        fields: {
                          namespace: {
                            type: "temporal.api.cloud.namespace.v1.Namespace",
                            id: 1
                          }
                        }
                      },
                      UpdateNamespaceRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          spec: {
                            type: "temporal.api.cloud.namespace.v1.NamespaceSpec",
                            id: 2
                          },
                          resourceVersion: {
                            type: "string",
                            id: 3
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 4
                          }
                        }
                      },
                      UpdateNamespaceResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      RenameCustomSearchAttributeRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          existingCustomSearchAttributeName: {
                            type: "string",
                            id: 2
                          },
                          newCustomSearchAttributeName: {
                            type: "string",
                            id: 3
                          },
                          resourceVersion: {
                            type: "string",
                            id: 4
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 5
                          }
                        }
                      },
                      RenameCustomSearchAttributeResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      DeleteNamespaceRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          resourceVersion: {
                            type: "string",
                            id: 2
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      DeleteNamespaceResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      FailoverNamespaceRegionRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          region: {
                            type: "string",
                            id: 2
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      FailoverNamespaceRegionResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      AddNamespaceRegionRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          region: {
                            type: "string",
                            id: 2
                          },
                          resourceVersion: {
                            type: "string",
                            id: 3
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 4
                          }
                        }
                      },
                      AddNamespaceRegionResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      DeleteNamespaceRegionRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          region: {
                            type: "string",
                            id: 2
                          },
                          resourceVersion: {
                            type: "string",
                            id: 3
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 4
                          }
                        }
                      },
                      DeleteNamespaceRegionResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      GetRegionsRequest: {
                        fields: {}
                      },
                      GetRegionsResponse: {
                        fields: {
                          regions: {
                            rule: "repeated",
                            type: "temporal.api.cloud.region.v1.Region",
                            id: 1
                          }
                        }
                      },
                      GetRegionRequest: {
                        fields: {
                          region: {
                            type: "string",
                            id: 1
                          }
                        }
                      },
                      GetRegionResponse: {
                        fields: {
                          region: {
                            type: "temporal.api.cloud.region.v1.Region",
                            id: 1
                          }
                        }
                      },
                      GetApiKeysRequest: {
                        fields: {
                          pageSize: {
                            type: "int32",
                            id: 1
                          },
                          pageToken: {
                            type: "string",
                            id: 2
                          },
                          ownerId: {
                            type: "string",
                            id: 3
                          },
                          ownerTypeDeprecated: {
                            type: "string",
                            id: 4,
                            options: {
                              deprecated: true
                            }
                          },
                          ownerType: {
                            type: "temporal.api.cloud.identity.v1.OwnerType",
                            id: 5
                          }
                        }
                      },
                      GetApiKeysResponse: {
                        fields: {
                          apiKeys: {
                            rule: "repeated",
                            type: "temporal.api.cloud.identity.v1.ApiKey",
                            id: 1
                          },
                          nextPageToken: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      GetApiKeyRequest: {
                        fields: {
                          keyId: {
                            type: "string",
                            id: 1
                          }
                        }
                      },
                      GetApiKeyResponse: {
                        fields: {
                          apiKey: {
                            type: "temporal.api.cloud.identity.v1.ApiKey",
                            id: 1
                          }
                        }
                      },
                      CreateApiKeyRequest: {
                        fields: {
                          spec: {
                            type: "temporal.api.cloud.identity.v1.ApiKeySpec",
                            id: 1
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      CreateApiKeyResponse: {
                        fields: {
                          keyId: {
                            type: "string",
                            id: 1
                          },
                          token: {
                            type: "string",
                            id: 2
                          },
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 3
                          }
                        }
                      },
                      UpdateApiKeyRequest: {
                        fields: {
                          keyId: {
                            type: "string",
                            id: 1
                          },
                          spec: {
                            type: "temporal.api.cloud.identity.v1.ApiKeySpec",
                            id: 2
                          },
                          resourceVersion: {
                            type: "string",
                            id: 3
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 4
                          }
                        }
                      },
                      UpdateApiKeyResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      DeleteApiKeyRequest: {
                        fields: {
                          keyId: {
                            type: "string",
                            id: 1
                          },
                          resourceVersion: {
                            type: "string",
                            id: 2
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      DeleteApiKeyResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      GetNexusEndpointsRequest: {
                        fields: {
                          pageSize: {
                            type: "int32",
                            id: 1
                          },
                          pageToken: {
                            type: "string",
                            id: 2
                          },
                          targetNamespaceId: {
                            type: "string",
                            id: 3
                          },
                          targetTaskQueue: {
                            type: "string",
                            id: 4
                          },
                          name: {
                            type: "string",
                            id: 5
                          }
                        }
                      },
                      GetNexusEndpointsResponse: {
                        fields: {
                          endpoints: {
                            rule: "repeated",
                            type: "temporal.api.cloud.nexus.v1.Endpoint",
                            id: 1
                          },
                          nextPageToken: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      GetNexusEndpointRequest: {
                        fields: {
                          endpointId: {
                            type: "string",
                            id: 1
                          }
                        }
                      },
                      GetNexusEndpointResponse: {
                        fields: {
                          endpoint: {
                            type: "temporal.api.cloud.nexus.v1.Endpoint",
                            id: 1
                          }
                        }
                      },
                      CreateNexusEndpointRequest: {
                        fields: {
                          spec: {
                            type: "temporal.api.cloud.nexus.v1.EndpointSpec",
                            id: 1
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      CreateNexusEndpointResponse: {
                        fields: {
                          endpointId: {
                            type: "string",
                            id: 1
                          },
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 2
                          }
                        }
                      },
                      UpdateNexusEndpointRequest: {
                        fields: {
                          endpointId: {
                            type: "string",
                            id: 1
                          },
                          spec: {
                            type: "temporal.api.cloud.nexus.v1.EndpointSpec",
                            id: 2
                          },
                          resourceVersion: {
                            type: "string",
                            id: 3
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 4
                          }
                        }
                      },
                      UpdateNexusEndpointResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      DeleteNexusEndpointRequest: {
                        fields: {
                          endpointId: {
                            type: "string",
                            id: 1
                          },
                          resourceVersion: {
                            type: "string",
                            id: 2
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      DeleteNexusEndpointResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      GetUserGroupsRequest: {
                        fields: {
                          pageSize: {
                            type: "int32",
                            id: 1
                          },
                          pageToken: {
                            type: "string",
                            id: 2
                          },
                          namespace: {
                            type: "string",
                            id: 3
                          },
                          displayName: {
                            type: "string",
                            id: 4
                          },
                          googleGroup: {
                            type: "GoogleGroupFilter",
                            id: 5
                          },
                          scimGroup: {
                            type: "SCIMGroupFilter",
                            id: 6
                          }
                        },
                        nested: {
                          GoogleGroupFilter: {
                            fields: {
                              emailAddress: {
                                type: "string",
                                id: 1
                              }
                            }
                          },
                          SCIMGroupFilter: {
                            fields: {
                              idpId: {
                                type: "string",
                                id: 1
                              }
                            }
                          }
                        }
                      },
                      GetUserGroupsResponse: {
                        fields: {
                          groups: {
                            rule: "repeated",
                            type: "temporal.api.cloud.identity.v1.UserGroup",
                            id: 1
                          },
                          nextPageToken: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      GetUserGroupRequest: {
                        fields: {
                          groupId: {
                            type: "string",
                            id: 1
                          }
                        }
                      },
                      GetUserGroupResponse: {
                        fields: {
                          group: {
                            type: "temporal.api.cloud.identity.v1.UserGroup",
                            id: 1
                          }
                        }
                      },
                      CreateUserGroupRequest: {
                        fields: {
                          spec: {
                            type: "temporal.api.cloud.identity.v1.UserGroupSpec",
                            id: 1
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      CreateUserGroupResponse: {
                        fields: {
                          groupId: {
                            type: "string",
                            id: 1
                          },
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 2
                          }
                        }
                      },
                      UpdateUserGroupRequest: {
                        fields: {
                          groupId: {
                            type: "string",
                            id: 1
                          },
                          spec: {
                            type: "temporal.api.cloud.identity.v1.UserGroupSpec",
                            id: 2
                          },
                          resourceVersion: {
                            type: "string",
                            id: 3
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 4
                          }
                        }
                      },
                      UpdateUserGroupResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      DeleteUserGroupRequest: {
                        fields: {
                          groupId: {
                            type: "string",
                            id: 1
                          },
                          resourceVersion: {
                            type: "string",
                            id: 2
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      DeleteUserGroupResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      SetUserGroupNamespaceAccessRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          groupId: {
                            type: "string",
                            id: 2
                          },
                          access: {
                            type: "temporal.api.cloud.identity.v1.NamespaceAccess",
                            id: 3
                          },
                          resourceVersion: {
                            type: "string",
                            id: 4
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 5
                          }
                        }
                      },
                      SetUserGroupNamespaceAccessResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      AddUserGroupMemberRequest: {
                        fields: {
                          groupId: {
                            type: "string",
                            id: 1
                          },
                          memberId: {
                            type: "temporal.api.cloud.identity.v1.UserGroupMemberId",
                            id: 2
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      AddUserGroupMemberResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      RemoveUserGroupMemberRequest: {
                        fields: {
                          groupId: {
                            type: "string",
                            id: 1
                          },
                          memberId: {
                            type: "temporal.api.cloud.identity.v1.UserGroupMemberId",
                            id: 2
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      RemoveUserGroupMemberResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      GetUserGroupMembersRequest: {
                        fields: {
                          pageSize: {
                            type: "int32",
                            id: 1
                          },
                          pageToken: {
                            type: "string",
                            id: 2
                          },
                          groupId: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      GetUserGroupMembersResponse: {
                        fields: {
                          members: {
                            rule: "repeated",
                            type: "temporal.api.cloud.identity.v1.UserGroupMember",
                            id: 1
                          },
                          nextPageToken: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      CreateServiceAccountRequest: {
                        fields: {
                          spec: {
                            type: "temporal.api.cloud.identity.v1.ServiceAccountSpec",
                            id: 1
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      CreateServiceAccountResponse: {
                        fields: {
                          serviceAccountId: {
                            type: "string",
                            id: 1
                          },
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 2
                          }
                        }
                      },
                      GetServiceAccountRequest: {
                        fields: {
                          serviceAccountId: {
                            type: "string",
                            id: 1
                          }
                        }
                      },
                      GetServiceAccountResponse: {
                        fields: {
                          serviceAccount: {
                            type: "temporal.api.cloud.identity.v1.ServiceAccount",
                            id: 1
                          }
                        }
                      },
                      GetServiceAccountsRequest: {
                        fields: {
                          pageSize: {
                            type: "int32",
                            id: 1
                          },
                          pageToken: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      GetServiceAccountsResponse: {
                        fields: {
                          serviceAccount: {
                            rule: "repeated",
                            type: "temporal.api.cloud.identity.v1.ServiceAccount",
                            id: 1
                          },
                          nextPageToken: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      UpdateServiceAccountRequest: {
                        fields: {
                          serviceAccountId: {
                            type: "string",
                            id: 1
                          },
                          spec: {
                            type: "temporal.api.cloud.identity.v1.ServiceAccountSpec",
                            id: 2
                          },
                          resourceVersion: {
                            type: "string",
                            id: 3
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 4
                          }
                        }
                      },
                      UpdateServiceAccountResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      DeleteServiceAccountRequest: {
                        fields: {
                          serviceAccountId: {
                            type: "string",
                            id: 1
                          },
                          resourceVersion: {
                            type: "string",
                            id: 2
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      DeleteServiceAccountResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      GetUsageRequest: {
                        fields: {
                          startTimeInclusive: {
                            type: "google.protobuf.Timestamp",
                            id: 1
                          },
                          endTimeExclusive: {
                            type: "google.protobuf.Timestamp",
                            id: 2
                          },
                          pageSize: {
                            type: "int32",
                            id: 3
                          },
                          pageToken: {
                            type: "string",
                            id: 4
                          }
                        }
                      },
                      GetUsageResponse: {
                        fields: {
                          summaries: {
                            rule: "repeated",
                            type: "temporal.api.cloud.usage.v1.Summary",
                            id: 1
                          },
                          nextPageToken: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      GetAccountRequest: {
                        fields: {}
                      },
                      GetAccountResponse: {
                        fields: {
                          account: {
                            type: "temporal.api.cloud.account.v1.Account",
                            id: 1
                          }
                        }
                      },
                      UpdateAccountRequest: {
                        fields: {
                          spec: {
                            type: "temporal.api.cloud.account.v1.AccountSpec",
                            id: 1
                          },
                          resourceVersion: {
                            type: "string",
                            id: 2
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      UpdateAccountResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      CreateNamespaceExportSinkRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          spec: {
                            type: "temporal.api.cloud.namespace.v1.ExportSinkSpec",
                            id: 2
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      CreateNamespaceExportSinkResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      GetNamespaceExportSinkRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          name: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      GetNamespaceExportSinkResponse: {
                        fields: {
                          sink: {
                            type: "temporal.api.cloud.namespace.v1.ExportSink",
                            id: 1
                          }
                        }
                      },
                      GetNamespaceExportSinksRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          pageSize: {
                            type: "int32",
                            id: 2
                          },
                          pageToken: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      GetNamespaceExportSinksResponse: {
                        fields: {
                          sinks: {
                            rule: "repeated",
                            type: "temporal.api.cloud.namespace.v1.ExportSink",
                            id: 1
                          },
                          nextPageToken: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      UpdateNamespaceExportSinkRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          spec: {
                            type: "temporal.api.cloud.namespace.v1.ExportSinkSpec",
                            id: 2
                          },
                          resourceVersion: {
                            type: "string",
                            id: 3
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 4
                          }
                        }
                      },
                      UpdateNamespaceExportSinkResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      DeleteNamespaceExportSinkRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          name: {
                            type: "string",
                            id: 2
                          },
                          resourceVersion: {
                            type: "string",
                            id: 3
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 4
                          }
                        }
                      },
                      DeleteNamespaceExportSinkResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      ValidateNamespaceExportSinkRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          spec: {
                            type: "temporal.api.cloud.namespace.v1.ExportSinkSpec",
                            id: 2
                          }
                        }
                      },
                      ValidateNamespaceExportSinkResponse: {
                        fields: {}
                      },
                      UpdateNamespaceTagsRequest: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          tagsToUpsert: {
                            keyType: "string",
                            type: "string",
                            id: 2
                          },
                          tagsToRemove: {
                            rule: "repeated",
                            type: "string",
                            id: 3
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 4
                          }
                        }
                      },
                      UpdateNamespaceTagsResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      },
                      CreateConnectivityRuleRequest: {
                        fields: {
                          spec: {
                            type: "temporal.api.cloud.connectivityrule.v1.ConnectivityRuleSpec",
                            id: 1
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      CreateConnectivityRuleResponse: {
                        fields: {
                          connectivityRuleId: {
                            type: "string",
                            id: 1
                          },
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 2
                          }
                        }
                      },
                      GetConnectivityRuleRequest: {
                        fields: {
                          connectivityRuleId: {
                            type: "string",
                            id: 1
                          }
                        }
                      },
                      GetConnectivityRuleResponse: {
                        fields: {
                          connectivityRule: {
                            type: "temporal.api.cloud.connectivityrule.v1.ConnectivityRule",
                            id: 1
                          }
                        }
                      },
                      GetConnectivityRulesRequest: {
                        fields: {
                          pageSize: {
                            type: "int32",
                            id: 1
                          },
                          pageToken: {
                            type: "string",
                            id: 2
                          },
                          namespace: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      GetConnectivityRulesResponse: {
                        fields: {
                          connectivityRules: {
                            rule: "repeated",
                            type: "temporal.api.cloud.connectivityrule.v1.ConnectivityRule",
                            id: 1
                          },
                          nextPageToken: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      DeleteConnectivityRuleRequest: {
                        fields: {
                          connectivityRuleId: {
                            type: "string",
                            id: 1
                          },
                          resourceVersion: {
                            type: "string",
                            id: 2
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      DeleteConnectivityRuleResponse: {
                        fields: {
                          asyncOperation: {
                            type: "temporal.api.cloud.operation.v1.AsyncOperation",
                            id: 1
                          }
                        }
                      }
                    }
                  }
                }
              },
              operation: {
                nested: {
                  v1: {
                    options: {
                      go_package: "go.temporal.io/api/cloud/operation/v1;operation",
                      java_package: "io.temporal.api.cloud.operation.v1",
                      java_multiple_files: true,
                      java_outer_classname: "MessageProto",
                      ruby_package: "Temporalio::Api::Cloud::Operation::V1",
                      csharp_namespace: "Temporalio.Api.Cloud.Operation.V1"
                    },
                    nested: {
                      AsyncOperation: {
                        fields: {
                          id: {
                            type: "string",
                            id: 1
                          },
                          stateDeprecated: {
                            type: "string",
                            id: 2,
                            options: {
                              deprecated: true
                            }
                          },
                          state: {
                            type: "State",
                            id: 9
                          },
                          checkDuration: {
                            type: "google.protobuf.Duration",
                            id: 3
                          },
                          operationType: {
                            type: "string",
                            id: 4
                          },
                          operationInput: {
                            type: "google.protobuf.Any",
                            id: 5
                          },
                          failureReason: {
                            type: "string",
                            id: 6
                          },
                          startedTime: {
                            type: "google.protobuf.Timestamp",
                            id: 7
                          },
                          finishedTime: {
                            type: "google.protobuf.Timestamp",
                            id: 8
                          }
                        },
                        nested: {
                          State: {
                            values: {
                              STATE_UNSPECIFIED: 0,
                              STATE_PENDING: 1,
                              STATE_IN_PROGRESS: 2,
                              STATE_FAILED: 3,
                              STATE_CANCELLED: 4,
                              STATE_FULFILLED: 5,
                              STATE_REJECTED: 6
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              identity: {
                nested: {
                  v1: {
                    options: {
                      go_package: "go.temporal.io/api/cloud/identity/v1;identity",
                      java_package: "io.temporal.api.cloud.identity.v1",
                      java_multiple_files: true,
                      java_outer_classname: "MessageProto",
                      ruby_package: "Temporalio::Api::Cloud::Identity::V1",
                      csharp_namespace: "Temporalio.Api.Cloud.Identity.V1"
                    },
                    nested: {
                      AccountAccess: {
                        fields: {
                          roleDeprecated: {
                            type: "string",
                            id: 1,
                            options: {
                              deprecated: true
                            }
                          },
                          role: {
                            type: "Role",
                            id: 2
                          }
                        },
                        nested: {
                          Role: {
                            values: {
                              ROLE_UNSPECIFIED: 0,
                              ROLE_OWNER: 1,
                              ROLE_ADMIN: 2,
                              ROLE_DEVELOPER: 3,
                              ROLE_FINANCE_ADMIN: 4,
                              ROLE_READ: 5,
                              ROLE_METRICS_READ: 6
                            }
                          }
                        }
                      },
                      NamespaceAccess: {
                        fields: {
                          permissionDeprecated: {
                            type: "string",
                            id: 1,
                            options: {
                              deprecated: true
                            }
                          },
                          permission: {
                            type: "Permission",
                            id: 2
                          }
                        },
                        nested: {
                          Permission: {
                            values: {
                              PERMISSION_UNSPECIFIED: 0,
                              PERMISSION_ADMIN: 1,
                              PERMISSION_WRITE: 2,
                              PERMISSION_READ: 3
                            }
                          }
                        }
                      },
                      OwnerType: {
                        values: {
                          OWNER_TYPE_UNSPECIFIED: 0,
                          OWNER_TYPE_USER: 1,
                          OWNER_TYPE_SERVICE_ACCOUNT: 2
                        }
                      },
                      Access: {
                        fields: {
                          accountAccess: {
                            type: "AccountAccess",
                            id: 1
                          },
                          namespaceAccesses: {
                            keyType: "string",
                            type: "NamespaceAccess",
                            id: 2
                          }
                        }
                      },
                      NamespaceScopedAccess: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          access: {
                            type: "NamespaceAccess",
                            id: 2
                          }
                        }
                      },
                      UserSpec: {
                        fields: {
                          email: {
                            type: "string",
                            id: 1
                          },
                          access: {
                            type: "Access",
                            id: 2
                          }
                        }
                      },
                      Invitation: {
                        fields: {
                          createdTime: {
                            type: "google.protobuf.Timestamp",
                            id: 1
                          },
                          expiredTime: {
                            type: "google.protobuf.Timestamp",
                            id: 2
                          }
                        }
                      },
                      User: {
                        fields: {
                          id: {
                            type: "string",
                            id: 1
                          },
                          resourceVersion: {
                            type: "string",
                            id: 2
                          },
                          spec: {
                            type: "UserSpec",
                            id: 3
                          },
                          stateDeprecated: {
                            type: "string",
                            id: 4,
                            options: {
                              deprecated: true
                            }
                          },
                          state: {
                            type: "temporal.api.cloud.resource.v1.ResourceState",
                            id: 9
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 5
                          },
                          invitation: {
                            type: "Invitation",
                            id: 6
                          },
                          createdTime: {
                            type: "google.protobuf.Timestamp",
                            id: 7
                          },
                          lastModifiedTime: {
                            type: "google.protobuf.Timestamp",
                            id: 8
                          }
                        }
                      },
                      GoogleGroupSpec: {
                        fields: {
                          emailAddress: {
                            type: "string",
                            id: 1
                          }
                        }
                      },
                      SCIMGroupSpec: {
                        fields: {
                          idpId: {
                            type: "string",
                            id: 1
                          }
                        }
                      },
                      CloudGroupSpec: {
                        fields: {}
                      },
                      UserGroupSpec: {
                        oneofs: {
                          groupType: {
                            oneof: [
                              "googleGroup",
                              "scimGroup",
                              "cloudGroup"
                            ]
                          }
                        },
                        fields: {
                          displayName: {
                            type: "string",
                            id: 1
                          },
                          access: {
                            type: "Access",
                            id: 2
                          },
                          googleGroup: {
                            type: "GoogleGroupSpec",
                            id: 3
                          },
                          scimGroup: {
                            type: "SCIMGroupSpec",
                            id: 4
                          },
                          cloudGroup: {
                            type: "CloudGroupSpec",
                            id: 5
                          }
                        }
                      },
                      UserGroup: {
                        fields: {
                          id: {
                            type: "string",
                            id: 1
                          },
                          resourceVersion: {
                            type: "string",
                            id: 2
                          },
                          spec: {
                            type: "UserGroupSpec",
                            id: 3
                          },
                          stateDeprecated: {
                            type: "string",
                            id: 4,
                            options: {
                              deprecated: true
                            }
                          },
                          state: {
                            type: "temporal.api.cloud.resource.v1.ResourceState",
                            id: 8
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 5
                          },
                          createdTime: {
                            type: "google.protobuf.Timestamp",
                            id: 6
                          },
                          lastModifiedTime: {
                            type: "google.protobuf.Timestamp",
                            id: 7
                          }
                        }
                      },
                      UserGroupMemberId: {
                        oneofs: {
                          memberType: {
                            oneof: [
                              "userId"
                            ]
                          }
                        },
                        fields: {
                          userId: {
                            type: "string",
                            id: 1
                          }
                        }
                      },
                      UserGroupMember: {
                        fields: {
                          memberId: {
                            type: "UserGroupMemberId",
                            id: 1
                          },
                          createdTime: {
                            type: "google.protobuf.Timestamp",
                            id: 2
                          }
                        }
                      },
                      ServiceAccount: {
                        fields: {
                          id: {
                            type: "string",
                            id: 1
                          },
                          resourceVersion: {
                            type: "string",
                            id: 2
                          },
                          spec: {
                            type: "ServiceAccountSpec",
                            id: 3
                          },
                          stateDeprecated: {
                            type: "string",
                            id: 4,
                            options: {
                              deprecated: true
                            }
                          },
                          state: {
                            type: "temporal.api.cloud.resource.v1.ResourceState",
                            id: 8
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 5
                          },
                          createdTime: {
                            type: "google.protobuf.Timestamp",
                            id: 6
                          },
                          lastModifiedTime: {
                            type: "google.protobuf.Timestamp",
                            id: 7
                          }
                        }
                      },
                      ServiceAccountSpec: {
                        fields: {
                          name: {
                            type: "string",
                            id: 1
                          },
                          access: {
                            type: "Access",
                            id: 2
                          },
                          namespaceScopedAccess: {
                            type: "NamespaceScopedAccess",
                            id: 4
                          },
                          description: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      ApiKey: {
                        fields: {
                          id: {
                            type: "string",
                            id: 1
                          },
                          resourceVersion: {
                            type: "string",
                            id: 2
                          },
                          spec: {
                            type: "ApiKeySpec",
                            id: 3
                          },
                          stateDeprecated: {
                            type: "string",
                            id: 4,
                            options: {
                              deprecated: true
                            }
                          },
                          state: {
                            type: "temporal.api.cloud.resource.v1.ResourceState",
                            id: 8
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 5
                          },
                          createdTime: {
                            type: "google.protobuf.Timestamp",
                            id: 6
                          },
                          lastModifiedTime: {
                            type: "google.protobuf.Timestamp",
                            id: 7
                          }
                        }
                      },
                      ApiKeySpec: {
                        fields: {
                          ownerId: {
                            type: "string",
                            id: 1
                          },
                          ownerTypeDeprecated: {
                            type: "string",
                            id: 2,
                            options: {
                              deprecated: true
                            }
                          },
                          ownerType: {
                            type: "OwnerType",
                            id: 7
                          },
                          displayName: {
                            type: "string",
                            id: 3
                          },
                          description: {
                            type: "string",
                            id: 4
                          },
                          expiryTime: {
                            type: "google.protobuf.Timestamp",
                            id: 5
                          },
                          disabled: {
                            type: "bool",
                            id: 6
                          }
                        }
                      }
                    }
                  }
                }
              },
              resource: {
                nested: {
                  v1: {
                    options: {
                      go_package: "go.temporal.io/api/cloud/resource/v1;resource",
                      java_package: "io.temporal.api.cloud.resource.v1",
                      java_multiple_files: true,
                      java_outer_classname: "MessageProto",
                      ruby_package: "Temporalio::Api::Cloud::Resource::V1",
                      csharp_namespace: "Temporalio.Api.Cloud.Resource.V1"
                    },
                    nested: {
                      ResourceState: {
                        values: {
                          RESOURCE_STATE_UNSPECIFIED: 0,
                          RESOURCE_STATE_ACTIVATING: 1,
                          RESOURCE_STATE_ACTIVATION_FAILED: 2,
                          RESOURCE_STATE_ACTIVE: 3,
                          RESOURCE_STATE_UPDATING: 4,
                          RESOURCE_STATE_UPDATE_FAILED: 5,
                          RESOURCE_STATE_DELETING: 6,
                          RESOURCE_STATE_DELETE_FAILED: 7,
                          RESOURCE_STATE_DELETED: 8,
                          RESOURCE_STATE_SUSPENDED: 9,
                          RESOURCE_STATE_EXPIRED: 10
                        }
                      }
                    }
                  }
                }
              },
              namespace: {
                nested: {
                  v1: {
                    options: {
                      go_package: "go.temporal.io/api/cloud/namespace/v1;namespace",
                      java_package: "io.temporal.api.cloud.namespace.v1",
                      java_multiple_files: true,
                      java_outer_classname: "MessageProto",
                      ruby_package: "Temporalio::Api::Cloud::Namespace::V1",
                      csharp_namespace: "Temporalio.Api.Cloud.Namespace.V1"
                    },
                    nested: {
                      CertificateFilterSpec: {
                        fields: {
                          commonName: {
                            type: "string",
                            id: 1
                          },
                          organization: {
                            type: "string",
                            id: 2
                          },
                          organizationalUnit: {
                            type: "string",
                            id: 3
                          },
                          subjectAlternativeName: {
                            type: "string",
                            id: 4
                          }
                        }
                      },
                      MtlsAuthSpec: {
                        fields: {
                          acceptedClientCaDeprecated: {
                            type: "string",
                            id: 1
                          },
                          acceptedClientCa: {
                            type: "bytes",
                            id: 4
                          },
                          certificateFilters: {
                            rule: "repeated",
                            type: "CertificateFilterSpec",
                            id: 2
                          },
                          enabled: {
                            type: "bool",
                            id: 3
                          }
                        }
                      },
                      ApiKeyAuthSpec: {
                        fields: {
                          enabled: {
                            type: "bool",
                            id: 1
                          }
                        }
                      },
                      CodecServerSpec: {
                        fields: {
                          endpoint: {
                            type: "string",
                            id: 1
                          },
                          passAccessToken: {
                            type: "bool",
                            id: 2
                          },
                          includeCrossOriginCredentials: {
                            type: "bool",
                            id: 3
                          },
                          customErrorMessage: {
                            type: "CustomErrorMessage",
                            id: 4
                          }
                        },
                        nested: {
                          CustomErrorMessage: {
                            fields: {
                              "default": {
                                type: "ErrorMessage",
                                id: 1
                              }
                            },
                            nested: {
                              ErrorMessage: {
                                fields: {
                                  message: {
                                    type: "string",
                                    id: 1
                                  },
                                  link: {
                                    type: "string",
                                    id: 2
                                  }
                                }
                              }
                            }
                          }
                        }
                      },
                      LifecycleSpec: {
                        fields: {
                          enableDeleteProtection: {
                            type: "bool",
                            id: 1
                          }
                        }
                      },
                      HighAvailabilitySpec: {
                        fields: {
                          disableManagedFailover: {
                            type: "bool",
                            id: 1
                          }
                        }
                      },
                      NamespaceSpec: {
                        fields: {
                          name: {
                            type: "string",
                            id: 1
                          },
                          regions: {
                            rule: "repeated",
                            type: "string",
                            id: 2
                          },
                          retentionDays: {
                            type: "int32",
                            id: 3
                          },
                          mtlsAuth: {
                            type: "MtlsAuthSpec",
                            id: 4
                          },
                          apiKeyAuth: {
                            type: "ApiKeyAuthSpec",
                            id: 7
                          },
                          customSearchAttributes: {
                            keyType: "string",
                            type: "string",
                            id: 5,
                            options: {
                              deprecated: true
                            }
                          },
                          searchAttributes: {
                            keyType: "string",
                            type: "SearchAttributeType",
                            id: 8
                          },
                          codecServer: {
                            type: "CodecServerSpec",
                            id: 6
                          },
                          lifecycle: {
                            type: "LifecycleSpec",
                            id: 9
                          },
                          highAvailability: {
                            type: "HighAvailabilitySpec",
                            id: 10
                          },
                          connectivityRuleIds: {
                            rule: "repeated",
                            type: "string",
                            id: 11
                          }
                        },
                        nested: {
                          SearchAttributeType: {
                            values: {
                              SEARCH_ATTRIBUTE_TYPE_UNSPECIFIED: 0,
                              SEARCH_ATTRIBUTE_TYPE_TEXT: 1,
                              SEARCH_ATTRIBUTE_TYPE_KEYWORD: 2,
                              SEARCH_ATTRIBUTE_TYPE_INT: 3,
                              SEARCH_ATTRIBUTE_TYPE_DOUBLE: 4,
                              SEARCH_ATTRIBUTE_TYPE_BOOL: 5,
                              SEARCH_ATTRIBUTE_TYPE_DATETIME: 6,
                              SEARCH_ATTRIBUTE_TYPE_KEYWORD_LIST: 7
                            }
                          }
                        }
                      },
                      Endpoints: {
                        fields: {
                          webAddress: {
                            type: "string",
                            id: 1
                          },
                          mtlsGrpcAddress: {
                            type: "string",
                            id: 2
                          },
                          grpcAddress: {
                            type: "string",
                            id: 3
                          }
                        }
                      },
                      Limits: {
                        fields: {
                          actionsPerSecondLimit: {
                            type: "int32",
                            id: 1
                          }
                        }
                      },
                      AWSPrivateLinkInfo: {
                        fields: {
                          allowedPrincipalArns: {
                            rule: "repeated",
                            type: "string",
                            id: 1
                          },
                          vpcEndpointServiceNames: {
                            rule: "repeated",
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      PrivateConnectivity: {
                        fields: {
                          region: {
                            type: "string",
                            id: 1
                          },
                          awsPrivateLink: {
                            type: "AWSPrivateLinkInfo",
                            id: 2
                          }
                        }
                      },
                      Namespace: {
                        fields: {
                          namespace: {
                            type: "string",
                            id: 1
                          },
                          resourceVersion: {
                            type: "string",
                            id: 2
                          },
                          spec: {
                            type: "NamespaceSpec",
                            id: 3
                          },
                          stateDeprecated: {
                            type: "string",
                            id: 4,
                            options: {
                              deprecated: true
                            }
                          },
                          state: {
                            type: "temporal.api.cloud.resource.v1.ResourceState",
                            id: 13
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 5
                          },
                          endpoints: {
                            type: "Endpoints",
                            id: 6
                          },
                          activeRegion: {
                            type: "string",
                            id: 7
                          },
                          limits: {
                            type: "Limits",
                            id: 8
                          },
                          privateConnectivities: {
                            rule: "repeated",
                            type: "PrivateConnectivity",
                            id: 9
                          },
                          createdTime: {
                            type: "google.protobuf.Timestamp",
                            id: 10
                          },
                          lastModifiedTime: {
                            type: "google.protobuf.Timestamp",
                            id: 11
                          },
                          regionStatus: {
                            keyType: "string",
                            type: "NamespaceRegionStatus",
                            id: 12
                          },
                          connectivityRules: {
                            rule: "repeated",
                            type: "temporal.api.cloud.connectivityrule.v1.ConnectivityRule",
                            id: 14
                          },
                          tags: {
                            keyType: "string",
                            type: "string",
                            id: 15
                          }
                        }
                      },
                      NamespaceRegionStatus: {
                        fields: {
                          stateDeprecated: {
                            type: "string",
                            id: 1,
                            options: {
                              deprecated: true
                            }
                          },
                          state: {
                            type: "State",
                            id: 3
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 2
                          }
                        },
                        nested: {
                          State: {
                            values: {
                              STATE_UNSPECIFIED: 0,
                              STATE_ADDING: 1,
                              STATE_ACTIVE: 2,
                              STATE_PASSIVE: 3,
                              STATE_REMOVING: 4,
                              STATE_FAILED: 5
                            }
                          }
                        }
                      },
                      ExportSinkSpec: {
                        fields: {
                          name: {
                            type: "string",
                            id: 1
                          },
                          enabled: {
                            type: "bool",
                            id: 2
                          },
                          s3: {
                            type: "temporal.api.cloud.sink.v1.S3Spec",
                            id: 3
                          },
                          gcs: {
                            type: "temporal.api.cloud.sink.v1.GCSSpec",
                            id: 4
                          }
                        }
                      },
                      ExportSink: {
                        fields: {
                          name: {
                            type: "string",
                            id: 1
                          },
                          resourceVersion: {
                            type: "string",
                            id: 2
                          },
                          state: {
                            type: "temporal.api.cloud.resource.v1.ResourceState",
                            id: 3
                          },
                          spec: {
                            type: "ExportSinkSpec",
                            id: 4
                          },
                          health: {
                            type: "Health",
                            id: 5
                          },
                          errorMessage: {
                            type: "string",
                            id: 6
                          },
                          latestDataExportTime: {
                            type: "google.protobuf.Timestamp",
                            id: 7
                          },
                          lastHealthCheckTime: {
                            type: "google.protobuf.Timestamp",
                            id: 8
                          }
                        },
                        nested: {
                          Health: {
                            values: {
                              HEALTH_UNSPECIFIED: 0,
                              HEALTH_OK: 1,
                              HEALTH_ERROR_INTERNAL: 2,
                              HEALTH_ERROR_USER_CONFIGURATION: 3
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              sink: {
                nested: {
                  v1: {
                    options: {
                      go_package: "go.temporal.io/api/cloud/sink/v1;sink",
                      java_package: "io.temporal.api.cloud.sink.v1",
                      java_multiple_files: true,
                      java_outer_classname: "MessageProto",
                      ruby_package: "Temporalio::Api::Cloud::Sink::V1",
                      csharp_namespace: "Temporalio.Api.Cloud.Sink.V1"
                    },
                    nested: {
                      S3Spec: {
                        fields: {
                          roleName: {
                            type: "string",
                            id: 1
                          },
                          bucketName: {
                            type: "string",
                            id: 2
                          },
                          region: {
                            type: "string",
                            id: 3
                          },
                          kmsArn: {
                            type: "string",
                            id: 4
                          },
                          awsAccountId: {
                            type: "string",
                            id: 5
                          }
                        }
                      },
                      GCSSpec: {
                        fields: {
                          saId: {
                            type: "string",
                            id: 1
                          },
                          bucketName: {
                            type: "string",
                            id: 2
                          },
                          gcpProjectId: {
                            type: "string",
                            id: 3
                          },
                          region: {
                            type: "string",
                            id: 4
                          }
                        }
                      }
                    }
                  }
                }
              },
              connectivityrule: {
                nested: {
                  v1: {
                    options: {
                      go_package: "go.temporal.io/api/cloud/connectivityrule/v1;connectivityrule",
                      java_package: "io.temporal.api.cloud.connectivityrule.v1",
                      java_multiple_files: true,
                      java_outer_classname: "MessageProto",
                      ruby_package: "Temporalio::Api::Cloud::ConnectivityRule::V1",
                      csharp_namespace: "Temporalio.Api.Cloud.ConnectivityRule.V1"
                    },
                    nested: {
                      ConnectivityRule: {
                        fields: {
                          id: {
                            type: "string",
                            id: 1
                          },
                          spec: {
                            type: "ConnectivityRuleSpec",
                            id: 2
                          },
                          resourceVersion: {
                            type: "string",
                            id: 4
                          },
                          state: {
                            type: "temporal.api.cloud.resource.v1.ResourceState",
                            id: 5
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 6
                          },
                          createdTime: {
                            type: "google.protobuf.Timestamp",
                            id: 7
                          }
                        },
                        reserved: [
                          [
                            3,
                            3
                          ]
                        ]
                      },
                      ConnectivityRuleSpec: {
                        oneofs: {
                          connectionType: {
                            oneof: [
                              "publicRule",
                              "privateRule"
                            ]
                          }
                        },
                        fields: {
                          publicRule: {
                            type: "PublicConnectivityRule",
                            id: 1
                          },
                          privateRule: {
                            type: "PrivateConnectivityRule",
                            id: 2
                          }
                        }
                      },
                      PublicConnectivityRule: {
                        fields: {}
                      },
                      PrivateConnectivityRule: {
                        fields: {
                          connectionId: {
                            type: "string",
                            id: 1
                          },
                          gcpProjectId: {
                            type: "string",
                            id: 2
                          },
                          region: {
                            type: "string",
                            id: 3
                          }
                        },
                        reserved: [
                          [
                            4,
                            4
                          ]
                        ]
                      }
                    }
                  }
                }
              },
              nexus: {
                nested: {
                  v1: {
                    options: {
                      go_package: "go.temporal.io/api/cloud/nexus/v1;nexus",
                      java_package: "io.temporal.api.cloud.nexus.v1",
                      java_multiple_files: true,
                      java_outer_classname: "MessageProto",
                      ruby_package: "Temporalio::Api::Cloud::Nexus::V1",
                      csharp_namespace: "Temporalio.Api.Cloud.Nexus.V1"
                    },
                    nested: {
                      EndpointSpec: {
                        fields: {
                          name: {
                            type: "string",
                            id: 1
                          },
                          targetSpec: {
                            type: "EndpointTargetSpec",
                            id: 2
                          },
                          policySpecs: {
                            rule: "repeated",
                            type: "EndpointPolicySpec",
                            id: 3
                          },
                          descriptionDeprecated: {
                            type: "string",
                            id: 4,
                            options: {
                              deprecated: true
                            }
                          },
                          description: {
                            type: "temporal.api.common.v1.Payload",
                            id: 5
                          }
                        }
                      },
                      EndpointTargetSpec: {
                        oneofs: {
                          variant: {
                            oneof: [
                              "workerTargetSpec"
                            ]
                          }
                        },
                        fields: {
                          workerTargetSpec: {
                            type: "WorkerTargetSpec",
                            id: 1
                          }
                        }
                      },
                      WorkerTargetSpec: {
                        fields: {
                          namespaceId: {
                            type: "string",
                            id: 1
                          },
                          taskQueue: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      EndpointPolicySpec: {
                        oneofs: {
                          variant: {
                            oneof: [
                              "allowedCloudNamespacePolicySpec"
                            ]
                          }
                        },
                        fields: {
                          allowedCloudNamespacePolicySpec: {
                            type: "AllowedCloudNamespacePolicySpec",
                            id: 1
                          }
                        }
                      },
                      AllowedCloudNamespacePolicySpec: {
                        fields: {
                          namespaceId: {
                            type: "string",
                            id: 1
                          }
                        }
                      },
                      Endpoint: {
                        fields: {
                          id: {
                            type: "string",
                            id: 1
                          },
                          resourceVersion: {
                            type: "string",
                            id: 2
                          },
                          spec: {
                            type: "EndpointSpec",
                            id: 3
                          },
                          state: {
                            type: "temporal.api.cloud.resource.v1.ResourceState",
                            id: 4
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 5
                          },
                          createdTime: {
                            type: "google.protobuf.Timestamp",
                            id: 6
                          },
                          lastModifiedTime: {
                            type: "google.protobuf.Timestamp",
                            id: 7
                          }
                        }
                      }
                    }
                  }
                }
              },
              region: {
                nested: {
                  v1: {
                    options: {
                      go_package: "go.temporal.io/api/cloud/region/v1;region",
                      java_package: "io.temporal.api.cloud.region.v1",
                      java_multiple_files: true,
                      java_outer_classname: "MessageProto",
                      ruby_package: "Temporalio::Api::Cloud::Region::V1",
                      csharp_namespace: "Temporalio.Api.Cloud.Region.V1"
                    },
                    nested: {
                      Region: {
                        fields: {
                          id: {
                            type: "string",
                            id: 1
                          },
                          cloudProviderDeprecated: {
                            type: "string",
                            id: 2,
                            options: {
                              deprecated: true
                            }
                          },
                          cloudProvider: {
                            type: "CloudProvider",
                            id: 5
                          },
                          cloudProviderRegion: {
                            type: "string",
                            id: 3
                          },
                          location: {
                            type: "string",
                            id: 4
                          }
                        },
                        nested: {
                          CloudProvider: {
                            values: {
                              CLOUD_PROVIDER_UNSPECIFIED: 0,
                              CLOUD_PROVIDER_AWS: 1,
                              CLOUD_PROVIDER_GCP: 2
                            }
                          }
                        }
                      }
                    }
                  }
                }
              },
              account: {
                nested: {
                  v1: {
                    options: {
                      go_package: "go.temporal.io/api/cloud/account/v1;account",
                      java_package: "io.temporal.api.cloud.account.v1",
                      java_multiple_files: true,
                      java_outer_classname: "MessageProto",
                      ruby_package: "Temporalio::Api::Cloud::Account::V1",
                      csharp_namespace: "Temporalio.Api.Cloud.Account.V1"
                    },
                    nested: {
                      MetricsSpec: {
                        fields: {
                          acceptedClientCa: {
                            type: "bytes",
                            id: 2
                          }
                        }
                      },
                      AccountSpec: {
                        fields: {
                          metrics: {
                            type: "MetricsSpec",
                            id: 1
                          }
                        }
                      },
                      Metrics: {
                        fields: {
                          uri: {
                            type: "string",
                            id: 1
                          }
                        }
                      },
                      Account: {
                        fields: {
                          id: {
                            type: "string",
                            id: 1
                          },
                          spec: {
                            type: "AccountSpec",
                            id: 2
                          },
                          resourceVersion: {
                            type: "string",
                            id: 3
                          },
                          state: {
                            type: "temporal.api.cloud.resource.v1.ResourceState",
                            id: 4
                          },
                          asyncOperationId: {
                            type: "string",
                            id: 5
                          },
                          metrics: {
                            type: "Metrics",
                            id: 6
                          }
                        }
                      }
                    }
                  }
                }
              },
              usage: {
                nested: {
                  v1: {
                    options: {
                      go_package: "go.temporal.io/api/cloud/usage/v1;usage",
                      java_package: "io.temporal.api.cloud.usage.v1",
                      java_multiple_files: true,
                      java_outer_classname: "MessageProto",
                      ruby_package: "Temporalio::Api::Cloud::Usage::V1",
                      csharp_namespace: "Temporalio.Api.Cloud.Usage.V1"
                    },
                    nested: {
                      Summary: {
                        fields: {
                          startTime: {
                            type: "google.protobuf.Timestamp",
                            id: 1
                          },
                          endTime: {
                            type: "google.protobuf.Timestamp",
                            id: 2
                          },
                          recordGroups: {
                            rule: "repeated",
                            type: "RecordGroup",
                            id: 3
                          },
                          incomplete: {
                            type: "bool",
                            id: 4
                          }
                        }
                      },
                      RecordGroup: {
                        fields: {
                          groupBys: {
                            rule: "repeated",
                            type: "GroupBy",
                            id: 1
                          },
                          records: {
                            rule: "repeated",
                            type: "Record",
                            id: 2
                          }
                        }
                      },
                      GroupBy: {
                        fields: {
                          key: {
                            type: "GroupByKey",
                            id: 1
                          },
                          value: {
                            type: "string",
                            id: 2
                          }
                        }
                      },
                      Record: {
                        fields: {
                          type: {
                            type: "RecordType",
                            id: 1
                          },
                          unit: {
                            type: "RecordUnit",
                            id: 2
                          },
                          value: {
                            type: "double",
                            id: 3
                          }
                        }
                      },
                      RecordType: {
                        values: {
                          RECORD_TYPE_UNSPECIFIED: 0,
                          RECORD_TYPE_ACTIONS: 1,
                          RECORD_TYPE_ACTIVE_STORAGE: 2,
                          RECORD_TYPE_RETAINED_STORAGE: 3
                        }
                      },
                      RecordUnit: {
                        values: {
                          RECORD_UNIT_UNSPECIFIED: 0,
                          RECORD_UNIT_NUMBER: 1,
                          RECORD_UNIT_BYTE_SECONDS: 2
                        }
                      },
                      GroupByKey: {
                        values: {
                          GROUP_BY_KEY_UNSPECIFIED: 0,
                          GROUP_BY_KEY_NAMESPACE: 1
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          errordetails: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/errordetails/v1;errordetails",
                  java_package: "io.temporal.api.errordetails.v1",
                  java_multiple_files: true,
                  java_outer_classname: "MessageProto",
                  ruby_package: "Temporalio::Api::ErrorDetails::V1",
                  csharp_namespace: "Temporalio.Api.ErrorDetails.V1"
                },
                nested: {
                  NotFoundFailure: {
                    fields: {
                      currentCluster: {
                        type: "string",
                        id: 1
                      },
                      activeCluster: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  WorkflowExecutionAlreadyStartedFailure: {
                    fields: {
                      startRequestId: {
                        type: "string",
                        id: 1
                      },
                      runId: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  NamespaceNotActiveFailure: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      currentCluster: {
                        type: "string",
                        id: 2
                      },
                      activeCluster: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  NamespaceUnavailableFailure: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  NamespaceInvalidStateFailure: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      },
                      state: {
                        type: "temporal.api.enums.v1.NamespaceState",
                        id: 2
                      },
                      allowedStates: {
                        rule: "repeated",
                        type: "temporal.api.enums.v1.NamespaceState",
                        id: 3
                      }
                    }
                  },
                  NamespaceNotFoundFailure: {
                    fields: {
                      namespace: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  NamespaceAlreadyExistsFailure: {
                    fields: {}
                  },
                  ClientVersionNotSupportedFailure: {
                    fields: {
                      clientVersion: {
                        type: "string",
                        id: 1
                      },
                      clientName: {
                        type: "string",
                        id: 2
                      },
                      supportedVersions: {
                        type: "string",
                        id: 3
                      }
                    }
                  },
                  ServerVersionNotSupportedFailure: {
                    fields: {
                      serverVersion: {
                        type: "string",
                        id: 1
                      },
                      clientSupportedServerVersions: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  CancellationAlreadyRequestedFailure: {
                    fields: {}
                  },
                  QueryFailedFailure: {
                    fields: {
                      failure: {
                        type: "temporal.api.failure.v1.Failure",
                        id: 1
                      }
                    }
                  },
                  PermissionDeniedFailure: {
                    fields: {
                      reason: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  ResourceExhaustedFailure: {
                    fields: {
                      cause: {
                        type: "temporal.api.enums.v1.ResourceExhaustedCause",
                        id: 1
                      },
                      scope: {
                        type: "temporal.api.enums.v1.ResourceExhaustedScope",
                        id: 2
                      }
                    }
                  },
                  SystemWorkflowFailure: {
                    fields: {
                      workflowExecution: {
                        type: "temporal.api.common.v1.WorkflowExecution",
                        id: 1
                      },
                      workflowError: {
                        type: "string",
                        id: 2
                      }
                    }
                  },
                  WorkflowNotReadyFailure: {
                    fields: {}
                  },
                  NewerBuildExistsFailure: {
                    fields: {
                      defaultBuildId: {
                        type: "string",
                        id: 1
                      }
                    }
                  },
                  MultiOperationExecutionFailure: {
                    fields: {
                      statuses: {
                        rule: "repeated",
                        type: "OperationStatus",
                        id: 1
                      }
                    },
                    nested: {
                      OperationStatus: {
                        fields: {
                          code: {
                            type: "int32",
                            id: 1
                          },
                          message: {
                            type: "string",
                            id: 2
                          },
                          details: {
                            rule: "repeated",
                            type: "google.protobuf.Any",
                            id: 3
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          testservice: {
            nested: {
              v1: {
                options: {
                  go_package: "go.temporal.io/api/testservice/v1;testservice",
                  java_package: "io.temporal.api.testservice.v1",
                  java_multiple_files: true,
                  java_outer_classname: "ServiceProto",
                  ruby_package: "Temporalio::Api::TestService::V1",
                  csharp_namespace: "Temporalio.Api.TestService.V1"
                },
                nested: {
                  LockTimeSkippingRequest: {
                    fields: {}
                  },
                  LockTimeSkippingResponse: {
                    fields: {}
                  },
                  UnlockTimeSkippingRequest: {
                    fields: {}
                  },
                  UnlockTimeSkippingResponse: {
                    fields: {}
                  },
                  SleepUntilRequest: {
                    fields: {
                      timestamp: {
                        type: "google.protobuf.Timestamp",
                        id: 1
                      }
                    }
                  },
                  SleepRequest: {
                    fields: {
                      duration: {
                        type: "google.protobuf.Duration",
                        id: 1
                      }
                    }
                  },
                  SleepResponse: {
                    fields: {}
                  },
                  GetCurrentTimeResponse: {
                    fields: {
                      time: {
                        type: "google.protobuf.Timestamp",
                        id: 1
                      }
                    }
                  },
                  TestService: {
                    methods: {
                      LockTimeSkipping: {
                        requestType: "LockTimeSkippingRequest",
                        responseType: "LockTimeSkippingResponse"
                      },
                      UnlockTimeSkipping: {
                        requestType: "UnlockTimeSkippingRequest",
                        responseType: "UnlockTimeSkippingResponse"
                      },
                      Sleep: {
                        requestType: "SleepRequest",
                        responseType: "SleepResponse"
                      },
                      SleepUntil: {
                        requestType: "SleepUntilRequest",
                        responseType: "SleepResponse"
                      },
                      UnlockTimeSkippingWithSleep: {
                        requestType: "SleepRequest",
                        responseType: "SleepResponse"
                      },
                      GetCurrentTime: {
                        requestType: "google.protobuf.Empty",
                        responseType: "GetCurrentTimeResponse"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  google: {
    nested: {
      protobuf: {
        options: {
          go_package: "google.golang.org/protobuf/types/descriptorpb",
          java_package: "com.google.protobuf",
          java_outer_classname: "DescriptorProtos",
          csharp_namespace: "Google.Protobuf.Reflection",
          objc_class_prefix: "GPB",
          cc_enable_arenas: true,
          optimize_for: "SPEED"
        },
        nested: {
          Duration: {
            fields: {
              seconds: {
                type: "int64",
                id: 1
              },
              nanos: {
                type: "int32",
                id: 2
              }
            }
          },
          Empty: {
            fields: {}
          },
          Timestamp: {
            fields: {
              seconds: {
                type: "int64",
                id: 1
              },
              nanos: {
                type: "int32",
                id: 2
              }
            }
          },
          DoubleValue: {
            fields: {
              value: {
                type: "double",
                id: 1
              }
            }
          },
          FloatValue: {
            fields: {
              value: {
                type: "float",
                id: 1
              }
            }
          },
          Int64Value: {
            fields: {
              value: {
                type: "int64",
                id: 1
              }
            }
          },
          UInt64Value: {
            fields: {
              value: {
                type: "uint64",
                id: 1
              }
            }
          },
          Int32Value: {
            fields: {
              value: {
                type: "int32",
                id: 1
              }
            }
          },
          UInt32Value: {
            fields: {
              value: {
                type: "uint32",
                id: 1
              }
            }
          },
          BoolValue: {
            fields: {
              value: {
                type: "bool",
                id: 1
              }
            }
          },
          StringValue: {
            fields: {
              value: {
                type: "string",
                id: 1
              }
            }
          },
          BytesValue: {
            fields: {
              value: {
                type: "bytes",
                id: 1
              }
            }
          },
          FieldMask: {
            fields: {
              paths: {
                rule: "repeated",
                type: "string",
                id: 1
              }
            }
          },
          Any: {
            fields: {
              type_url: {
                type: "string",
                id: 1
              },
              value: {
                type: "bytes",
                id: 2
              }
            }
          },
          FileDescriptorSet: {
            edition: "proto2",
            fields: {
              file: {
                rule: "repeated",
                type: "FileDescriptorProto",
                id: 1
              }
            }
          },
          Edition: {
            edition: "proto2",
            values: {
              EDITION_UNKNOWN: 0,
              EDITION_PROTO2: 998,
              EDITION_PROTO3: 999,
              EDITION_2023: 1000,
              EDITION_1_TEST_ONLY: 1,
              EDITION_2_TEST_ONLY: 2,
              EDITION_99997_TEST_ONLY: 99997,
              EDITION_99998_TEST_ONLY: 99998,
              EDITION_99999_TEST_ONLY: 99999
            }
          },
          FileDescriptorProto: {
            edition: "proto2",
            fields: {
              name: {
                type: "string",
                id: 1
              },
              "package": {
                type: "string",
                id: 2
              },
              dependency: {
                rule: "repeated",
                type: "string",
                id: 3
              },
              publicDependency: {
                rule: "repeated",
                type: "int32",
                id: 10
              },
              weakDependency: {
                rule: "repeated",
                type: "int32",
                id: 11
              },
              messageType: {
                rule: "repeated",
                type: "DescriptorProto",
                id: 4
              },
              enumType: {
                rule: "repeated",
                type: "EnumDescriptorProto",
                id: 5
              },
              service: {
                rule: "repeated",
                type: "ServiceDescriptorProto",
                id: 6
              },
              extension: {
                rule: "repeated",
                type: "FieldDescriptorProto",
                id: 7
              },
              options: {
                type: "FileOptions",
                id: 8
              },
              sourceCodeInfo: {
                type: "SourceCodeInfo",
                id: 9
              },
              syntax: {
                type: "string",
                id: 12
              },
              edition: {
                type: "Edition",
                id: 14
              }
            }
          },
          DescriptorProto: {
            edition: "proto2",
            fields: {
              name: {
                type: "string",
                id: 1
              },
              field: {
                rule: "repeated",
                type: "FieldDescriptorProto",
                id: 2
              },
              extension: {
                rule: "repeated",
                type: "FieldDescriptorProto",
                id: 6
              },
              nestedType: {
                rule: "repeated",
                type: "DescriptorProto",
                id: 3
              },
              enumType: {
                rule: "repeated",
                type: "EnumDescriptorProto",
                id: 4
              },
              extensionRange: {
                rule: "repeated",
                type: "ExtensionRange",
                id: 5
              },
              oneofDecl: {
                rule: "repeated",
                type: "OneofDescriptorProto",
                id: 8
              },
              options: {
                type: "MessageOptions",
                id: 7
              },
              reservedRange: {
                rule: "repeated",
                type: "ReservedRange",
                id: 9
              },
              reservedName: {
                rule: "repeated",
                type: "string",
                id: 10
              }
            },
            nested: {
              ExtensionRange: {
                fields: {
                  start: {
                    type: "int32",
                    id: 1
                  },
                  end: {
                    type: "int32",
                    id: 2
                  },
                  options: {
                    type: "ExtensionRangeOptions",
                    id: 3
                  }
                }
              },
              ReservedRange: {
                fields: {
                  start: {
                    type: "int32",
                    id: 1
                  },
                  end: {
                    type: "int32",
                    id: 2
                  }
                }
              }
            }
          },
          ExtensionRangeOptions: {
            edition: "proto2",
            fields: {
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              },
              declaration: {
                rule: "repeated",
                type: "Declaration",
                id: 2,
                options: {
                  retention: "RETENTION_SOURCE"
                }
              },
              features: {
                type: "FeatureSet",
                id: 50
              },
              verification: {
                type: "VerificationState",
                id: 3,
                options: {
                  "default": "UNVERIFIED"
                }
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ],
            nested: {
              Declaration: {
                fields: {
                  number: {
                    type: "int32",
                    id: 1
                  },
                  fullName: {
                    type: "string",
                    id: 2
                  },
                  type: {
                    type: "string",
                    id: 3
                  },
                  reserved: {
                    type: "bool",
                    id: 5
                  },
                  repeated: {
                    type: "bool",
                    id: 6
                  }
                },
                reserved: [
                  [
                    4,
                    4
                  ]
                ]
              },
              VerificationState: {
                values: {
                  DECLARATION: 0,
                  UNVERIFIED: 1
                }
              }
            }
          },
          FieldDescriptorProto: {
            edition: "proto2",
            fields: {
              name: {
                type: "string",
                id: 1
              },
              number: {
                type: "int32",
                id: 3
              },
              label: {
                type: "Label",
                id: 4
              },
              type: {
                type: "Type",
                id: 5
              },
              typeName: {
                type: "string",
                id: 6
              },
              extendee: {
                type: "string",
                id: 2
              },
              defaultValue: {
                type: "string",
                id: 7
              },
              oneofIndex: {
                type: "int32",
                id: 9
              },
              jsonName: {
                type: "string",
                id: 10
              },
              options: {
                type: "FieldOptions",
                id: 8
              },
              proto3Optional: {
                type: "bool",
                id: 17
              }
            },
            nested: {
              Type: {
                values: {
                  TYPE_DOUBLE: 1,
                  TYPE_FLOAT: 2,
                  TYPE_INT64: 3,
                  TYPE_UINT64: 4,
                  TYPE_INT32: 5,
                  TYPE_FIXED64: 6,
                  TYPE_FIXED32: 7,
                  TYPE_BOOL: 8,
                  TYPE_STRING: 9,
                  TYPE_GROUP: 10,
                  TYPE_MESSAGE: 11,
                  TYPE_BYTES: 12,
                  TYPE_UINT32: 13,
                  TYPE_ENUM: 14,
                  TYPE_SFIXED32: 15,
                  TYPE_SFIXED64: 16,
                  TYPE_SINT32: 17,
                  TYPE_SINT64: 18
                }
              },
              Label: {
                values: {
                  LABEL_OPTIONAL: 1,
                  LABEL_REQUIRED: 2,
                  LABEL_REPEATED: 3
                }
              }
            }
          },
          OneofDescriptorProto: {
            edition: "proto2",
            fields: {
              name: {
                type: "string",
                id: 1
              },
              options: {
                type: "OneofOptions",
                id: 2
              }
            }
          },
          EnumDescriptorProto: {
            edition: "proto2",
            fields: {
              name: {
                type: "string",
                id: 1
              },
              value: {
                rule: "repeated",
                type: "EnumValueDescriptorProto",
                id: 2
              },
              options: {
                type: "EnumOptions",
                id: 3
              },
              reservedRange: {
                rule: "repeated",
                type: "EnumReservedRange",
                id: 4
              },
              reservedName: {
                rule: "repeated",
                type: "string",
                id: 5
              }
            },
            nested: {
              EnumReservedRange: {
                fields: {
                  start: {
                    type: "int32",
                    id: 1
                  },
                  end: {
                    type: "int32",
                    id: 2
                  }
                }
              }
            }
          },
          EnumValueDescriptorProto: {
            edition: "proto2",
            fields: {
              name: {
                type: "string",
                id: 1
              },
              number: {
                type: "int32",
                id: 2
              },
              options: {
                type: "EnumValueOptions",
                id: 3
              }
            }
          },
          ServiceDescriptorProto: {
            edition: "proto2",
            fields: {
              name: {
                type: "string",
                id: 1
              },
              method: {
                rule: "repeated",
                type: "MethodDescriptorProto",
                id: 2
              },
              options: {
                type: "ServiceOptions",
                id: 3
              }
            }
          },
          MethodDescriptorProto: {
            edition: "proto2",
            fields: {
              name: {
                type: "string",
                id: 1
              },
              inputType: {
                type: "string",
                id: 2
              },
              outputType: {
                type: "string",
                id: 3
              },
              options: {
                type: "MethodOptions",
                id: 4
              },
              clientStreaming: {
                type: "bool",
                id: 5,
                options: {
                  "default": false
                }
              },
              serverStreaming: {
                type: "bool",
                id: 6,
                options: {
                  "default": false
                }
              }
            }
          },
          FileOptions: {
            edition: "proto2",
            fields: {
              javaPackage: {
                type: "string",
                id: 1
              },
              javaOuterClassname: {
                type: "string",
                id: 8
              },
              javaMultipleFiles: {
                type: "bool",
                id: 10,
                options: {
                  "default": false
                }
              },
              javaGenerateEqualsAndHash: {
                type: "bool",
                id: 20,
                options: {
                  deprecated: true
                }
              },
              javaStringCheckUtf8: {
                type: "bool",
                id: 27,
                options: {
                  "default": false
                }
              },
              optimizeFor: {
                type: "OptimizeMode",
                id: 9,
                options: {
                  "default": "SPEED"
                }
              },
              goPackage: {
                type: "string",
                id: 11
              },
              ccGenericServices: {
                type: "bool",
                id: 16,
                options: {
                  "default": false
                }
              },
              javaGenericServices: {
                type: "bool",
                id: 17,
                options: {
                  "default": false
                }
              },
              pyGenericServices: {
                type: "bool",
                id: 18,
                options: {
                  "default": false
                }
              },
              phpGenericServices: {
                type: "bool",
                id: 42,
                options: {
                  "default": false
                }
              },
              deprecated: {
                type: "bool",
                id: 23,
                options: {
                  "default": false
                }
              },
              ccEnableArenas: {
                type: "bool",
                id: 31,
                options: {
                  "default": true
                }
              },
              objcClassPrefix: {
                type: "string",
                id: 36
              },
              csharpNamespace: {
                type: "string",
                id: 37
              },
              swiftPrefix: {
                type: "string",
                id: 39
              },
              phpClassPrefix: {
                type: "string",
                id: 40
              },
              phpNamespace: {
                type: "string",
                id: 41
              },
              phpMetadataNamespace: {
                type: "string",
                id: 44
              },
              rubyPackage: {
                type: "string",
                id: 45
              },
              features: {
                type: "FeatureSet",
                id: 50
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ],
            reserved: [
              [
                38,
                38
              ]
            ],
            nested: {
              OptimizeMode: {
                values: {
                  SPEED: 1,
                  CODE_SIZE: 2,
                  LITE_RUNTIME: 3
                }
              }
            }
          },
          MessageOptions: {
            edition: "proto2",
            fields: {
              messageSetWireFormat: {
                type: "bool",
                id: 1,
                options: {
                  "default": false
                }
              },
              noStandardDescriptorAccessor: {
                type: "bool",
                id: 2,
                options: {
                  "default": false
                }
              },
              deprecated: {
                type: "bool",
                id: 3,
                options: {
                  "default": false
                }
              },
              mapEntry: {
                type: "bool",
                id: 7
              },
              deprecatedLegacyJsonFieldConflicts: {
                type: "bool",
                id: 11,
                options: {
                  deprecated: true
                }
              },
              features: {
                type: "FeatureSet",
                id: 12
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ],
            reserved: [
              [
                4,
                4
              ],
              [
                5,
                5
              ],
              [
                6,
                6
              ],
              [
                8,
                8
              ],
              [
                9,
                9
              ]
            ]
          },
          FieldOptions: {
            edition: "proto2",
            fields: {
              ctype: {
                type: "CType",
                id: 1,
                options: {
                  "default": "STRING"
                }
              },
              packed: {
                type: "bool",
                id: 2
              },
              jstype: {
                type: "JSType",
                id: 6,
                options: {
                  "default": "JS_NORMAL"
                }
              },
              lazy: {
                type: "bool",
                id: 5,
                options: {
                  "default": false
                }
              },
              unverifiedLazy: {
                type: "bool",
                id: 15,
                options: {
                  "default": false
                }
              },
              deprecated: {
                type: "bool",
                id: 3,
                options: {
                  "default": false
                }
              },
              weak: {
                type: "bool",
                id: 10,
                options: {
                  "default": false
                }
              },
              debugRedact: {
                type: "bool",
                id: 16,
                options: {
                  "default": false
                }
              },
              retention: {
                type: "OptionRetention",
                id: 17
              },
              targets: {
                rule: "repeated",
                type: "OptionTargetType",
                id: 19
              },
              editionDefaults: {
                rule: "repeated",
                type: "EditionDefault",
                id: 20
              },
              features: {
                type: "FeatureSet",
                id: 21
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ],
            reserved: [
              [
                4,
                4
              ],
              [
                18,
                18
              ]
            ],
            nested: {
              CType: {
                values: {
                  STRING: 0,
                  CORD: 1,
                  STRING_PIECE: 2
                }
              },
              JSType: {
                values: {
                  JS_NORMAL: 0,
                  JS_STRING: 1,
                  JS_NUMBER: 2
                }
              },
              OptionRetention: {
                values: {
                  RETENTION_UNKNOWN: 0,
                  RETENTION_RUNTIME: 1,
                  RETENTION_SOURCE: 2
                }
              },
              OptionTargetType: {
                values: {
                  TARGET_TYPE_UNKNOWN: 0,
                  TARGET_TYPE_FILE: 1,
                  TARGET_TYPE_EXTENSION_RANGE: 2,
                  TARGET_TYPE_MESSAGE: 3,
                  TARGET_TYPE_FIELD: 4,
                  TARGET_TYPE_ONEOF: 5,
                  TARGET_TYPE_ENUM: 6,
                  TARGET_TYPE_ENUM_ENTRY: 7,
                  TARGET_TYPE_SERVICE: 8,
                  TARGET_TYPE_METHOD: 9
                }
              },
              EditionDefault: {
                fields: {
                  edition: {
                    type: "Edition",
                    id: 3
                  },
                  value: {
                    type: "string",
                    id: 2
                  }
                }
              }
            }
          },
          OneofOptions: {
            edition: "proto2",
            fields: {
              features: {
                type: "FeatureSet",
                id: 1
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ]
          },
          EnumOptions: {
            edition: "proto2",
            fields: {
              allowAlias: {
                type: "bool",
                id: 2
              },
              deprecated: {
                type: "bool",
                id: 3,
                options: {
                  "default": false
                }
              },
              deprecatedLegacyJsonFieldConflicts: {
                type: "bool",
                id: 6,
                options: {
                  deprecated: true
                }
              },
              features: {
                type: "FeatureSet",
                id: 7
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ],
            reserved: [
              [
                5,
                5
              ]
            ]
          },
          EnumValueOptions: {
            edition: "proto2",
            fields: {
              deprecated: {
                type: "bool",
                id: 1,
                options: {
                  "default": false
                }
              },
              features: {
                type: "FeatureSet",
                id: 2
              },
              debugRedact: {
                type: "bool",
                id: 3,
                options: {
                  "default": false
                }
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ]
          },
          ServiceOptions: {
            edition: "proto2",
            fields: {
              features: {
                type: "FeatureSet",
                id: 34
              },
              deprecated: {
                type: "bool",
                id: 33,
                options: {
                  "default": false
                }
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ]
          },
          MethodOptions: {
            edition: "proto2",
            fields: {
              deprecated: {
                type: "bool",
                id: 33,
                options: {
                  "default": false
                }
              },
              idempotencyLevel: {
                type: "IdempotencyLevel",
                id: 34,
                options: {
                  "default": "IDEMPOTENCY_UNKNOWN"
                }
              },
              features: {
                type: "FeatureSet",
                id: 35
              },
              uninterpretedOption: {
                rule: "repeated",
                type: "UninterpretedOption",
                id: 999
              }
            },
            extensions: [
              [
                1000,
                536870911
              ]
            ],
            nested: {
              IdempotencyLevel: {
                values: {
                  IDEMPOTENCY_UNKNOWN: 0,
                  NO_SIDE_EFFECTS: 1,
                  IDEMPOTENT: 2
                }
              }
            }
          },
          UninterpretedOption: {
            edition: "proto2",
            fields: {
              name: {
                rule: "repeated",
                type: "NamePart",
                id: 2
              },
              identifierValue: {
                type: "string",
                id: 3
              },
              positiveIntValue: {
                type: "uint64",
                id: 4
              },
              negativeIntValue: {
                type: "int64",
                id: 5
              },
              doubleValue: {
                type: "double",
                id: 6
              },
              stringValue: {
                type: "bytes",
                id: 7
              },
              aggregateValue: {
                type: "string",
                id: 8
              }
            },
            nested: {
              NamePart: {
                fields: {
                  namePart: {
                    rule: "required",
                    type: "string",
                    id: 1
                  },
                  isExtension: {
                    rule: "required",
                    type: "bool",
                    id: 2
                  }
                }
              }
            }
          },
          FeatureSet: {
            edition: "proto2",
            fields: {
              fieldPresence: {
                type: "FieldPresence",
                id: 1,
                options: {
                  retention: "RETENTION_RUNTIME",
                  targets: "TARGET_TYPE_FILE",
                  "edition_defaults.edition": "EDITION_2023",
                  "edition_defaults.value": "EXPLICIT"
                }
              },
              enumType: {
                type: "EnumType",
                id: 2,
                options: {
                  retention: "RETENTION_RUNTIME",
                  targets: "TARGET_TYPE_FILE",
                  "edition_defaults.edition": "EDITION_PROTO3",
                  "edition_defaults.value": "OPEN"
                }
              },
              repeatedFieldEncoding: {
                type: "RepeatedFieldEncoding",
                id: 3,
                options: {
                  retention: "RETENTION_RUNTIME",
                  targets: "TARGET_TYPE_FILE",
                  "edition_defaults.edition": "EDITION_PROTO3",
                  "edition_defaults.value": "PACKED"
                }
              },
              utf8Validation: {
                type: "Utf8Validation",
                id: 4,
                options: {
                  retention: "RETENTION_RUNTIME",
                  targets: "TARGET_TYPE_FILE",
                  "edition_defaults.edition": "EDITION_PROTO3",
                  "edition_defaults.value": "VERIFY"
                }
              },
              messageEncoding: {
                type: "MessageEncoding",
                id: 5,
                options: {
                  retention: "RETENTION_RUNTIME",
                  targets: "TARGET_TYPE_FILE",
                  "edition_defaults.edition": "EDITION_PROTO2",
                  "edition_defaults.value": "LENGTH_PREFIXED"
                }
              },
              jsonFormat: {
                type: "JsonFormat",
                id: 6,
                options: {
                  retention: "RETENTION_RUNTIME",
                  targets: "TARGET_TYPE_FILE",
                  "edition_defaults.edition": "EDITION_PROTO3",
                  "edition_defaults.value": "ALLOW"
                }
              }
            },
            extensions: [
              [
                1000,
                1000
              ],
              [
                1001,
                1001
              ],
              [
                9995,
                9999
              ]
            ],
            reserved: [
              [
                999,
                999
              ]
            ],
            nested: {
              FieldPresence: {
                values: {
                  FIELD_PRESENCE_UNKNOWN: 0,
                  EXPLICIT: 1,
                  IMPLICIT: 2,
                  LEGACY_REQUIRED: 3
                }
              },
              EnumType: {
                values: {
                  ENUM_TYPE_UNKNOWN: 0,
                  OPEN: 1,
                  CLOSED: 2
                }
              },
              RepeatedFieldEncoding: {
                values: {
                  REPEATED_FIELD_ENCODING_UNKNOWN: 0,
                  PACKED: 1,
                  EXPANDED: 2
                }
              },
              Utf8Validation: {
                values: {
                  UTF8_VALIDATION_UNKNOWN: 0,
                  UNVERIFIED: 1,
                  VERIFY: 2
                }
              },
              MessageEncoding: {
                values: {
                  MESSAGE_ENCODING_UNKNOWN: 0,
                  LENGTH_PREFIXED: 1,
                  DELIMITED: 2
                }
              },
              JsonFormat: {
                values: {
                  JSON_FORMAT_UNKNOWN: 0,
                  ALLOW: 1,
                  LEGACY_BEST_EFFORT: 2
                }
              }
            }
          },
          FeatureSetDefaults: {
            edition: "proto2",
            fields: {
              defaults: {
                rule: "repeated",
                type: "FeatureSetEditionDefault",
                id: 1
              },
              minimumEdition: {
                type: "Edition",
                id: 4
              },
              maximumEdition: {
                type: "Edition",
                id: 5
              }
            },
            nested: {
              FeatureSetEditionDefault: {
                fields: {
                  edition: {
                    type: "Edition",
                    id: 3
                  },
                  features: {
                    type: "FeatureSet",
                    id: 2
                  }
                }
              }
            }
          },
          SourceCodeInfo: {
            edition: "proto2",
            fields: {
              location: {
                rule: "repeated",
                type: "Location",
                id: 1
              }
            },
            nested: {
              Location: {
                fields: {
                  path: {
                    rule: "repeated",
                    type: "int32",
                    id: 1,
                    options: {
                      packed: true
                    }
                  },
                  span: {
                    rule: "repeated",
                    type: "int32",
                    id: 2,
                    options: {
                      packed: true
                    }
                  },
                  leadingComments: {
                    type: "string",
                    id: 3
                  },
                  trailingComments: {
                    type: "string",
                    id: 4
                  },
                  leadingDetachedComments: {
                    rule: "repeated",
                    type: "string",
                    id: 6
                  }
                }
              }
            }
          },
          GeneratedCodeInfo: {
            edition: "proto2",
            fields: {
              annotation: {
                rule: "repeated",
                type: "Annotation",
                id: 1
              }
            },
            nested: {
              Annotation: {
                fields: {
                  path: {
                    rule: "repeated",
                    type: "int32",
                    id: 1,
                    options: {
                      packed: true
                    }
                  },
                  sourceFile: {
                    type: "string",
                    id: 2
                  },
                  begin: {
                    type: "int32",
                    id: 3
                  },
                  end: {
                    type: "int32",
                    id: 4
                  },
                  semantic: {
                    type: "Semantic",
                    id: 5
                  }
                },
                nested: {
                  Semantic: {
                    values: {
                      NONE: 0,
                      SET: 1,
                      ALIAS: 2
                    }
                  }
                }
              }
            }
          }
        }
      },
      api: {
        options: {
          go_package: "google.golang.org/genproto/googleapis/api/annotations;annotations",
          java_multiple_files: true,
          java_outer_classname: "HttpProto",
          java_package: "com.google.api",
          objc_class_prefix: "GAPI",
          cc_enable_arenas: true
        },
        nested: {
          http: {
            type: "HttpRule",
            id: 72295728,
            extend: "google.protobuf.MethodOptions"
          },
          Http: {
            fields: {
              rules: {
                rule: "repeated",
                type: "HttpRule",
                id: 1
              },
              fullyDecodeReservedExpansion: {
                type: "bool",
                id: 2
              }
            }
          },
          HttpRule: {
            oneofs: {
              pattern: {
                oneof: [
                  "get",
                  "put",
                  "post",
                  "delete",
                  "patch",
                  "custom"
                ]
              }
            },
            fields: {
              selector: {
                type: "string",
                id: 1
              },
              get: {
                type: "string",
                id: 2
              },
              put: {
                type: "string",
                id: 3
              },
              post: {
                type: "string",
                id: 4
              },
              "delete": {
                type: "string",
                id: 5
              },
              patch: {
                type: "string",
                id: 6
              },
              custom: {
                type: "CustomHttpPattern",
                id: 8
              },
              body: {
                type: "string",
                id: 7
              },
              responseBody: {
                type: "string",
                id: 12
              },
              additionalBindings: {
                rule: "repeated",
                type: "HttpRule",
                id: 11
              }
            }
          },
          CustomHttpPattern: {
            fields: {
              kind: {
                type: "string",
                id: 1
              },
              path: {
                type: "string",
                id: 2
              }
            }
          }
        }
      },
      rpc: {
        options: {
          cc_enable_arenas: true,
          go_package: "google.golang.org/genproto/googleapis/rpc/status;status",
          java_multiple_files: true,
          java_outer_classname: "StatusProto",
          java_package: "com.google.rpc",
          objc_class_prefix: "RPC"
        },
        nested: {
          Status: {
            fields: {
              code: {
                type: "int32",
                id: 1
              },
              message: {
                type: "string",
                id: 2
              },
              details: {
                rule: "repeated",
                type: "google.protobuf.Any",
                id: 3
              }
            }
          }
        }
      }
    }
  },
  grpc: {
    nested: {
      health: {
        nested: {
          v1: {
            options: {
              csharp_namespace: "Grpc.Health.V1",
              go_package: "google.golang.org/grpc/health/grpc_health_v1",
              java_multiple_files: true,
              java_outer_classname: "HealthProto",
              java_package: "io.grpc.health.v1"
            },
            nested: {
              HealthCheckRequest: {
                fields: {
                  service: {
                    type: "string",
                    id: 1
                  }
                }
              },
              HealthCheckResponse: {
                fields: {
                  status: {
                    type: "ServingStatus",
                    id: 1
                  }
                },
                nested: {
                  ServingStatus: {
                    values: {
                      UNKNOWN: 0,
                      SERVING: 1,
                      NOT_SERVING: 2,
                      SERVICE_UNKNOWN: 3
                    }
                  }
                }
              },
              Health: {
                methods: {
                  Check: {
                    requestType: "HealthCheckRequest",
                    responseType: "HealthCheckResponse"
                  },
                  Watch: {
                    requestType: "HealthCheckRequest",
                    responseType: "HealthCheckResponse",
                    responseStream: true
                  }
                }
              }
            }
          }
        }
      }
    }
  }
});

module.exports = $root;
